/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "rtc.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "string.h"
uint8_t aTxBuffer[8];
uint8_t checkS,checkM,checkH, checkA, checkB;
uint8_t sec, min, hour, Dsec,Dmin, Dhour;
char str1[11]={0};
char str2[11]={0};
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
uint8_t RTC_ConvertFromDec(uint8_t c){
	  uint8_t ch = ((c>>4)*10+(0x0F&c));
	  return ch;
}

uint8_t RTC_ConvertFromBinDec(uint8_t c){
	  uint8_t ch = ((c/10)<<4)|(c%10);
	  return ch;
}
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{ uint8_t checkS1[6];
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_I2C1_Init();
  MX_USART1_UART_Init();
  MX_RTC_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
  HAL_TIM_PWM_Start_IT(&htim1,TIM_CHANNEL_1);

  int nh1, nh2, nm1, nm2, ns1, ns2;
  char h1, h2, m1, m2, s1, s2;
  uint8_t q_min, q_hour, q_sec, alarm;
  uint8_t sss = RTC_ConvertFromBinDec(0),
		  mmm = RTC_ConvertFromBinDec(0),
		  hhh = RTC_ConvertFromBinDec(0);

  	  	  hhh = hhh & 0b11111111;

	HAL_UART_Transmit(&huart1,"Enter  current time\r",20,60);
	HAL_UART_Receive_IT(&huart1,str1,10);
		//while ((USART1->SR & USART_SR_RXNE)==0) ;
	while (HAL_UART_Receive_IT(&huart1,str1,10)!=HAL_OK)
		__NOP();

	h1 = str1[0];
	h2 = str1[1];

	m1 = str1[3];
	m2 = str1[4];

	s1 = str1[6];
	s2 = str1[7];

	nh1 = (int)h1 - 48;
	nh2 = (int)h2 - 48;
	nm1 = (int)m1 - 48;
	nm2 = (int)m2 - 48;
	ns1 = (int)s1 - 48;
	ns2 = (int)s2 - 48;

	hhh = RTC_ConvertFromBinDec(nh1 * 10 + nh2);
	mmm = RTC_ConvertFromBinDec(nm1 * 10 + nm2);
	sss = RTC_ConvertFromBinDec(ns1 * 10 + ns2);

	hhh = hhh & 0b00111111;

//	sprintf(str1, "%d%d:%d%d:%d%d", nh1, nh2, nm1, nm2, ns1, ns2);

	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x00, 1, &sss, 1, 1000);
	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x01, 1, &mmm, 1, 1000);
	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x02, 1, &hhh, 1, 1000);

	HAL_UART_Transmit(&huart1,"Enter alarm time\r",16,60);
	sprintf(str1, "%d%d:%d%d:%d%d", nh1, nh2, nm1, nm2, ns1, ns2);
	while (HAL_UART_Receive_IT(&huart1,str1,10)!=HAL_OK)
	  		__NOP();

	h1 = str1[0];
	h2 = str1[1];

	m1 = str1[3];
	m2 = str1[4];

	s1 = str1[6];
	s2 = str1[7];

	nh1 = (uint8_t)h1 - 48;
	nh2 = (uint8_t)h2 - 48;
	nm1 = (uint8_t)m1 - 48;
	nm2 = (uint8_t)m2 - 48;
	ns1 = (uint8_t)s1 - 48;
	ns2 = (uint8_t)s2 - 48;

	hhh = RTC_ConvertFromBinDec(nh1 * 10 + nh2);
	mmm = RTC_ConvertFromBinDec(nm1 * 10 + nm2);
	sss = RTC_ConvertFromBinDec(ns1 * 10 + ns2);

	int st = 0b00000101, mp = 0b10000000, np = 0b011111111;

	hhh = hhh & np;
	mmm = mmm & np;
	sss = sss & np;

	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x07, 1, &sss, 1, 1000);
	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x08, 1, &mmm, 1, 1000);
	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x09, 1, &hhh, 1, 1000);
	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x0a, 1, &mp, 1, 1000);

	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x0e, 1, &st, 1, 1000);

	sprintf(str1, "%d%d:%d%d:%d%d", nh1, nh2, nm1, nm2, ns1, ns2);

	HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x0f, 1, &checkA, 1, 1000);

	alarm = checkA & 0b00000001;
	 uint8_t aaaaa = 0b00000000;
	 uint8_t Alarm_sec, Alarm_min, Alarm_hour;

	  HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x0f, 1, &aaaaa, 1, 1000);
	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x07, 1, &Alarm_sec, 1, 1000);
	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x08, 1, &Alarm_min, 1, 1000);
	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x09, 1, &Alarm_hour, 1, 1000);

	  HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x0F, 1, &aaaaa, 1, 1000);

	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x0E, 1, &checkA, 1, 1000);
	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x0F, 1, &checkB, 1, 1000);
	  HAL_Delay(1000);

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  HAL_Delay(1000);
	  TIM1 -> CCR1 = 0;
	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x00, 1, &checkS, 1, 1000);
	  sec=(checkS & 0b00001111);
	  Dsec = (checkS & 0b01110000)>>4;

	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x01, 1, &checkM, 1, 1000);
	  min = (checkM & 0b00001111);
	  Dmin = (checkM & 0b01110000)>>4;

	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x02, 1, &checkH, 1, 1000);
	  hour = (checkH & 0b0001111);
	  Dhour = (checkH & 0b00110000)>>4;

	  q_min = (Dmin * 10) + min;
	  q_hour = (Dhour * 10) + hour;
	  q_sec = (Dsec * 10) + sec;

	  sprintf(str2, "%d:%d:%d\r", q_hour, q_min, q_sec);

	  HAL_UART_Transmit(&huart1,str2,strlen(str2),60);

    /* USER CODE END WHILE */
  }
    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
