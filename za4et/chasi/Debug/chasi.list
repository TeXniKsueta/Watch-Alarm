
chasi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007844  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  08007950  08007950  00017950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079f8  080079f8  00020458  2**0
                  CONTENTS
  4 .ARM          00000000  080079f8  080079f8  00020458  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079f8  080079f8  00020458  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f8  080079f8  000179f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079fc  080079fc  000179fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000458  20000000  08007a00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000458  08007e58  00020458  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005d8  08007e58  000205d8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020458  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f78  00000000  00000000  00020481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000025a1  00000000  00000000  000313f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f90  00000000  00000000  000339a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ea0  00000000  00000000  00034930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001810c  00000000  00000000  000357d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000130b7  00000000  00000000  0004d8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e0f  00000000  00000000  00060993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ea7a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044c8  00000000  00000000  000ea7f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000458 	.word	0x20000458
 8000128:	00000000 	.word	0x00000000
 800012c:	08007938 	.word	0x08007938

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000045c 	.word	0x2000045c
 8000148:	08007938 	.word	0x08007938

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000162:	4b0c      	ldr	r3, [pc, #48]	; (8000194 <MX_DMA_Init+0x38>)
 8000164:	695b      	ldr	r3, [r3, #20]
 8000166:	4a0b      	ldr	r2, [pc, #44]	; (8000194 <MX_DMA_Init+0x38>)
 8000168:	f043 0301 	orr.w	r3, r3, #1
 800016c:	6153      	str	r3, [r2, #20]
 800016e:	4b09      	ldr	r3, [pc, #36]	; (8000194 <MX_DMA_Init+0x38>)
 8000170:	695b      	ldr	r3, [r3, #20]
 8000172:	f003 0301 	and.w	r3, r3, #1
 8000176:	607b      	str	r3, [r7, #4]
 8000178:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200c      	movs	r0, #12
 8000180:	f001 f80f 	bl	80011a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000184:	200c      	movs	r0, #12
 8000186:	f001 f828 	bl	80011da <HAL_NVIC_EnableIRQ>

}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000

08000198 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b086      	sub	sp, #24
 800019c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	f107 0308 	add.w	r3, r7, #8
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001ac:	4b17      	ldr	r3, [pc, #92]	; (800020c <MX_GPIO_Init+0x74>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a16      	ldr	r2, [pc, #88]	; (800020c <MX_GPIO_Init+0x74>)
 80001b2:	f043 0308 	orr.w	r3, r3, #8
 80001b6:	6193      	str	r3, [r2, #24]
 80001b8:	4b14      	ldr	r3, [pc, #80]	; (800020c <MX_GPIO_Init+0x74>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	f003 0308 	and.w	r3, r3, #8
 80001c0:	607b      	str	r3, [r7, #4]
 80001c2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001c4:	4b11      	ldr	r3, [pc, #68]	; (800020c <MX_GPIO_Init+0x74>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a10      	ldr	r2, [pc, #64]	; (800020c <MX_GPIO_Init+0x74>)
 80001ca:	f043 0304 	orr.w	r3, r3, #4
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b0e      	ldr	r3, [pc, #56]	; (800020c <MX_GPIO_Init+0x74>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0304 	and.w	r3, r3, #4
 80001d8:	603b      	str	r3, [r7, #0]
 80001da:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80001dc:	2301      	movs	r3, #1
 80001de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80001e0:	4b0b      	ldr	r3, [pc, #44]	; (8000210 <MX_GPIO_Init+0x78>)
 80001e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80001e4:	2301      	movs	r3, #1
 80001e6:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001e8:	f107 0308 	add.w	r3, r7, #8
 80001ec:	4619      	mov	r1, r3
 80001ee:	4809      	ldr	r0, [pc, #36]	; (8000214 <MX_GPIO_Init+0x7c>)
 80001f0:	f001 fabc 	bl	800176c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80001f4:	2200      	movs	r2, #0
 80001f6:	2100      	movs	r1, #0
 80001f8:	2006      	movs	r0, #6
 80001fa:	f000 ffd2 	bl	80011a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80001fe:	2006      	movs	r0, #6
 8000200:	f000 ffeb 	bl	80011da <HAL_NVIC_EnableIRQ>

}
 8000204:	bf00      	nop
 8000206:	3718      	adds	r7, #24
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	40021000 	.word	0x40021000
 8000210:	10210000 	.word	0x10210000
 8000214:	40010c00 	.word	0x40010c00

08000218 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800021c:	4b12      	ldr	r3, [pc, #72]	; (8000268 <MX_I2C1_Init+0x50>)
 800021e:	4a13      	ldr	r2, [pc, #76]	; (800026c <MX_I2C1_Init+0x54>)
 8000220:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <MX_I2C1_Init+0x50>)
 8000224:	4a12      	ldr	r2, [pc, #72]	; (8000270 <MX_I2C1_Init+0x58>)
 8000226:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000228:	4b0f      	ldr	r3, [pc, #60]	; (8000268 <MX_I2C1_Init+0x50>)
 800022a:	2200      	movs	r2, #0
 800022c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800022e:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <MX_I2C1_Init+0x50>)
 8000230:	2200      	movs	r2, #0
 8000232:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000234:	4b0c      	ldr	r3, [pc, #48]	; (8000268 <MX_I2C1_Init+0x50>)
 8000236:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800023a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800023c:	4b0a      	ldr	r3, [pc, #40]	; (8000268 <MX_I2C1_Init+0x50>)
 800023e:	2200      	movs	r2, #0
 8000240:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <MX_I2C1_Init+0x50>)
 8000244:	2200      	movs	r2, #0
 8000246:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000248:	4b07      	ldr	r3, [pc, #28]	; (8000268 <MX_I2C1_Init+0x50>)
 800024a:	2200      	movs	r2, #0
 800024c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800024e:	4b06      	ldr	r3, [pc, #24]	; (8000268 <MX_I2C1_Init+0x50>)
 8000250:	2200      	movs	r2, #0
 8000252:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000254:	4804      	ldr	r0, [pc, #16]	; (8000268 <MX_I2C1_Init+0x50>)
 8000256:	f001 fc27 	bl	8001aa8 <HAL_I2C_Init>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000260:	f000 fb69 	bl	8000936 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000264:	bf00      	nop
 8000266:	bd80      	pop	{r7, pc}
 8000268:	20000474 	.word	0x20000474
 800026c:	40005400 	.word	0x40005400
 8000270:	000186a0 	.word	0x000186a0

08000274 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b088      	sub	sp, #32
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800027c:	f107 0310 	add.w	r3, r7, #16
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	4a1e      	ldr	r2, [pc, #120]	; (8000308 <HAL_I2C_MspInit+0x94>)
 8000290:	4293      	cmp	r3, r2
 8000292:	d135      	bne.n	8000300 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000294:	4b1d      	ldr	r3, [pc, #116]	; (800030c <HAL_I2C_MspInit+0x98>)
 8000296:	699b      	ldr	r3, [r3, #24]
 8000298:	4a1c      	ldr	r2, [pc, #112]	; (800030c <HAL_I2C_MspInit+0x98>)
 800029a:	f043 0308 	orr.w	r3, r3, #8
 800029e:	6193      	str	r3, [r2, #24]
 80002a0:	4b1a      	ldr	r3, [pc, #104]	; (800030c <HAL_I2C_MspInit+0x98>)
 80002a2:	699b      	ldr	r3, [r3, #24]
 80002a4:	f003 0308 	and.w	r3, r3, #8
 80002a8:	60fb      	str	r3, [r7, #12]
 80002aa:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80002ac:	23c0      	movs	r3, #192	; 0xc0
 80002ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80002b0:	2312      	movs	r3, #18
 80002b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b4:	2300      	movs	r3, #0
 80002b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80002b8:	2303      	movs	r3, #3
 80002ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002bc:	f107 0310 	add.w	r3, r7, #16
 80002c0:	4619      	mov	r1, r3
 80002c2:	4813      	ldr	r0, [pc, #76]	; (8000310 <HAL_I2C_MspInit+0x9c>)
 80002c4:	f001 fa52 	bl	800176c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80002c8:	4b10      	ldr	r3, [pc, #64]	; (800030c <HAL_I2C_MspInit+0x98>)
 80002ca:	69db      	ldr	r3, [r3, #28]
 80002cc:	4a0f      	ldr	r2, [pc, #60]	; (800030c <HAL_I2C_MspInit+0x98>)
 80002ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002d2:	61d3      	str	r3, [r2, #28]
 80002d4:	4b0d      	ldr	r3, [pc, #52]	; (800030c <HAL_I2C_MspInit+0x98>)
 80002d6:	69db      	ldr	r3, [r3, #28]
 80002d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80002dc:	60bb      	str	r3, [r7, #8]
 80002de:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80002e0:	2200      	movs	r2, #0
 80002e2:	2100      	movs	r1, #0
 80002e4:	201f      	movs	r0, #31
 80002e6:	f000 ff5c 	bl	80011a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80002ea:	201f      	movs	r0, #31
 80002ec:	f000 ff75 	bl	80011da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80002f0:	2200      	movs	r2, #0
 80002f2:	2100      	movs	r1, #0
 80002f4:	2020      	movs	r0, #32
 80002f6:	f000 ff54 	bl	80011a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80002fa:	2020      	movs	r0, #32
 80002fc:	f000 ff6d 	bl	80011da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000300:	bf00      	nop
 8000302:	3720      	adds	r7, #32
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	40005400 	.word	0x40005400
 800030c:	40021000 	.word	0x40021000
 8000310:	40010c00 	.word	0x40010c00

08000314 <RTC_ConvertFromBinDec>:
uint8_t RTC_ConvertFromDec(uint8_t c){
	  uint8_t ch = ((c>>4)*10+(0x0F&c));
	  return ch;
}

uint8_t RTC_ConvertFromBinDec(uint8_t c){
 8000314:	b480      	push	{r7}
 8000316:	b085      	sub	sp, #20
 8000318:	af00      	add	r7, sp, #0
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
	  uint8_t ch = ((c/10)<<4)|(c%10);
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <RTC_ConvertFromBinDec+0x44>)
 8000322:	fba2 2303 	umull	r2, r3, r2, r3
 8000326:	08db      	lsrs	r3, r3, #3
 8000328:	b2db      	uxtb	r3, r3
 800032a:	011b      	lsls	r3, r3, #4
 800032c:	b258      	sxtb	r0, r3
 800032e:	79fa      	ldrb	r2, [r7, #7]
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <RTC_ConvertFromBinDec+0x44>)
 8000332:	fba3 1302 	umull	r1, r3, r3, r2
 8000336:	08d9      	lsrs	r1, r3, #3
 8000338:	460b      	mov	r3, r1
 800033a:	009b      	lsls	r3, r3, #2
 800033c:	440b      	add	r3, r1
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	1ad3      	subs	r3, r2, r3
 8000342:	b2db      	uxtb	r3, r3
 8000344:	b25b      	sxtb	r3, r3
 8000346:	4303      	orrs	r3, r0
 8000348:	b25b      	sxtb	r3, r3
 800034a:	73fb      	strb	r3, [r7, #15]
	  return ch;
 800034c:	7bfb      	ldrb	r3, [r7, #15]
}
 800034e:	4618      	mov	r0, r3
 8000350:	3714      	adds	r7, #20
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	cccccccd 	.word	0xcccccccd

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b092      	sub	sp, #72	; 0x48
 8000360:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000362:	f000 fdc1 	bl	8000ee8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000366:	f000 faab 	bl	80008c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800036a:	f7ff ff15 	bl	8000198 <MX_GPIO_Init>
  MX_DMA_Init();
 800036e:	f7ff fef5 	bl	800015c <MX_DMA_Init>
  MX_I2C1_Init();
 8000372:	f7ff ff51 	bl	8000218 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000376:	f000 fd13 	bl	8000da0 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 800037a:	f000 fbd3 	bl	8000b24 <MX_TIM1_Init>
//  	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//  	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, buff, 10*2);
  int nh1, nh2, nm1, nm2, ns1, ns2;
  char h1, h2, m1, m2, s1, s2;
  uint8_t q_min, q_hour, q_sec, alarm;
  uint8_t sss = RTC_ConvertFromBinDec(0),
 800037e:	2000      	movs	r0, #0
 8000380:	f7ff ffc8 	bl	8000314 <RTC_ConvertFromBinDec>
 8000384:	4603      	mov	r3, r0
 8000386:	73fb      	strb	r3, [r7, #15]
		  mmm = RTC_ConvertFromBinDec(0),
 8000388:	2000      	movs	r0, #0
 800038a:	f7ff ffc3 	bl	8000314 <RTC_ConvertFromBinDec>
 800038e:	4603      	mov	r3, r0
 8000390:	73bb      	strb	r3, [r7, #14]
		  hhh = RTC_ConvertFromBinDec(0);
 8000392:	2000      	movs	r0, #0
 8000394:	f7ff ffbe 	bl	8000314 <RTC_ConvertFromBinDec>
 8000398:	4603      	mov	r3, r0
 800039a:	737b      	strb	r3, [r7, #13]

  	  	  hhh = hhh & 0b11111111;
 800039c:	7b7b      	ldrb	r3, [r7, #13]
 800039e:	737b      	strb	r3, [r7, #13]

	HAL_UART_Transmit(&huart1,"Enter  current time\r",20,60);
 80003a0:	233c      	movs	r3, #60	; 0x3c
 80003a2:	2214      	movs	r2, #20
 80003a4:	495b      	ldr	r1, [pc, #364]	; (8000514 <main+0x1b8>)
 80003a6:	485c      	ldr	r0, [pc, #368]	; (8000518 <main+0x1bc>)
 80003a8:	f005 fe6b 	bl	8006082 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart1,str1,10);
 80003ac:	220a      	movs	r2, #10
 80003ae:	495b      	ldr	r1, [pc, #364]	; (800051c <main+0x1c0>)
 80003b0:	4859      	ldr	r0, [pc, #356]	; (8000518 <main+0x1bc>)
 80003b2:	f005 fee9 	bl	8006188 <HAL_UART_Receive_IT>
	while (HAL_UART_Receive_IT(&huart1,str1,10)!=HAL_OK)
 80003b6:	e000      	b.n	80003ba <main+0x5e>
		__NOP();
 80003b8:	bf00      	nop
	while (HAL_UART_Receive_IT(&huart1,str1,10)!=HAL_OK)
 80003ba:	220a      	movs	r2, #10
 80003bc:	4957      	ldr	r1, [pc, #348]	; (800051c <main+0x1c0>)
 80003be:	4856      	ldr	r0, [pc, #344]	; (8000518 <main+0x1bc>)
 80003c0:	f005 fee2 	bl	8006188 <HAL_UART_Receive_IT>
 80003c4:	4603      	mov	r3, r0
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d1f6      	bne.n	80003b8 <main+0x5c>

	h1 = str1[0];
 80003ca:	4b54      	ldr	r3, [pc, #336]	; (800051c <main+0x1c0>)
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	h2 = str1[1];
 80003d2:	4b52      	ldr	r3, [pc, #328]	; (800051c <main+0x1c0>)
 80003d4:	785b      	ldrb	r3, [r3, #1]
 80003d6:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	m1 = str1[3];
 80003da:	4b50      	ldr	r3, [pc, #320]	; (800051c <main+0x1c0>)
 80003dc:	78db      	ldrb	r3, [r3, #3]
 80003de:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	m2 = str1[4];
 80003e2:	4b4e      	ldr	r3, [pc, #312]	; (800051c <main+0x1c0>)
 80003e4:	791b      	ldrb	r3, [r3, #4]
 80003e6:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	s1 = str1[6];
 80003ea:	4b4c      	ldr	r3, [pc, #304]	; (800051c <main+0x1c0>)
 80003ec:	799b      	ldrb	r3, [r3, #6]
 80003ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	s2 = str1[7];
 80003f2:	4b4a      	ldr	r3, [pc, #296]	; (800051c <main+0x1c0>)
 80003f4:	79db      	ldrb	r3, [r3, #7]
 80003f6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	nh1 = (int)h1 - 48;
 80003fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80003fe:	3b30      	subs	r3, #48	; 0x30
 8000400:	62fb      	str	r3, [r7, #44]	; 0x2c
	nh2 = (int)h2 - 48;
 8000402:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8000406:	3b30      	subs	r3, #48	; 0x30
 8000408:	62bb      	str	r3, [r7, #40]	; 0x28
	nm1 = (int)m1 - 48;
 800040a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800040e:	3b30      	subs	r3, #48	; 0x30
 8000410:	627b      	str	r3, [r7, #36]	; 0x24
	nm2 = (int)m2 - 48;
 8000412:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000416:	3b30      	subs	r3, #48	; 0x30
 8000418:	623b      	str	r3, [r7, #32]
	ns1 = (int)s1 - 48;
 800041a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800041e:	3b30      	subs	r3, #48	; 0x30
 8000420:	61fb      	str	r3, [r7, #28]
	ns2 = (int)s2 - 48;
 8000422:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000426:	3b30      	subs	r3, #48	; 0x30
 8000428:	61bb      	str	r3, [r7, #24]

	hhh = RTC_ConvertFromBinDec(nh1 * 10 + nh2);
 800042a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800042c:	b2db      	uxtb	r3, r3
 800042e:	461a      	mov	r2, r3
 8000430:	0092      	lsls	r2, r2, #2
 8000432:	4413      	add	r3, r2
 8000434:	005b      	lsls	r3, r3, #1
 8000436:	b2da      	uxtb	r2, r3
 8000438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800043a:	b2db      	uxtb	r3, r3
 800043c:	4413      	add	r3, r2
 800043e:	b2db      	uxtb	r3, r3
 8000440:	4618      	mov	r0, r3
 8000442:	f7ff ff67 	bl	8000314 <RTC_ConvertFromBinDec>
 8000446:	4603      	mov	r3, r0
 8000448:	737b      	strb	r3, [r7, #13]
	mmm = RTC_ConvertFromBinDec(nm1 * 10 + nm2);
 800044a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800044c:	b2db      	uxtb	r3, r3
 800044e:	461a      	mov	r2, r3
 8000450:	0092      	lsls	r2, r2, #2
 8000452:	4413      	add	r3, r2
 8000454:	005b      	lsls	r3, r3, #1
 8000456:	b2da      	uxtb	r2, r3
 8000458:	6a3b      	ldr	r3, [r7, #32]
 800045a:	b2db      	uxtb	r3, r3
 800045c:	4413      	add	r3, r2
 800045e:	b2db      	uxtb	r3, r3
 8000460:	4618      	mov	r0, r3
 8000462:	f7ff ff57 	bl	8000314 <RTC_ConvertFromBinDec>
 8000466:	4603      	mov	r3, r0
 8000468:	73bb      	strb	r3, [r7, #14]
	sss = RTC_ConvertFromBinDec(ns1 * 10 + ns2);
 800046a:	69fb      	ldr	r3, [r7, #28]
 800046c:	b2db      	uxtb	r3, r3
 800046e:	461a      	mov	r2, r3
 8000470:	0092      	lsls	r2, r2, #2
 8000472:	4413      	add	r3, r2
 8000474:	005b      	lsls	r3, r3, #1
 8000476:	b2da      	uxtb	r2, r3
 8000478:	69bb      	ldr	r3, [r7, #24]
 800047a:	b2db      	uxtb	r3, r3
 800047c:	4413      	add	r3, r2
 800047e:	b2db      	uxtb	r3, r3
 8000480:	4618      	mov	r0, r3
 8000482:	f7ff ff47 	bl	8000314 <RTC_ConvertFromBinDec>
 8000486:	4603      	mov	r3, r0
 8000488:	73fb      	strb	r3, [r7, #15]

	hhh = hhh & 0b00111111;
 800048a:	7b7b      	ldrb	r3, [r7, #13]
 800048c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000490:	b2db      	uxtb	r3, r3
 8000492:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x00, 1, &sss, 1, 1000);
 8000494:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000498:	9302      	str	r3, [sp, #8]
 800049a:	2301      	movs	r3, #1
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	f107 030f 	add.w	r3, r7, #15
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	2301      	movs	r3, #1
 80004a6:	2200      	movs	r2, #0
 80004a8:	21d0      	movs	r1, #208	; 0xd0
 80004aa:	481d      	ldr	r0, [pc, #116]	; (8000520 <main+0x1c4>)
 80004ac:	f001 fc54 	bl	8001d58 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x01, 1, &mmm, 1, 1000);
 80004b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004b4:	9302      	str	r3, [sp, #8]
 80004b6:	2301      	movs	r3, #1
 80004b8:	9301      	str	r3, [sp, #4]
 80004ba:	f107 030e 	add.w	r3, r7, #14
 80004be:	9300      	str	r3, [sp, #0]
 80004c0:	2301      	movs	r3, #1
 80004c2:	2201      	movs	r2, #1
 80004c4:	21d0      	movs	r1, #208	; 0xd0
 80004c6:	4816      	ldr	r0, [pc, #88]	; (8000520 <main+0x1c4>)
 80004c8:	f001 fc46 	bl	8001d58 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x02, 1, &hhh, 1, 1000);
 80004cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004d0:	9302      	str	r3, [sp, #8]
 80004d2:	2301      	movs	r3, #1
 80004d4:	9301      	str	r3, [sp, #4]
 80004d6:	f107 030d 	add.w	r3, r7, #13
 80004da:	9300      	str	r3, [sp, #0]
 80004dc:	2301      	movs	r3, #1
 80004de:	2202      	movs	r2, #2
 80004e0:	21d0      	movs	r1, #208	; 0xd0
 80004e2:	480f      	ldr	r0, [pc, #60]	; (8000520 <main+0x1c4>)
 80004e4:	f001 fc38 	bl	8001d58 <HAL_I2C_Mem_Write>

	HAL_UART_Transmit(&huart1,"Enter alarm time\r",16,60);
 80004e8:	233c      	movs	r3, #60	; 0x3c
 80004ea:	2210      	movs	r2, #16
 80004ec:	490d      	ldr	r1, [pc, #52]	; (8000524 <main+0x1c8>)
 80004ee:	480a      	ldr	r0, [pc, #40]	; (8000518 <main+0x1bc>)
 80004f0:	f005 fdc7 	bl	8006082 <HAL_UART_Transmit>
	sprintf(str1, "%d%d:%d%d:%d%d", nh1, nh2, nm1, nm2, ns1, ns2);
 80004f4:	69bb      	ldr	r3, [r7, #24]
 80004f6:	9303      	str	r3, [sp, #12]
 80004f8:	69fb      	ldr	r3, [r7, #28]
 80004fa:	9302      	str	r3, [sp, #8]
 80004fc:	6a3b      	ldr	r3, [r7, #32]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000502:	9300      	str	r3, [sp, #0]
 8000504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000508:	4907      	ldr	r1, [pc, #28]	; (8000528 <main+0x1cc>)
 800050a:	4804      	ldr	r0, [pc, #16]	; (800051c <main+0x1c0>)
 800050c:	f006 fd9a 	bl	8007044 <siprintf>
	while (HAL_UART_Receive_IT(&huart1,str1,10)!=HAL_OK)
 8000510:	e00d      	b.n	800052e <main+0x1d2>
 8000512:	bf00      	nop
 8000514:	08007950 	.word	0x08007950
 8000518:	2000057c 	.word	0x2000057c
 800051c:	200004d4 	.word	0x200004d4
 8000520:	20000474 	.word	0x20000474
 8000524:	08007968 	.word	0x08007968
 8000528:	0800797c 	.word	0x0800797c
	  		__NOP();
 800052c:	bf00      	nop
	while (HAL_UART_Receive_IT(&huart1,str1,10)!=HAL_OK)
 800052e:	220a      	movs	r2, #10
 8000530:	49b4      	ldr	r1, [pc, #720]	; (8000804 <main+0x4a8>)
 8000532:	48b5      	ldr	r0, [pc, #724]	; (8000808 <main+0x4ac>)
 8000534:	f005 fe28 	bl	8006188 <HAL_UART_Receive_IT>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d1f6      	bne.n	800052c <main+0x1d0>

	h1 = str1[0];
 800053e:	4bb1      	ldr	r3, [pc, #708]	; (8000804 <main+0x4a8>)
 8000540:	781b      	ldrb	r3, [r3, #0]
 8000542:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	h2 = str1[1];
 8000546:	4baf      	ldr	r3, [pc, #700]	; (8000804 <main+0x4a8>)
 8000548:	785b      	ldrb	r3, [r3, #1]
 800054a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

	m1 = str1[3];
 800054e:	4bad      	ldr	r3, [pc, #692]	; (8000804 <main+0x4a8>)
 8000550:	78db      	ldrb	r3, [r3, #3]
 8000552:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	m2 = str1[4];
 8000556:	4bab      	ldr	r3, [pc, #684]	; (8000804 <main+0x4a8>)
 8000558:	791b      	ldrb	r3, [r3, #4]
 800055a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

	s1 = str1[6];
 800055e:	4ba9      	ldr	r3, [pc, #676]	; (8000804 <main+0x4a8>)
 8000560:	799b      	ldrb	r3, [r3, #6]
 8000562:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	s2 = str1[7];
 8000566:	4ba7      	ldr	r3, [pc, #668]	; (8000804 <main+0x4a8>)
 8000568:	79db      	ldrb	r3, [r3, #7]
 800056a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	nh1 = (uint8_t)h1 - 48;
 800056e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000572:	3b30      	subs	r3, #48	; 0x30
 8000574:	62fb      	str	r3, [r7, #44]	; 0x2c
	nh2 = (uint8_t)h2 - 48;
 8000576:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 800057a:	3b30      	subs	r3, #48	; 0x30
 800057c:	62bb      	str	r3, [r7, #40]	; 0x28
	nm1 = (uint8_t)m1 - 48;
 800057e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8000582:	3b30      	subs	r3, #48	; 0x30
 8000584:	627b      	str	r3, [r7, #36]	; 0x24
	nm2 = (uint8_t)m2 - 48;
 8000586:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800058a:	3b30      	subs	r3, #48	; 0x30
 800058c:	623b      	str	r3, [r7, #32]
	ns1 = (uint8_t)s1 - 48;
 800058e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000592:	3b30      	subs	r3, #48	; 0x30
 8000594:	61fb      	str	r3, [r7, #28]
	ns2 = (uint8_t)s2 - 48;
 8000596:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800059a:	3b30      	subs	r3, #48	; 0x30
 800059c:	61bb      	str	r3, [r7, #24]

	hhh = RTC_ConvertFromBinDec(nh1 * 10 + nh2);
 800059e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80005a0:	b2db      	uxtb	r3, r3
 80005a2:	461a      	mov	r2, r3
 80005a4:	0092      	lsls	r2, r2, #2
 80005a6:	4413      	add	r3, r2
 80005a8:	005b      	lsls	r3, r3, #1
 80005aa:	b2da      	uxtb	r2, r3
 80005ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	4413      	add	r3, r2
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	4618      	mov	r0, r3
 80005b6:	f7ff fead 	bl	8000314 <RTC_ConvertFromBinDec>
 80005ba:	4603      	mov	r3, r0
 80005bc:	737b      	strb	r3, [r7, #13]
	mmm = RTC_ConvertFromBinDec(nm1 * 10 + nm2);
 80005be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	461a      	mov	r2, r3
 80005c4:	0092      	lsls	r2, r2, #2
 80005c6:	4413      	add	r3, r2
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	b2da      	uxtb	r2, r3
 80005cc:	6a3b      	ldr	r3, [r7, #32]
 80005ce:	b2db      	uxtb	r3, r3
 80005d0:	4413      	add	r3, r2
 80005d2:	b2db      	uxtb	r3, r3
 80005d4:	4618      	mov	r0, r3
 80005d6:	f7ff fe9d 	bl	8000314 <RTC_ConvertFromBinDec>
 80005da:	4603      	mov	r3, r0
 80005dc:	73bb      	strb	r3, [r7, #14]
	sss = RTC_ConvertFromBinDec(ns1 * 10 + ns2);
 80005de:	69fb      	ldr	r3, [r7, #28]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	461a      	mov	r2, r3
 80005e4:	0092      	lsls	r2, r2, #2
 80005e6:	4413      	add	r3, r2
 80005e8:	005b      	lsls	r3, r3, #1
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	69bb      	ldr	r3, [r7, #24]
 80005ee:	b2db      	uxtb	r3, r3
 80005f0:	4413      	add	r3, r2
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fe8d 	bl	8000314 <RTC_ConvertFromBinDec>
 80005fa:	4603      	mov	r3, r0
 80005fc:	73fb      	strb	r3, [r7, #15]

	int st = 0b00000101, mp = 0b10000000, np = 0b011111111;
 80005fe:	2305      	movs	r3, #5
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	2380      	movs	r3, #128	; 0x80
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	23ff      	movs	r3, #255	; 0xff
 8000608:	617b      	str	r3, [r7, #20]

	hhh = hhh & np;
 800060a:	697b      	ldr	r3, [r7, #20]
 800060c:	b25a      	sxtb	r2, r3
 800060e:	7b7b      	ldrb	r3, [r7, #13]
 8000610:	b25b      	sxtb	r3, r3
 8000612:	4013      	ands	r3, r2
 8000614:	b25b      	sxtb	r3, r3
 8000616:	b2db      	uxtb	r3, r3
 8000618:	737b      	strb	r3, [r7, #13]
	mmm = mmm & np;
 800061a:	697b      	ldr	r3, [r7, #20]
 800061c:	b25a      	sxtb	r2, r3
 800061e:	7bbb      	ldrb	r3, [r7, #14]
 8000620:	b25b      	sxtb	r3, r3
 8000622:	4013      	ands	r3, r2
 8000624:	b25b      	sxtb	r3, r3
 8000626:	b2db      	uxtb	r3, r3
 8000628:	73bb      	strb	r3, [r7, #14]
	sss = sss & np;
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	b25a      	sxtb	r2, r3
 800062e:	7bfb      	ldrb	r3, [r7, #15]
 8000630:	b25b      	sxtb	r3, r3
 8000632:	4013      	ands	r3, r2
 8000634:	b25b      	sxtb	r3, r3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x07, 1, &sss, 1, 1000);
 800063a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800063e:	9302      	str	r3, [sp, #8]
 8000640:	2301      	movs	r3, #1
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	f107 030f 	add.w	r3, r7, #15
 8000648:	9300      	str	r3, [sp, #0]
 800064a:	2301      	movs	r3, #1
 800064c:	2207      	movs	r2, #7
 800064e:	21d0      	movs	r1, #208	; 0xd0
 8000650:	486e      	ldr	r0, [pc, #440]	; (800080c <main+0x4b0>)
 8000652:	f001 fb81 	bl	8001d58 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x08, 1, &mmm, 1, 1000);
 8000656:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800065a:	9302      	str	r3, [sp, #8]
 800065c:	2301      	movs	r3, #1
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	f107 030e 	add.w	r3, r7, #14
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	2208      	movs	r2, #8
 800066a:	21d0      	movs	r1, #208	; 0xd0
 800066c:	4867      	ldr	r0, [pc, #412]	; (800080c <main+0x4b0>)
 800066e:	f001 fb73 	bl	8001d58 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x09, 1, &hhh, 1, 1000);
 8000672:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000676:	9302      	str	r3, [sp, #8]
 8000678:	2301      	movs	r3, #1
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	f107 030d 	add.w	r3, r7, #13
 8000680:	9300      	str	r3, [sp, #0]
 8000682:	2301      	movs	r3, #1
 8000684:	2209      	movs	r2, #9
 8000686:	21d0      	movs	r1, #208	; 0xd0
 8000688:	4860      	ldr	r0, [pc, #384]	; (800080c <main+0x4b0>)
 800068a:	f001 fb65 	bl	8001d58 <HAL_I2C_Mem_Write>
	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x0a, 1, &mp, 1, 1000);
 800068e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000692:	9302      	str	r3, [sp, #8]
 8000694:	2301      	movs	r3, #1
 8000696:	9301      	str	r3, [sp, #4]
 8000698:	1d3b      	adds	r3, r7, #4
 800069a:	9300      	str	r3, [sp, #0]
 800069c:	2301      	movs	r3, #1
 800069e:	220a      	movs	r2, #10
 80006a0:	21d0      	movs	r1, #208	; 0xd0
 80006a2:	485a      	ldr	r0, [pc, #360]	; (800080c <main+0x4b0>)
 80006a4:	f001 fb58 	bl	8001d58 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x0e, 1, &st, 1, 1000);
 80006a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ac:	9302      	str	r3, [sp, #8]
 80006ae:	2301      	movs	r3, #1
 80006b0:	9301      	str	r3, [sp, #4]
 80006b2:	f107 0308 	add.w	r3, r7, #8
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	2301      	movs	r3, #1
 80006ba:	220e      	movs	r2, #14
 80006bc:	21d0      	movs	r1, #208	; 0xd0
 80006be:	4853      	ldr	r0, [pc, #332]	; (800080c <main+0x4b0>)
 80006c0:	f001 fb4a 	bl	8001d58 <HAL_I2C_Mem_Write>

	sprintf(str1, "%d%d:%d%d:%d%d", nh1, nh2, nm1, nm2, ns1, ns2);
 80006c4:	69bb      	ldr	r3, [r7, #24]
 80006c6:	9303      	str	r3, [sp, #12]
 80006c8:	69fb      	ldr	r3, [r7, #28]
 80006ca:	9302      	str	r3, [sp, #8]
 80006cc:	6a3b      	ldr	r3, [r7, #32]
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80006d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80006d8:	494d      	ldr	r1, [pc, #308]	; (8000810 <main+0x4b4>)
 80006da:	484a      	ldr	r0, [pc, #296]	; (8000804 <main+0x4a8>)
 80006dc:	f006 fcb2 	bl	8007044 <siprintf>

//	HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x0f, 1, &checkA, 1, 1000);

	alarm = checkA & 0b00000001;
 80006e0:	4b4c      	ldr	r3, [pc, #304]	; (8000814 <main+0x4b8>)
 80006e2:	781b      	ldrb	r3, [r3, #0]
 80006e4:	f003 0301 	and.w	r3, r3, #1
 80006e8:	74fb      	strb	r3, [r7, #19]
	 uint8_t aaaaa = 0b00000000;
 80006ea:	2300      	movs	r3, #0
 80006ec:	70fb      	strb	r3, [r7, #3]
	 uint8_t Alarm_sec, Alarm_min, Alarm_hour;

	  HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x0f, 1, &aaaaa, 1, 1000);
 80006ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006f2:	9302      	str	r3, [sp, #8]
 80006f4:	2301      	movs	r3, #1
 80006f6:	9301      	str	r3, [sp, #4]
 80006f8:	1cfb      	adds	r3, r7, #3
 80006fa:	9300      	str	r3, [sp, #0]
 80006fc:	2301      	movs	r3, #1
 80006fe:	220f      	movs	r2, #15
 8000700:	21d0      	movs	r1, #208	; 0xd0
 8000702:	4842      	ldr	r0, [pc, #264]	; (800080c <main+0x4b0>)
 8000704:	f001 fb28 	bl	8001d58 <HAL_I2C_Mem_Write>
//	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x07, 1, &Alarm_sec, 1, 1000);
//	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x08, 1, &Alarm_min, 1, 1000);
//	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x09, 1, &Alarm_hour, 1, 1000);

	  HAL_I2C_Mem_Write(&hi2c1, 0xD0, 0x0F, 1, &aaaaa, 1, 1000);
 8000708:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800070c:	9302      	str	r3, [sp, #8]
 800070e:	2301      	movs	r3, #1
 8000710:	9301      	str	r3, [sp, #4]
 8000712:	1cfb      	adds	r3, r7, #3
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	2301      	movs	r3, #1
 8000718:	220f      	movs	r2, #15
 800071a:	21d0      	movs	r1, #208	; 0xd0
 800071c:	483b      	ldr	r0, [pc, #236]	; (800080c <main+0x4b0>)
 800071e:	f001 fb1b 	bl	8001d58 <HAL_I2C_Mem_Write>

//	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x0E, 1, &checkA, 1, 1000);
//	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x0F, 1, &checkB, 1, 1000);
	  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, buff_1, 3);
 8000722:	2303      	movs	r3, #3
 8000724:	4a3c      	ldr	r2, [pc, #240]	; (8000818 <main+0x4bc>)
 8000726:	2100      	movs	r1, #0
 8000728:	483c      	ldr	r0, [pc, #240]	; (800081c <main+0x4c0>)
 800072a:	f004 fbc9 	bl	8004ec0 <HAL_TIM_PWM_Start_DMA>
	  HAL_Delay(1000);
 800072e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000732:	f000 fc3b 	bl	8000fac <HAL_Delay>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  TIM1 -> CCR1 = 0;
 8000736:	4b3a      	ldr	r3, [pc, #232]	; (8000820 <main+0x4c4>)
 8000738:	2200      	movs	r2, #0
 800073a:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x00, 1, &checkS, 1, 1000);
 800073c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000740:	9302      	str	r3, [sp, #8]
 8000742:	2301      	movs	r3, #1
 8000744:	9301      	str	r3, [sp, #4]
 8000746:	4b37      	ldr	r3, [pc, #220]	; (8000824 <main+0x4c8>)
 8000748:	9300      	str	r3, [sp, #0]
 800074a:	2301      	movs	r3, #1
 800074c:	2200      	movs	r2, #0
 800074e:	21d0      	movs	r1, #208	; 0xd0
 8000750:	482e      	ldr	r0, [pc, #184]	; (800080c <main+0x4b0>)
 8000752:	f001 fbfb 	bl	8001f4c <HAL_I2C_Mem_Read>
	  sec=(checkS & 0b00001111);
 8000756:	4b33      	ldr	r3, [pc, #204]	; (8000824 <main+0x4c8>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	f003 030f 	and.w	r3, r3, #15
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b31      	ldr	r3, [pc, #196]	; (8000828 <main+0x4cc>)
 8000762:	701a      	strb	r2, [r3, #0]
	  Dsec = (checkS & 0b01110000)>>4;
 8000764:	4b2f      	ldr	r3, [pc, #188]	; (8000824 <main+0x4c8>)
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	111b      	asrs	r3, r3, #4
 800076a:	b2db      	uxtb	r3, r3
 800076c:	f003 0307 	and.w	r3, r3, #7
 8000770:	b2da      	uxtb	r2, r3
 8000772:	4b2e      	ldr	r3, [pc, #184]	; (800082c <main+0x4d0>)
 8000774:	701a      	strb	r2, [r3, #0]

	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x01, 1, &checkM, 1, 1000);
 8000776:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800077a:	9302      	str	r3, [sp, #8]
 800077c:	2301      	movs	r3, #1
 800077e:	9301      	str	r3, [sp, #4]
 8000780:	4b2b      	ldr	r3, [pc, #172]	; (8000830 <main+0x4d4>)
 8000782:	9300      	str	r3, [sp, #0]
 8000784:	2301      	movs	r3, #1
 8000786:	2201      	movs	r2, #1
 8000788:	21d0      	movs	r1, #208	; 0xd0
 800078a:	4820      	ldr	r0, [pc, #128]	; (800080c <main+0x4b0>)
 800078c:	f001 fbde 	bl	8001f4c <HAL_I2C_Mem_Read>
	  min = (checkM & 0b00001111);
 8000790:	4b27      	ldr	r3, [pc, #156]	; (8000830 <main+0x4d4>)
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	f003 030f 	and.w	r3, r3, #15
 8000798:	b2da      	uxtb	r2, r3
 800079a:	4b26      	ldr	r3, [pc, #152]	; (8000834 <main+0x4d8>)
 800079c:	701a      	strb	r2, [r3, #0]
	  Dmin = (checkM & 0b01110000)>>4;
 800079e:	4b24      	ldr	r3, [pc, #144]	; (8000830 <main+0x4d4>)
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	111b      	asrs	r3, r3, #4
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	f003 0307 	and.w	r3, r3, #7
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <main+0x4dc>)
 80007ae:	701a      	strb	r2, [r3, #0]

	  HAL_I2C_Mem_Read(&hi2c1, 0xD0, 0x02, 1, &checkH, 1, 1000);
 80007b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007b4:	9302      	str	r3, [sp, #8]
 80007b6:	2301      	movs	r3, #1
 80007b8:	9301      	str	r3, [sp, #4]
 80007ba:	4b20      	ldr	r3, [pc, #128]	; (800083c <main+0x4e0>)
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2301      	movs	r3, #1
 80007c0:	2202      	movs	r2, #2
 80007c2:	21d0      	movs	r1, #208	; 0xd0
 80007c4:	4811      	ldr	r0, [pc, #68]	; (800080c <main+0x4b0>)
 80007c6:	f001 fbc1 	bl	8001f4c <HAL_I2C_Mem_Read>
	  hour = (checkH & 0b0001111);
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <main+0x4e0>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	f003 030f 	and.w	r3, r3, #15
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b1a      	ldr	r3, [pc, #104]	; (8000840 <main+0x4e4>)
 80007d6:	701a      	strb	r2, [r3, #0]
	  Dhour = (checkH & 0b00110000)>>4;
 80007d8:	4b18      	ldr	r3, [pc, #96]	; (800083c <main+0x4e0>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	111b      	asrs	r3, r3, #4
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	f003 0303 	and.w	r3, r3, #3
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4b17      	ldr	r3, [pc, #92]	; (8000844 <main+0x4e8>)
 80007e8:	701a      	strb	r2, [r3, #0]

	  q_min = (Dmin * 10) + min;
 80007ea:	4b13      	ldr	r3, [pc, #76]	; (8000838 <main+0x4dc>)
 80007ec:	781b      	ldrb	r3, [r3, #0]
 80007ee:	461a      	mov	r2, r3
 80007f0:	0092      	lsls	r2, r2, #2
 80007f2:	4413      	add	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b0e      	ldr	r3, [pc, #56]	; (8000834 <main+0x4d8>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	4413      	add	r3, r2
 80007fe:	74bb      	strb	r3, [r7, #18]
 8000800:	e022      	b.n	8000848 <main+0x4ec>
 8000802:	bf00      	nop
 8000804:	200004d4 	.word	0x200004d4
 8000808:	2000057c 	.word	0x2000057c
 800080c:	20000474 	.word	0x20000474
 8000810:	0800797c 	.word	0x0800797c
 8000814:	200004cb 	.word	0x200004cb
 8000818:	20000000 	.word	0x20000000
 800081c:	200004f0 	.word	0x200004f0
 8000820:	40012c00 	.word	0x40012c00
 8000824:	200004c8 	.word	0x200004c8
 8000828:	200004cc 	.word	0x200004cc
 800082c:	200004cf 	.word	0x200004cf
 8000830:	200004c9 	.word	0x200004c9
 8000834:	200004cd 	.word	0x200004cd
 8000838:	200004d0 	.word	0x200004d0
 800083c:	200004ca 	.word	0x200004ca
 8000840:	200004ce 	.word	0x200004ce
 8000844:	200004d1 	.word	0x200004d1
	  q_hour = (Dhour * 10) + hour;
 8000848:	4b16      	ldr	r3, [pc, #88]	; (80008a4 <main+0x548>)
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	461a      	mov	r2, r3
 800084e:	0092      	lsls	r2, r2, #2
 8000850:	4413      	add	r3, r2
 8000852:	005b      	lsls	r3, r3, #1
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <main+0x54c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	4413      	add	r3, r2
 800085c:	747b      	strb	r3, [r7, #17]
	  q_sec = (Dsec * 10) + sec;
 800085e:	4b13      	ldr	r3, [pc, #76]	; (80008ac <main+0x550>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	461a      	mov	r2, r3
 8000864:	0092      	lsls	r2, r2, #2
 8000866:	4413      	add	r3, r2
 8000868:	005b      	lsls	r3, r3, #1
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <main+0x554>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	4413      	add	r3, r2
 8000872:	743b      	strb	r3, [r7, #16]

	  sprintf(str2, "%d:%d:%d\r", q_hour, q_min, q_sec);
 8000874:	7c7a      	ldrb	r2, [r7, #17]
 8000876:	7cb9      	ldrb	r1, [r7, #18]
 8000878:	7c3b      	ldrb	r3, [r7, #16]
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	460b      	mov	r3, r1
 800087e:	490d      	ldr	r1, [pc, #52]	; (80008b4 <main+0x558>)
 8000880:	480d      	ldr	r0, [pc, #52]	; (80008b8 <main+0x55c>)
 8000882:	f006 fbdf 	bl	8007044 <siprintf>

	  HAL_UART_Transmit(&huart1,str2,strlen(str2),60);
 8000886:	480c      	ldr	r0, [pc, #48]	; (80008b8 <main+0x55c>)
 8000888:	f7ff fc60 	bl	800014c <strlen>
 800088c:	4603      	mov	r3, r0
 800088e:	b29a      	uxth	r2, r3
 8000890:	233c      	movs	r3, #60	; 0x3c
 8000892:	4909      	ldr	r1, [pc, #36]	; (80008b8 <main+0x55c>)
 8000894:	4809      	ldr	r0, [pc, #36]	; (80008bc <main+0x560>)
 8000896:	f005 fbf4 	bl	8006082 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 800089a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800089e:	f000 fb85 	bl	8000fac <HAL_Delay>
	  TIM1 -> CCR1 = 0;
 80008a2:	e748      	b.n	8000736 <main+0x3da>
 80008a4:	200004d1 	.word	0x200004d1
 80008a8:	200004ce 	.word	0x200004ce
 80008ac:	200004cf 	.word	0x200004cf
 80008b0:	200004cc 	.word	0x200004cc
 80008b4:	0800798c 	.word	0x0800798c
 80008b8:	200004e0 	.word	0x200004e0
 80008bc:	2000057c 	.word	0x2000057c

080008c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b090      	sub	sp, #64	; 0x40
 80008c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c6:	f107 0318 	add.w	r3, r7, #24
 80008ca:	2228      	movs	r2, #40	; 0x28
 80008cc:	2100      	movs	r1, #0
 80008ce:	4618      	mov	r0, r3
 80008d0:	f006 fbb0 	bl	8007034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d4:	1d3b      	adds	r3, r7, #4
 80008d6:	2200      	movs	r2, #0
 80008d8:	601a      	str	r2, [r3, #0]
 80008da:	605a      	str	r2, [r3, #4]
 80008dc:	609a      	str	r2, [r3, #8]
 80008de:	60da      	str	r2, [r3, #12]
 80008e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e2:	2302      	movs	r3, #2
 80008e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008e6:	2301      	movs	r3, #1
 80008e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008ea:	2310      	movs	r3, #16
 80008ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008f2:	f107 0318 	add.w	r3, r7, #24
 80008f6:	4618      	mov	r0, r3
 80008f8:	f003 fe2a 	bl	8004550 <HAL_RCC_OscConfig>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000902:	f000 f818 	bl	8000936 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000906:	230f      	movs	r3, #15
 8000908:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800090a:	2300      	movs	r3, #0
 800090c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800090e:	2300      	movs	r3, #0
 8000910:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f004 f898 	bl	8004a54 <HAL_RCC_ClockConfig>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800092a:	f000 f804 	bl	8000936 <Error_Handler>
  }
}
 800092e:	bf00      	nop
 8000930:	3740      	adds	r7, #64	; 0x40
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800093a:	b672      	cpsid	i
}
 800093c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800093e:	e7fe      	b.n	800093e <Error_Handler+0x8>

08000940 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000946:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <HAL_MspInit+0x40>)
 8000948:	699b      	ldr	r3, [r3, #24]
 800094a:	4a0d      	ldr	r2, [pc, #52]	; (8000980 <HAL_MspInit+0x40>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6193      	str	r3, [r2, #24]
 8000952:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <HAL_MspInit+0x40>)
 8000954:	699b      	ldr	r3, [r3, #24]
 8000956:	f003 0301 	and.w	r3, r3, #1
 800095a:	607b      	str	r3, [r7, #4]
 800095c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800095e:	4b08      	ldr	r3, [pc, #32]	; (8000980 <HAL_MspInit+0x40>)
 8000960:	69db      	ldr	r3, [r3, #28]
 8000962:	4a07      	ldr	r2, [pc, #28]	; (8000980 <HAL_MspInit+0x40>)
 8000964:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000968:	61d3      	str	r3, [r2, #28]
 800096a:	4b05      	ldr	r3, [pc, #20]	; (8000980 <HAL_MspInit+0x40>)
 800096c:	69db      	ldr	r3, [r3, #28]
 800096e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000972:	603b      	str	r3, [r7, #0]
 8000974:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	bc80      	pop	{r7}
 800097e:	4770      	bx	lr
 8000980:	40021000 	.word	0x40021000

08000984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <NMI_Handler+0x4>

0800098a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <HardFault_Handler+0x4>

08000990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <MemManage_Handler+0x4>

08000996 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800099a:	e7fe      	b.n	800099a <BusFault_Handler+0x4>

0800099c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <UsageFault_Handler+0x4>

080009a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a2:	b480      	push	{r7}
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a6:	bf00      	nop
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr

080009ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ae:	b480      	push	{r7}
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b2:	bf00      	nop
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bc80      	pop	{r7}
 80009b8:	4770      	bx	lr

080009ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009ba:	b480      	push	{r7}
 80009bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009be:	bf00      	nop
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bc80      	pop	{r7}
 80009c4:	4770      	bx	lr

080009c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ca:	f000 fad3 	bl	8000f74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0

	//	HAL_TIM_Base_Start_IT(&htim1);
//	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
//	HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, buff, 10*2);
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80009d8:	2001      	movs	r0, #1
 80009da:	f001 f843 	bl	8001a64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  HAL_TIM_PWM_Start_DMA(&htim1, TIM_CHANNEL_1, buff_1, 3000);
 80009de:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <EXTI0_IRQHandler+0x20>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80009e8:	2100      	movs	r1, #0
 80009ea:	4803      	ldr	r0, [pc, #12]	; (80009f8 <EXTI0_IRQHandler+0x24>)
 80009ec:	f004 fa68 	bl	8004ec0 <HAL_TIM_PWM_Start_DMA>
 // for (int i = 0; i < 10; i ++) {
//	  TIM1->CCR1 = buff[i];
//	  htim1.Init.Period = buff[i];
	//  }
  /* USER CODE END EXTI0_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000000 	.word	0x20000000
 80009f8:	200004f0 	.word	0x200004f0

080009fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8000a00:	4802      	ldr	r0, [pc, #8]	; (8000a0c <DMA1_Channel2_IRQHandler+0x10>)
 8000a02:	f000 fd73 	bl	80014ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8000a06:	bf00      	nop
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000538 	.word	0x20000538

08000a10 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a14:	4802      	ldr	r0, [pc, #8]	; (8000a20 <TIM1_BRK_IRQHandler+0x10>)
 8000a16:	f004 fbed 	bl	80051f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	200004f0 	.word	0x200004f0

08000a24 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <TIM1_UP_IRQHandler+0x10>)
 8000a2a:	f004 fbe3 	bl	80051f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200004f0 	.word	0x200004f0

08000a38 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000a3e:	f004 fbd9 	bl	80051f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	200004f0 	.word	0x200004f0

08000a4c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <TIM1_CC_IRQHandler+0x10>)
 8000a52:	f004 fbcf 	bl	80051f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	200004f0 	.word	0x200004f0

08000a60 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000a64:	4802      	ldr	r0, [pc, #8]	; (8000a70 <I2C1_EV_IRQHandler+0x10>)
 8000a66:	f001 fcd9 	bl	800241c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	20000474 	.word	0x20000474

08000a74 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000a78:	4802      	ldr	r0, [pc, #8]	; (8000a84 <I2C1_ER_IRQHandler+0x10>)
 8000a7a:	f001 fe40 	bl	80026fe <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	20000474 	.word	0x20000474

08000a88 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a8c:	4805      	ldr	r0, [pc, #20]	; (8000aa4 <USART1_IRQHandler+0x1c>)
 8000a8e:	f005 fcb5 	bl	80063fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  if (USART1->DR==0x0D)
 8000a92:	4b05      	ldr	r3, [pc, #20]	; (8000aa8 <USART1_IRQHandler+0x20>)
 8000a94:	685b      	ldr	r3, [r3, #4]
 8000a96:	2b0d      	cmp	r3, #13
 8000a98:	d102      	bne.n	8000aa0 <USART1_IRQHandler+0x18>
               {
         HAL_UART_Abort_IT(&huart1);//  Если пришел символ конца строки, то прерываем прием
 8000a9a:	4802      	ldr	r0, [pc, #8]	; (8000aa4 <USART1_IRQHandler+0x1c>)
 8000a9c:	f005 fb9a 	bl	80061d4 <HAL_UART_Abort_IT>
               }
  /* USER CODE END USART1_IRQn 1 */
}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	2000057c 	.word	0x2000057c
 8000aa8:	40013800 	.word	0x40013800

08000aac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab4:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <_sbrk+0x5c>)
 8000ab6:	4b15      	ldr	r3, [pc, #84]	; (8000b0c <_sbrk+0x60>)
 8000ab8:	1ad3      	subs	r3, r2, r3
 8000aba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ac0:	4b13      	ldr	r3, [pc, #76]	; (8000b10 <_sbrk+0x64>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d102      	bne.n	8000ace <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac8:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <_sbrk+0x64>)
 8000aca:	4a12      	ldr	r2, [pc, #72]	; (8000b14 <_sbrk+0x68>)
 8000acc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <_sbrk+0x64>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	4413      	add	r3, r2
 8000ad6:	693a      	ldr	r2, [r7, #16]
 8000ad8:	429a      	cmp	r2, r3
 8000ada:	d207      	bcs.n	8000aec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000adc:	f006 fa80 	bl	8006fe0 <__errno>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	220c      	movs	r2, #12
 8000ae4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aea:	e009      	b.n	8000b00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aec:	4b08      	ldr	r3, [pc, #32]	; (8000b10 <_sbrk+0x64>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <_sbrk+0x64>)
 8000af4:	681a      	ldr	r2, [r3, #0]
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	4413      	add	r3, r2
 8000afa:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <_sbrk+0x64>)
 8000afc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afe:	68fb      	ldr	r3, [r7, #12]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20002800 	.word	0x20002800
 8000b0c:	00000400 	.word	0x00000400
 8000b10:	200004ec 	.word	0x200004ec
 8000b14:	200005d8 	.word	0x200005d8

08000b18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bc80      	pop	{r7}
 8000b22:	4770      	bx	lr

08000b24 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
DMA_HandleTypeDef hdma_tim1_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b096      	sub	sp, #88	; 0x58
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
 8000b36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]
 8000b52:	615a      	str	r2, [r3, #20]
 8000b54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2220      	movs	r2, #32
 8000b5a:	2100      	movs	r1, #0
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f006 fa69 	bl	8007034 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b62:	4b3e      	ldr	r3, [pc, #248]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b64:	4a3e      	ldr	r2, [pc, #248]	; (8000c60 <MX_TIM1_Init+0x13c>)
 8000b66:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b68:	4b3c      	ldr	r3, [pc, #240]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b6e:	4b3b      	ldr	r3, [pc, #236]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000;
 8000b74:	4b39      	ldr	r3, [pc, #228]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b76:	f242 7210 	movw	r2, #10000	; 0x2710
 8000b7a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7c:	4b37      	ldr	r3, [pc, #220]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b82:	4b36      	ldr	r3, [pc, #216]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b34      	ldr	r3, [pc, #208]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b8e:	4833      	ldr	r0, [pc, #204]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000b90:	f004 f8ee 	bl	8004d70 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000b9a:	f7ff fecc 	bl	8000936 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ba4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000ba8:	4619      	mov	r1, r3
 8000baa:	482c      	ldr	r0, [pc, #176]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000bac:	f004 fcec 	bl	8005588 <HAL_TIM_ConfigClockSource>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000bb6:	f7ff febe 	bl	8000936 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000bba:	4828      	ldr	r0, [pc, #160]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000bbc:	f004 f927 	bl	8004e0e <HAL_TIM_PWM_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000bc6:	f7ff feb6 	bl	8000936 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4820      	ldr	r0, [pc, #128]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000bda:	f005 f947 	bl	8005e6c <HAL_TIMEx_MasterConfigSynchronization>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000be4:	f7ff fea7 	bl	8000936 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be8:	2360      	movs	r3, #96	; 0x60
 8000bea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c00:	2300      	movs	r3, #0
 8000c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c08:	2200      	movs	r2, #0
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4813      	ldr	r0, [pc, #76]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000c0e:	f004 fbf9 	bl	8005404 <HAL_TIM_PWM_ConfigChannel>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d001      	beq.n	8000c1c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000c18:	f7ff fe8d 	bl	8000936 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c24:	2300      	movs	r3, #0
 8000c26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c36:	2300      	movs	r3, #0
 8000c38:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000c40:	f005 f96c 	bl	8005f1c <HAL_TIMEx_ConfigBreakDeadTime>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000c4a:	f7ff fe74 	bl	8000936 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000c4e:	4803      	ldr	r0, [pc, #12]	; (8000c5c <MX_TIM1_Init+0x138>)
 8000c50:	f000 f872 	bl	8000d38 <HAL_TIM_MspPostInit>

}
 8000c54:	bf00      	nop
 8000c56:	3758      	adds	r7, #88	; 0x58
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	200004f0 	.word	0x200004f0
 8000c60:	40012c00 	.word	0x40012c00

08000c64 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a2d      	ldr	r2, [pc, #180]	; (8000d28 <HAL_TIM_Base_MspInit+0xc4>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d153      	bne.n	8000d1e <HAL_TIM_Base_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000c76:	4b2d      	ldr	r3, [pc, #180]	; (8000d2c <HAL_TIM_Base_MspInit+0xc8>)
 8000c78:	699b      	ldr	r3, [r3, #24]
 8000c7a:	4a2c      	ldr	r2, [pc, #176]	; (8000d2c <HAL_TIM_Base_MspInit+0xc8>)
 8000c7c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c80:	6193      	str	r3, [r2, #24]
 8000c82:	4b2a      	ldr	r3, [pc, #168]	; (8000d2c <HAL_TIM_Base_MspInit+0xc8>)
 8000c84:	699b      	ldr	r3, [r3, #24]
 8000c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000c8a:	60fb      	str	r3, [r7, #12]
 8000c8c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA1_Channel2;
 8000c8e:	4b28      	ldr	r3, [pc, #160]	; (8000d30 <HAL_TIM_Base_MspInit+0xcc>)
 8000c90:	4a28      	ldr	r2, [pc, #160]	; (8000d34 <HAL_TIM_Base_MspInit+0xd0>)
 8000c92:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c94:	4b26      	ldr	r3, [pc, #152]	; (8000d30 <HAL_TIM_Base_MspInit+0xcc>)
 8000c96:	2210      	movs	r2, #16
 8000c98:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c9a:	4b25      	ldr	r3, [pc, #148]	; (8000d30 <HAL_TIM_Base_MspInit+0xcc>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ca0:	4b23      	ldr	r3, [pc, #140]	; (8000d30 <HAL_TIM_Base_MspInit+0xcc>)
 8000ca2:	2280      	movs	r2, #128	; 0x80
 8000ca4:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ca6:	4b22      	ldr	r3, [pc, #136]	; (8000d30 <HAL_TIM_Base_MspInit+0xcc>)
 8000ca8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000cac:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000cae:	4b20      	ldr	r3, [pc, #128]	; (8000d30 <HAL_TIM_Base_MspInit+0xcc>)
 8000cb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb4:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000cb6:	4b1e      	ldr	r3, [pc, #120]	; (8000d30 <HAL_TIM_Base_MspInit+0xcc>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000cbc:	4b1c      	ldr	r3, [pc, #112]	; (8000d30 <HAL_TIM_Base_MspInit+0xcc>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000cc2:	481b      	ldr	r0, [pc, #108]	; (8000d30 <HAL_TIM_Base_MspInit+0xcc>)
 8000cc4:	f000 faa4 	bl	8001210 <HAL_DMA_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_TIM_Base_MspInit+0x6e>
    {
      Error_Handler();
 8000cce:	f7ff fe32 	bl	8000936 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4a16      	ldr	r2, [pc, #88]	; (8000d30 <HAL_TIM_Base_MspInit+0xcc>)
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
 8000cd8:	4a15      	ldr	r2, [pc, #84]	; (8000d30 <HAL_TIM_Base_MspInit+0xcc>)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6253      	str	r3, [r2, #36]	; 0x24

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	2018      	movs	r0, #24
 8000ce4:	f000 fa5d 	bl	80011a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000ce8:	2018      	movs	r0, #24
 8000cea:	f000 fa76 	bl	80011da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2019      	movs	r0, #25
 8000cf4:	f000 fa55 	bl	80011a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000cf8:	2019      	movs	r0, #25
 8000cfa:	f000 fa6e 	bl	80011da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2100      	movs	r1, #0
 8000d02:	201a      	movs	r0, #26
 8000d04:	f000 fa4d 	bl	80011a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000d08:	201a      	movs	r0, #26
 8000d0a:	f000 fa66 	bl	80011da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2100      	movs	r1, #0
 8000d12:	201b      	movs	r0, #27
 8000d14:	f000 fa45 	bl	80011a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000d18:	201b      	movs	r0, #27
 8000d1a:	f000 fa5e 	bl	80011da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d1e:	bf00      	nop
 8000d20:	3710      	adds	r7, #16
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40012c00 	.word	0x40012c00
 8000d2c:	40021000 	.word	0x40021000
 8000d30:	20000538 	.word	0x20000538
 8000d34:	4002001c 	.word	0x4002001c

08000d38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a10      	ldr	r2, [pc, #64]	; (8000d94 <HAL_TIM_MspPostInit+0x5c>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d118      	bne.n	8000d8a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <HAL_TIM_MspPostInit+0x60>)
 8000d5a:	699b      	ldr	r3, [r3, #24]
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <HAL_TIM_MspPostInit+0x60>)
 8000d5e:	f043 0304 	orr.w	r3, r3, #4
 8000d62:	6193      	str	r3, [r2, #24]
 8000d64:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <HAL_TIM_MspPostInit+0x60>)
 8000d66:	699b      	ldr	r3, [r3, #24]
 8000d68:	f003 0304 	and.w	r3, r3, #4
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d70:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7e:	f107 0310 	add.w	r3, r7, #16
 8000d82:	4619      	mov	r1, r3
 8000d84:	4805      	ldr	r0, [pc, #20]	; (8000d9c <HAL_TIM_MspPostInit+0x64>)
 8000d86:	f000 fcf1 	bl	800176c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d8a:	bf00      	nop
 8000d8c:	3720      	adds	r7, #32
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	40012c00 	.word	0x40012c00
 8000d98:	40021000 	.word	0x40021000
 8000d9c:	40010800 	.word	0x40010800

08000da0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <MX_USART1_UART_Init+0x50>)
 8000da8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000db0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000dc4:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dc6:	220c      	movs	r2, #12
 8000dc8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dca:	4b08      	ldr	r3, [pc, #32]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000dd6:	4805      	ldr	r0, [pc, #20]	; (8000dec <MX_USART1_UART_Init+0x4c>)
 8000dd8:	f005 f903 	bl	8005fe2 <HAL_UART_Init>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000de2:	f7ff fda8 	bl	8000936 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000de6:	bf00      	nop
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	2000057c 	.word	0x2000057c
 8000df0:	40013800 	.word	0x40013800

08000df4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b088      	sub	sp, #32
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dfc:	f107 0310 	add.w	r3, r7, #16
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a20      	ldr	r2, [pc, #128]	; (8000e90 <HAL_UART_MspInit+0x9c>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d139      	bne.n	8000e88 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e14:	4b1f      	ldr	r3, [pc, #124]	; (8000e94 <HAL_UART_MspInit+0xa0>)
 8000e16:	699b      	ldr	r3, [r3, #24]
 8000e18:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_UART_MspInit+0xa0>)
 8000e1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1e:	6193      	str	r3, [r2, #24]
 8000e20:	4b1c      	ldr	r3, [pc, #112]	; (8000e94 <HAL_UART_MspInit+0xa0>)
 8000e22:	699b      	ldr	r3, [r3, #24]
 8000e24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b19      	ldr	r3, [pc, #100]	; (8000e94 <HAL_UART_MspInit+0xa0>)
 8000e2e:	699b      	ldr	r3, [r3, #24]
 8000e30:	4a18      	ldr	r2, [pc, #96]	; (8000e94 <HAL_UART_MspInit+0xa0>)
 8000e32:	f043 0304 	orr.w	r3, r3, #4
 8000e36:	6193      	str	r3, [r2, #24]
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_UART_MspInit+0xa0>)
 8000e3a:	699b      	ldr	r3, [r3, #24]
 8000e3c:	f003 0304 	and.w	r3, r3, #4
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e52:	f107 0310 	add.w	r3, r7, #16
 8000e56:	4619      	mov	r1, r3
 8000e58:	480f      	ldr	r0, [pc, #60]	; (8000e98 <HAL_UART_MspInit+0xa4>)
 8000e5a:	f000 fc87 	bl	800176c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e62:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e64:	2300      	movs	r3, #0
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	4619      	mov	r1, r3
 8000e72:	4809      	ldr	r0, [pc, #36]	; (8000e98 <HAL_UART_MspInit+0xa4>)
 8000e74:	f000 fc7a 	bl	800176c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	2025      	movs	r0, #37	; 0x25
 8000e7e:	f000 f990 	bl	80011a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e82:	2025      	movs	r0, #37	; 0x25
 8000e84:	f000 f9a9 	bl	80011da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000e88:	bf00      	nop
 8000e8a:	3720      	adds	r7, #32
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd80      	pop	{r7, pc}
 8000e90:	40013800 	.word	0x40013800
 8000e94:	40021000 	.word	0x40021000
 8000e98:	40010800 	.word	0x40010800

08000e9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000e9c:	f7ff fe3c 	bl	8000b18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ea0:	480b      	ldr	r0, [pc, #44]	; (8000ed0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000ea2:	490c      	ldr	r1, [pc, #48]	; (8000ed4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000ea4:	4a0c      	ldr	r2, [pc, #48]	; (8000ed8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea8:	e002      	b.n	8000eb0 <LoopCopyDataInit>

08000eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eae:	3304      	adds	r3, #4

08000eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb4:	d3f9      	bcc.n	8000eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eb6:	4a09      	ldr	r2, [pc, #36]	; (8000edc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000eb8:	4c09      	ldr	r4, [pc, #36]	; (8000ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ebc:	e001      	b.n	8000ec2 <LoopFillZerobss>

08000ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec0:	3204      	adds	r2, #4

08000ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec4:	d3fb      	bcc.n	8000ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f006 f891 	bl	8006fec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000eca:	f7ff fa47 	bl	800035c <main>
  bx lr
 8000ece:	4770      	bx	lr
  ldr r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed4:	20000458 	.word	0x20000458
  ldr r2, =_sidata
 8000ed8:	08007a00 	.word	0x08007a00
  ldr r2, =_sbss
 8000edc:	20000458 	.word	0x20000458
  ldr r4, =_ebss
 8000ee0:	200005d8 	.word	0x200005d8

08000ee4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee4:	e7fe      	b.n	8000ee4 <ADC1_2_IRQHandler>
	...

08000ee8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_Init+0x28>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_Init+0x28>)
 8000ef2:	f043 0310 	orr.w	r3, r3, #16
 8000ef6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ef8:	2003      	movs	r0, #3
 8000efa:	f000 f947 	bl	800118c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000efe:	200f      	movs	r0, #15
 8000f00:	f000 f808 	bl	8000f14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f04:	f7ff fd1c 	bl	8000940 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40022000 	.word	0x40022000

08000f14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f1c:	4b12      	ldr	r3, [pc, #72]	; (8000f68 <HAL_InitTick+0x54>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <HAL_InitTick+0x58>)
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 f95f 	bl	80011f6 <HAL_SYSTICK_Config>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00e      	b.n	8000f60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2b0f      	cmp	r3, #15
 8000f46:	d80a      	bhi.n	8000f5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f50:	f000 f927 	bl	80011a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f54:	4a06      	ldr	r2, [pc, #24]	; (8000f70 <HAL_InitTick+0x5c>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e000      	b.n	8000f60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200003e8 	.word	0x200003e8
 8000f6c:	200003f0 	.word	0x200003f0
 8000f70:	200003ec 	.word	0x200003ec

08000f74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f74:	b480      	push	{r7}
 8000f76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f78:	4b05      	ldr	r3, [pc, #20]	; (8000f90 <HAL_IncTick+0x1c>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	461a      	mov	r2, r3
 8000f7e:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <HAL_IncTick+0x20>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4413      	add	r3, r2
 8000f84:	4a03      	ldr	r2, [pc, #12]	; (8000f94 <HAL_IncTick+0x20>)
 8000f86:	6013      	str	r3, [r2, #0]
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr
 8000f90:	200003f0 	.word	0x200003f0
 8000f94:	200005c4 	.word	0x200005c4

08000f98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f9c:	4b02      	ldr	r3, [pc, #8]	; (8000fa8 <HAL_GetTick+0x10>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	200005c4 	.word	0x200005c4

08000fac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b084      	sub	sp, #16
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fb4:	f7ff fff0 	bl	8000f98 <HAL_GetTick>
 8000fb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fc4:	d005      	beq.n	8000fd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fc6:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <HAL_Delay+0x44>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fd2:	bf00      	nop
 8000fd4:	f7ff ffe0 	bl	8000f98 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	68bb      	ldr	r3, [r7, #8]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	68fa      	ldr	r2, [r7, #12]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	d8f7      	bhi.n	8000fd4 <HAL_Delay+0x28>
  {
  }
}
 8000fe4:	bf00      	nop
 8000fe6:	bf00      	nop
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	200003f0 	.word	0x200003f0

08000ff4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b085      	sub	sp, #20
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f003 0307 	and.w	r3, r3, #7
 8001002:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001004:	4b0c      	ldr	r3, [pc, #48]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800100a:	68ba      	ldr	r2, [r7, #8]
 800100c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001010:	4013      	ands	r3, r2
 8001012:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800101c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001020:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001024:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001026:	4a04      	ldr	r2, [pc, #16]	; (8001038 <__NVIC_SetPriorityGrouping+0x44>)
 8001028:	68bb      	ldr	r3, [r7, #8]
 800102a:	60d3      	str	r3, [r2, #12]
}
 800102c:	bf00      	nop
 800102e:	3714      	adds	r7, #20
 8001030:	46bd      	mov	sp, r7
 8001032:	bc80      	pop	{r7}
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop
 8001038:	e000ed00 	.word	0xe000ed00

0800103c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001040:	4b04      	ldr	r3, [pc, #16]	; (8001054 <__NVIC_GetPriorityGrouping+0x18>)
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	0a1b      	lsrs	r3, r3, #8
 8001046:	f003 0307 	and.w	r3, r3, #7
}
 800104a:	4618      	mov	r0, r3
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	e000ed00 	.word	0xe000ed00

08001058 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001062:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001066:	2b00      	cmp	r3, #0
 8001068:	db0b      	blt.n	8001082 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800106a:	79fb      	ldrb	r3, [r7, #7]
 800106c:	f003 021f 	and.w	r2, r3, #31
 8001070:	4906      	ldr	r1, [pc, #24]	; (800108c <__NVIC_EnableIRQ+0x34>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	095b      	lsrs	r3, r3, #5
 8001078:	2001      	movs	r0, #1
 800107a:	fa00 f202 	lsl.w	r2, r0, r2
 800107e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	bc80      	pop	{r7}
 800108a:	4770      	bx	lr
 800108c:	e000e100 	.word	0xe000e100

08001090 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	4603      	mov	r3, r0
 8001098:	6039      	str	r1, [r7, #0]
 800109a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800109c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	db0a      	blt.n	80010ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	b2da      	uxtb	r2, r3
 80010a8:	490c      	ldr	r1, [pc, #48]	; (80010dc <__NVIC_SetPriority+0x4c>)
 80010aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ae:	0112      	lsls	r2, r2, #4
 80010b0:	b2d2      	uxtb	r2, r2
 80010b2:	440b      	add	r3, r1
 80010b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b8:	e00a      	b.n	80010d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	b2da      	uxtb	r2, r3
 80010be:	4908      	ldr	r1, [pc, #32]	; (80010e0 <__NVIC_SetPriority+0x50>)
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	f003 030f 	and.w	r3, r3, #15
 80010c6:	3b04      	subs	r3, #4
 80010c8:	0112      	lsls	r2, r2, #4
 80010ca:	b2d2      	uxtb	r2, r2
 80010cc:	440b      	add	r3, r1
 80010ce:	761a      	strb	r2, [r3, #24]
}
 80010d0:	bf00      	nop
 80010d2:	370c      	adds	r7, #12
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bc80      	pop	{r7}
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000e100 	.word	0xe000e100
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b089      	sub	sp, #36	; 0x24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	f003 0307 	and.w	r3, r3, #7
 80010f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	f1c3 0307 	rsb	r3, r3, #7
 80010fe:	2b04      	cmp	r3, #4
 8001100:	bf28      	it	cs
 8001102:	2304      	movcs	r3, #4
 8001104:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3304      	adds	r3, #4
 800110a:	2b06      	cmp	r3, #6
 800110c:	d902      	bls.n	8001114 <NVIC_EncodePriority+0x30>
 800110e:	69fb      	ldr	r3, [r7, #28]
 8001110:	3b03      	subs	r3, #3
 8001112:	e000      	b.n	8001116 <NVIC_EncodePriority+0x32>
 8001114:	2300      	movs	r3, #0
 8001116:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	69bb      	ldr	r3, [r7, #24]
 800111e:	fa02 f303 	lsl.w	r3, r2, r3
 8001122:	43da      	mvns	r2, r3
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	401a      	ands	r2, r3
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800112c:	f04f 31ff 	mov.w	r1, #4294967295
 8001130:	697b      	ldr	r3, [r7, #20]
 8001132:	fa01 f303 	lsl.w	r3, r1, r3
 8001136:	43d9      	mvns	r1, r3
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800113c:	4313      	orrs	r3, r2
         );
}
 800113e:	4618      	mov	r0, r3
 8001140:	3724      	adds	r7, #36	; 0x24
 8001142:	46bd      	mov	sp, r7
 8001144:	bc80      	pop	{r7}
 8001146:	4770      	bx	lr

08001148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	3b01      	subs	r3, #1
 8001154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001158:	d301      	bcc.n	800115e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115a:	2301      	movs	r3, #1
 800115c:	e00f      	b.n	800117e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800115e:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <SysTick_Config+0x40>)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	3b01      	subs	r3, #1
 8001164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001166:	210f      	movs	r1, #15
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f7ff ff90 	bl	8001090 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <SysTick_Config+0x40>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001176:	4b04      	ldr	r3, [pc, #16]	; (8001188 <SysTick_Config+0x40>)
 8001178:	2207      	movs	r2, #7
 800117a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800117c:	2300      	movs	r3, #0
}
 800117e:	4618      	mov	r0, r3
 8001180:	3708      	adds	r7, #8
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	e000e010 	.word	0xe000e010

0800118c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001194:	6878      	ldr	r0, [r7, #4]
 8001196:	f7ff ff2d 	bl	8000ff4 <__NVIC_SetPriorityGrouping>
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}

080011a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a2:	b580      	push	{r7, lr}
 80011a4:	b086      	sub	sp, #24
 80011a6:	af00      	add	r7, sp, #0
 80011a8:	4603      	mov	r3, r0
 80011aa:	60b9      	str	r1, [r7, #8]
 80011ac:	607a      	str	r2, [r7, #4]
 80011ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011b4:	f7ff ff42 	bl	800103c <__NVIC_GetPriorityGrouping>
 80011b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011ba:	687a      	ldr	r2, [r7, #4]
 80011bc:	68b9      	ldr	r1, [r7, #8]
 80011be:	6978      	ldr	r0, [r7, #20]
 80011c0:	f7ff ff90 	bl	80010e4 <NVIC_EncodePriority>
 80011c4:	4602      	mov	r2, r0
 80011c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ca:	4611      	mov	r1, r2
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff ff5f 	bl	8001090 <__NVIC_SetPriority>
}
 80011d2:	bf00      	nop
 80011d4:	3718      	adds	r7, #24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	4603      	mov	r3, r0
 80011e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff ff35 	bl	8001058 <__NVIC_EnableIRQ>
}
 80011ee:	bf00      	nop
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b082      	sub	sp, #8
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011fe:	6878      	ldr	r0, [r7, #4]
 8001200:	f7ff ffa2 	bl	8001148 <SysTick_Config>
 8001204:	4603      	mov	r3, r0
}
 8001206:	4618      	mov	r0, r3
 8001208:	3708      	adds	r7, #8
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
	...

08001210 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001218:	2300      	movs	r3, #0
 800121a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e043      	b.n	80012ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	461a      	mov	r2, r3
 800122c:	4b22      	ldr	r3, [pc, #136]	; (80012b8 <HAL_DMA_Init+0xa8>)
 800122e:	4413      	add	r3, r2
 8001230:	4a22      	ldr	r2, [pc, #136]	; (80012bc <HAL_DMA_Init+0xac>)
 8001232:	fba2 2303 	umull	r2, r3, r2, r3
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	009a      	lsls	r2, r3, #2
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	4a1f      	ldr	r2, [pc, #124]	; (80012c0 <HAL_DMA_Init+0xb0>)
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2202      	movs	r2, #2
 8001248:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800125a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800125e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001268:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001274:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	695b      	ldr	r3, [r3, #20]
 800127a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001280:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	69db      	ldr	r3, [r3, #28]
 8001286:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001288:	68fa      	ldr	r2, [r7, #12]
 800128a:	4313      	orrs	r3, r2
 800128c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	68fa      	ldr	r2, [r7, #12]
 8001294:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2201      	movs	r2, #1
 80012a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012ac:	2300      	movs	r3, #0
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bc80      	pop	{r7}
 80012b6:	4770      	bx	lr
 80012b8:	bffdfff8 	.word	0xbffdfff8
 80012bc:	cccccccd 	.word	0xcccccccd
 80012c0:	40020000 	.word	0x40020000

080012c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b086      	sub	sp, #24
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d101      	bne.n	80012e4 <HAL_DMA_Start_IT+0x20>
 80012e0:	2302      	movs	r3, #2
 80012e2:	e04b      	b.n	800137c <HAL_DMA_Start_IT+0xb8>
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	2201      	movs	r2, #1
 80012e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d13a      	bne.n	800136e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2202      	movs	r2, #2
 80012fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	2200      	movs	r2, #0
 8001304:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	681a      	ldr	r2, [r3, #0]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f022 0201 	bic.w	r2, r2, #1
 8001314:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	68b9      	ldr	r1, [r7, #8]
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f000 f9f8 	bl	8001712 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	2b00      	cmp	r3, #0
 8001328:	d008      	beq.n	800133c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	681a      	ldr	r2, [r3, #0]
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f042 020e 	orr.w	r2, r2, #14
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e00f      	b.n	800135c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f022 0204 	bic.w	r2, r2, #4
 800134a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f042 020a 	orr.w	r2, r2, #10
 800135a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f042 0201 	orr.w	r2, r2, #1
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	e005      	b.n	800137a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001376:	2302      	movs	r3, #2
 8001378:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800137a:	7dfb      	ldrb	r3, [r7, #23]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}

08001384 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800138c:	2300      	movs	r3, #0
 800138e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b02      	cmp	r3, #2
 800139a:	d008      	beq.n	80013ae <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2204      	movs	r2, #4
 80013a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2200      	movs	r2, #0
 80013a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e020      	b.n	80013f0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681a      	ldr	r2, [r3, #0]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f022 020e 	bic.w	r2, r2, #14
 80013bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f022 0201 	bic.w	r2, r2, #1
 80013cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013d6:	2101      	movs	r1, #1
 80013d8:	fa01 f202 	lsl.w	r2, r1, r2
 80013dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2201      	movs	r2, #1
 80013e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
	...

080013fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001404:	2300      	movs	r3, #0
 8001406:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800140e:	b2db      	uxtb	r3, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d005      	beq.n	8001420 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2204      	movs	r2, #4
 8001418:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	73fb      	strb	r3, [r7, #15]
 800141e:	e051      	b.n	80014c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f022 020e 	bic.w	r2, r2, #14
 800142e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0201 	bic.w	r2, r2, #1
 800143e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	4a22      	ldr	r2, [pc, #136]	; (80014d0 <HAL_DMA_Abort_IT+0xd4>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d029      	beq.n	800149e <HAL_DMA_Abort_IT+0xa2>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a21      	ldr	r2, [pc, #132]	; (80014d4 <HAL_DMA_Abort_IT+0xd8>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d022      	beq.n	800149a <HAL_DMA_Abort_IT+0x9e>
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a1f      	ldr	r2, [pc, #124]	; (80014d8 <HAL_DMA_Abort_IT+0xdc>)
 800145a:	4293      	cmp	r3, r2
 800145c:	d01a      	beq.n	8001494 <HAL_DMA_Abort_IT+0x98>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <HAL_DMA_Abort_IT+0xe0>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d012      	beq.n	800148e <HAL_DMA_Abort_IT+0x92>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <HAL_DMA_Abort_IT+0xe4>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d00a      	beq.n	8001488 <HAL_DMA_Abort_IT+0x8c>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a1b      	ldr	r2, [pc, #108]	; (80014e4 <HAL_DMA_Abort_IT+0xe8>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d102      	bne.n	8001482 <HAL_DMA_Abort_IT+0x86>
 800147c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001480:	e00e      	b.n	80014a0 <HAL_DMA_Abort_IT+0xa4>
 8001482:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001486:	e00b      	b.n	80014a0 <HAL_DMA_Abort_IT+0xa4>
 8001488:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800148c:	e008      	b.n	80014a0 <HAL_DMA_Abort_IT+0xa4>
 800148e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001492:	e005      	b.n	80014a0 <HAL_DMA_Abort_IT+0xa4>
 8001494:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001498:	e002      	b.n	80014a0 <HAL_DMA_Abort_IT+0xa4>
 800149a:	2310      	movs	r3, #16
 800149c:	e000      	b.n	80014a0 <HAL_DMA_Abort_IT+0xa4>
 800149e:	2301      	movs	r3, #1
 80014a0:	4a11      	ldr	r2, [pc, #68]	; (80014e8 <HAL_DMA_Abort_IT+0xec>)
 80014a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2200      	movs	r2, #0
 80014b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	4798      	blx	r3
    } 
  }
  return status;
 80014c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3710      	adds	r7, #16
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	40020008 	.word	0x40020008
 80014d4:	4002001c 	.word	0x4002001c
 80014d8:	40020030 	.word	0x40020030
 80014dc:	40020044 	.word	0x40020044
 80014e0:	40020058 	.word	0x40020058
 80014e4:	4002006c 	.word	0x4002006c
 80014e8:	40020000 	.word	0x40020000

080014ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b084      	sub	sp, #16
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001508:	2204      	movs	r2, #4
 800150a:	409a      	lsls	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d04f      	beq.n	80015b4 <HAL_DMA_IRQHandler+0xc8>
 8001514:	68bb      	ldr	r3, [r7, #8]
 8001516:	f003 0304 	and.w	r3, r3, #4
 800151a:	2b00      	cmp	r3, #0
 800151c:	d04a      	beq.n	80015b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f003 0320 	and.w	r3, r3, #32
 8001528:	2b00      	cmp	r3, #0
 800152a:	d107      	bne.n	800153c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	681a      	ldr	r2, [r3, #0]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f022 0204 	bic.w	r2, r2, #4
 800153a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a66      	ldr	r2, [pc, #408]	; (80016dc <HAL_DMA_IRQHandler+0x1f0>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d029      	beq.n	800159a <HAL_DMA_IRQHandler+0xae>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a65      	ldr	r2, [pc, #404]	; (80016e0 <HAL_DMA_IRQHandler+0x1f4>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d022      	beq.n	8001596 <HAL_DMA_IRQHandler+0xaa>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a63      	ldr	r2, [pc, #396]	; (80016e4 <HAL_DMA_IRQHandler+0x1f8>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d01a      	beq.n	8001590 <HAL_DMA_IRQHandler+0xa4>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4a62      	ldr	r2, [pc, #392]	; (80016e8 <HAL_DMA_IRQHandler+0x1fc>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d012      	beq.n	800158a <HAL_DMA_IRQHandler+0x9e>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a60      	ldr	r2, [pc, #384]	; (80016ec <HAL_DMA_IRQHandler+0x200>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d00a      	beq.n	8001584 <HAL_DMA_IRQHandler+0x98>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4a5f      	ldr	r2, [pc, #380]	; (80016f0 <HAL_DMA_IRQHandler+0x204>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d102      	bne.n	800157e <HAL_DMA_IRQHandler+0x92>
 8001578:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800157c:	e00e      	b.n	800159c <HAL_DMA_IRQHandler+0xb0>
 800157e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001582:	e00b      	b.n	800159c <HAL_DMA_IRQHandler+0xb0>
 8001584:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001588:	e008      	b.n	800159c <HAL_DMA_IRQHandler+0xb0>
 800158a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800158e:	e005      	b.n	800159c <HAL_DMA_IRQHandler+0xb0>
 8001590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001594:	e002      	b.n	800159c <HAL_DMA_IRQHandler+0xb0>
 8001596:	2340      	movs	r3, #64	; 0x40
 8001598:	e000      	b.n	800159c <HAL_DMA_IRQHandler+0xb0>
 800159a:	2304      	movs	r3, #4
 800159c:	4a55      	ldr	r2, [pc, #340]	; (80016f4 <HAL_DMA_IRQHandler+0x208>)
 800159e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	f000 8094 	beq.w	80016d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015ae:	6878      	ldr	r0, [r7, #4]
 80015b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80015b2:	e08e      	b.n	80016d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b8:	2202      	movs	r2, #2
 80015ba:	409a      	lsls	r2, r3
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	4013      	ands	r3, r2
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d056      	beq.n	8001672 <HAL_DMA_IRQHandler+0x186>
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d051      	beq.n	8001672 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f003 0320 	and.w	r3, r3, #32
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10b      	bne.n	80015f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f022 020a 	bic.w	r2, r2, #10
 80015ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2201      	movs	r2, #1
 80015f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	4a38      	ldr	r2, [pc, #224]	; (80016dc <HAL_DMA_IRQHandler+0x1f0>)
 80015fa:	4293      	cmp	r3, r2
 80015fc:	d029      	beq.n	8001652 <HAL_DMA_IRQHandler+0x166>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a37      	ldr	r2, [pc, #220]	; (80016e0 <HAL_DMA_IRQHandler+0x1f4>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d022      	beq.n	800164e <HAL_DMA_IRQHandler+0x162>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a35      	ldr	r2, [pc, #212]	; (80016e4 <HAL_DMA_IRQHandler+0x1f8>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d01a      	beq.n	8001648 <HAL_DMA_IRQHandler+0x15c>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	4a34      	ldr	r2, [pc, #208]	; (80016e8 <HAL_DMA_IRQHandler+0x1fc>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d012      	beq.n	8001642 <HAL_DMA_IRQHandler+0x156>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a32      	ldr	r2, [pc, #200]	; (80016ec <HAL_DMA_IRQHandler+0x200>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d00a      	beq.n	800163c <HAL_DMA_IRQHandler+0x150>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a31      	ldr	r2, [pc, #196]	; (80016f0 <HAL_DMA_IRQHandler+0x204>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d102      	bne.n	8001636 <HAL_DMA_IRQHandler+0x14a>
 8001630:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001634:	e00e      	b.n	8001654 <HAL_DMA_IRQHandler+0x168>
 8001636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800163a:	e00b      	b.n	8001654 <HAL_DMA_IRQHandler+0x168>
 800163c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001640:	e008      	b.n	8001654 <HAL_DMA_IRQHandler+0x168>
 8001642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001646:	e005      	b.n	8001654 <HAL_DMA_IRQHandler+0x168>
 8001648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164c:	e002      	b.n	8001654 <HAL_DMA_IRQHandler+0x168>
 800164e:	2320      	movs	r3, #32
 8001650:	e000      	b.n	8001654 <HAL_DMA_IRQHandler+0x168>
 8001652:	2302      	movs	r3, #2
 8001654:	4a27      	ldr	r2, [pc, #156]	; (80016f4 <HAL_DMA_IRQHandler+0x208>)
 8001656:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2200      	movs	r2, #0
 800165c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001664:	2b00      	cmp	r3, #0
 8001666:	d034      	beq.n	80016d2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166c:	6878      	ldr	r0, [r7, #4]
 800166e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001670:	e02f      	b.n	80016d2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001676:	2208      	movs	r2, #8
 8001678:	409a      	lsls	r2, r3
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	4013      	ands	r3, r2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d028      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x1e8>
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	f003 0308 	and.w	r3, r3, #8
 8001688:	2b00      	cmp	r3, #0
 800168a:	d023      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 020e 	bic.w	r2, r2, #14
 800169a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016a4:	2101      	movs	r1, #1
 80016a6:	fa01 f202 	lsl.w	r2, r1, r2
 80016aa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2201      	movs	r2, #1
 80016b0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d004      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	4798      	blx	r3
    }
  }
  return;
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
}
 80016d6:	3710      	adds	r7, #16
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40020008 	.word	0x40020008
 80016e0:	4002001c 	.word	0x4002001c
 80016e4:	40020030 	.word	0x40020030
 80016e8:	40020044 	.word	0x40020044
 80016ec:	40020058 	.word	0x40020058
 80016f0:	4002006c 	.word	0x4002006c
 80016f4:	40020000 	.word	0x40020000

080016f8 <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b083      	sub	sp, #12
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001706:	b2db      	uxtb	r3, r3
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001712:	b480      	push	{r7}
 8001714:	b085      	sub	sp, #20
 8001716:	af00      	add	r7, sp, #0
 8001718:	60f8      	str	r0, [r7, #12]
 800171a:	60b9      	str	r1, [r7, #8]
 800171c:	607a      	str	r2, [r7, #4]
 800171e:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001728:	2101      	movs	r1, #1
 800172a:	fa01 f202 	lsl.w	r2, r1, r2
 800172e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	683a      	ldr	r2, [r7, #0]
 8001736:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	2b10      	cmp	r3, #16
 800173e:	d108      	bne.n	8001752 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	68ba      	ldr	r2, [r7, #8]
 800174e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001750:	e007      	b.n	8001762 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	68ba      	ldr	r2, [r7, #8]
 8001758:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	60da      	str	r2, [r3, #12]
}
 8001762:	bf00      	nop
 8001764:	3714      	adds	r7, #20
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800176c:	b480      	push	{r7}
 800176e:	b08b      	sub	sp, #44	; 0x2c
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
 8001774:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800177a:	2300      	movs	r3, #0
 800177c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177e:	e161      	b.n	8001a44 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001780:	2201      	movs	r2, #1
 8001782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	4013      	ands	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	429a      	cmp	r2, r3
 800179a:	f040 8150 	bne.w	8001a3e <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	4a97      	ldr	r2, [pc, #604]	; (8001a00 <HAL_GPIO_Init+0x294>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d05e      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017a8:	4a95      	ldr	r2, [pc, #596]	; (8001a00 <HAL_GPIO_Init+0x294>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d875      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017ae:	4a95      	ldr	r2, [pc, #596]	; (8001a04 <HAL_GPIO_Init+0x298>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d058      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017b4:	4a93      	ldr	r2, [pc, #588]	; (8001a04 <HAL_GPIO_Init+0x298>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d86f      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017ba:	4a93      	ldr	r2, [pc, #588]	; (8001a08 <HAL_GPIO_Init+0x29c>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d052      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017c0:	4a91      	ldr	r2, [pc, #580]	; (8001a08 <HAL_GPIO_Init+0x29c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d869      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017c6:	4a91      	ldr	r2, [pc, #580]	; (8001a0c <HAL_GPIO_Init+0x2a0>)
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d04c      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017cc:	4a8f      	ldr	r2, [pc, #572]	; (8001a0c <HAL_GPIO_Init+0x2a0>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d863      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017d2:	4a8f      	ldr	r2, [pc, #572]	; (8001a10 <HAL_GPIO_Init+0x2a4>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d046      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
 80017d8:	4a8d      	ldr	r2, [pc, #564]	; (8001a10 <HAL_GPIO_Init+0x2a4>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d85d      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017de:	2b12      	cmp	r3, #18
 80017e0:	d82a      	bhi.n	8001838 <HAL_GPIO_Init+0xcc>
 80017e2:	2b12      	cmp	r3, #18
 80017e4:	d859      	bhi.n	800189a <HAL_GPIO_Init+0x12e>
 80017e6:	a201      	add	r2, pc, #4	; (adr r2, 80017ec <HAL_GPIO_Init+0x80>)
 80017e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017ec:	08001867 	.word	0x08001867
 80017f0:	08001841 	.word	0x08001841
 80017f4:	08001853 	.word	0x08001853
 80017f8:	08001895 	.word	0x08001895
 80017fc:	0800189b 	.word	0x0800189b
 8001800:	0800189b 	.word	0x0800189b
 8001804:	0800189b 	.word	0x0800189b
 8001808:	0800189b 	.word	0x0800189b
 800180c:	0800189b 	.word	0x0800189b
 8001810:	0800189b 	.word	0x0800189b
 8001814:	0800189b 	.word	0x0800189b
 8001818:	0800189b 	.word	0x0800189b
 800181c:	0800189b 	.word	0x0800189b
 8001820:	0800189b 	.word	0x0800189b
 8001824:	0800189b 	.word	0x0800189b
 8001828:	0800189b 	.word	0x0800189b
 800182c:	0800189b 	.word	0x0800189b
 8001830:	08001849 	.word	0x08001849
 8001834:	0800185d 	.word	0x0800185d
 8001838:	4a76      	ldr	r2, [pc, #472]	; (8001a14 <HAL_GPIO_Init+0x2a8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d013      	beq.n	8001866 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800183e:	e02c      	b.n	800189a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	623b      	str	r3, [r7, #32]
          break;
 8001846:	e029      	b.n	800189c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	3304      	adds	r3, #4
 800184e:	623b      	str	r3, [r7, #32]
          break;
 8001850:	e024      	b.n	800189c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	3308      	adds	r3, #8
 8001858:	623b      	str	r3, [r7, #32]
          break;
 800185a:	e01f      	b.n	800189c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	68db      	ldr	r3, [r3, #12]
 8001860:	330c      	adds	r3, #12
 8001862:	623b      	str	r3, [r7, #32]
          break;
 8001864:	e01a      	b.n	800189c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d102      	bne.n	8001874 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800186e:	2304      	movs	r3, #4
 8001870:	623b      	str	r3, [r7, #32]
          break;
 8001872:	e013      	b.n	800189c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b01      	cmp	r3, #1
 800187a:	d105      	bne.n	8001888 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800187c:	2308      	movs	r3, #8
 800187e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69fa      	ldr	r2, [r7, #28]
 8001884:	611a      	str	r2, [r3, #16]
          break;
 8001886:	e009      	b.n	800189c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001888:	2308      	movs	r3, #8
 800188a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	69fa      	ldr	r2, [r7, #28]
 8001890:	615a      	str	r2, [r3, #20]
          break;
 8001892:	e003      	b.n	800189c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
          break;
 8001898:	e000      	b.n	800189c <HAL_GPIO_Init+0x130>
          break;
 800189a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2bff      	cmp	r3, #255	; 0xff
 80018a0:	d801      	bhi.n	80018a6 <HAL_GPIO_Init+0x13a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	e001      	b.n	80018aa <HAL_GPIO_Init+0x13e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	3304      	adds	r3, #4
 80018aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	2bff      	cmp	r3, #255	; 0xff
 80018b0:	d802      	bhi.n	80018b8 <HAL_GPIO_Init+0x14c>
 80018b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	e002      	b.n	80018be <HAL_GPIO_Init+0x152>
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	3b08      	subs	r3, #8
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	210f      	movs	r1, #15
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	fa01 f303 	lsl.w	r3, r1, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	401a      	ands	r2, r3
 80018d0:	6a39      	ldr	r1, [r7, #32]
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	431a      	orrs	r2, r3
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 80a9 	beq.w	8001a3e <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80018ec:	4b4a      	ldr	r3, [pc, #296]	; (8001a18 <HAL_GPIO_Init+0x2ac>)
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	4a49      	ldr	r2, [pc, #292]	; (8001a18 <HAL_GPIO_Init+0x2ac>)
 80018f2:	f043 0301 	orr.w	r3, r3, #1
 80018f6:	6193      	str	r3, [r2, #24]
 80018f8:	4b47      	ldr	r3, [pc, #284]	; (8001a18 <HAL_GPIO_Init+0x2ac>)
 80018fa:	699b      	ldr	r3, [r3, #24]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001904:	4a45      	ldr	r2, [pc, #276]	; (8001a1c <HAL_GPIO_Init+0x2b0>)
 8001906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	3302      	adds	r3, #2
 800190c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001910:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001914:	f003 0303 	and.w	r3, r3, #3
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	220f      	movs	r2, #15
 800191c:	fa02 f303 	lsl.w	r3, r2, r3
 8001920:	43db      	mvns	r3, r3
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	4013      	ands	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a3d      	ldr	r2, [pc, #244]	; (8001a20 <HAL_GPIO_Init+0x2b4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d00d      	beq.n	800194c <HAL_GPIO_Init+0x1e0>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a3c      	ldr	r2, [pc, #240]	; (8001a24 <HAL_GPIO_Init+0x2b8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d007      	beq.n	8001948 <HAL_GPIO_Init+0x1dc>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a3b      	ldr	r2, [pc, #236]	; (8001a28 <HAL_GPIO_Init+0x2bc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_GPIO_Init+0x1d8>
 8001940:	2302      	movs	r3, #2
 8001942:	e004      	b.n	800194e <HAL_GPIO_Init+0x1e2>
 8001944:	2303      	movs	r3, #3
 8001946:	e002      	b.n	800194e <HAL_GPIO_Init+0x1e2>
 8001948:	2301      	movs	r3, #1
 800194a:	e000      	b.n	800194e <HAL_GPIO_Init+0x1e2>
 800194c:	2300      	movs	r3, #0
 800194e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001950:	f002 0203 	and.w	r2, r2, #3
 8001954:	0092      	lsls	r2, r2, #2
 8001956:	4093      	lsls	r3, r2
 8001958:	68fa      	ldr	r2, [r7, #12]
 800195a:	4313      	orrs	r3, r2
 800195c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800195e:	492f      	ldr	r1, [pc, #188]	; (8001a1c <HAL_GPIO_Init+0x2b0>)
 8001960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001962:	089b      	lsrs	r3, r3, #2
 8001964:	3302      	adds	r3, #2
 8001966:	68fa      	ldr	r2, [r7, #12]
 8001968:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d006      	beq.n	8001986 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001978:	4b2c      	ldr	r3, [pc, #176]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	492b      	ldr	r1, [pc, #172]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 800197e:	69bb      	ldr	r3, [r7, #24]
 8001980:	4313      	orrs	r3, r2
 8001982:	608b      	str	r3, [r1, #8]
 8001984:	e006      	b.n	8001994 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001986:	4b29      	ldr	r3, [pc, #164]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	69bb      	ldr	r3, [r7, #24]
 800198c:	43db      	mvns	r3, r3
 800198e:	4927      	ldr	r1, [pc, #156]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 8001990:	4013      	ands	r3, r2
 8001992:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d006      	beq.n	80019ae <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80019a0:	4b22      	ldr	r3, [pc, #136]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	4921      	ldr	r1, [pc, #132]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	4313      	orrs	r3, r2
 80019aa:	60cb      	str	r3, [r1, #12]
 80019ac:	e006      	b.n	80019bc <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80019ae:	4b1f      	ldr	r3, [pc, #124]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	69bb      	ldr	r3, [r7, #24]
 80019b4:	43db      	mvns	r3, r3
 80019b6:	491d      	ldr	r1, [pc, #116]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 80019b8:	4013      	ands	r3, r2
 80019ba:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d006      	beq.n	80019d6 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019c8:	4b18      	ldr	r3, [pc, #96]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 80019ca:	685a      	ldr	r2, [r3, #4]
 80019cc:	4917      	ldr	r1, [pc, #92]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	604b      	str	r3, [r1, #4]
 80019d4:	e006      	b.n	80019e4 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019d6:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	43db      	mvns	r3, r3
 80019de:	4913      	ldr	r1, [pc, #76]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 80019e0:	4013      	ands	r3, r2
 80019e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d01f      	beq.n	8001a30 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019f0:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	490d      	ldr	r1, [pc, #52]	; (8001a2c <HAL_GPIO_Init+0x2c0>)
 80019f6:	69bb      	ldr	r3, [r7, #24]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	600b      	str	r3, [r1, #0]
 80019fc:	e01f      	b.n	8001a3e <HAL_GPIO_Init+0x2d2>
 80019fe:	bf00      	nop
 8001a00:	10320000 	.word	0x10320000
 8001a04:	10310000 	.word	0x10310000
 8001a08:	10220000 	.word	0x10220000
 8001a0c:	10210000 	.word	0x10210000
 8001a10:	10120000 	.word	0x10120000
 8001a14:	10110000 	.word	0x10110000
 8001a18:	40021000 	.word	0x40021000
 8001a1c:	40010000 	.word	0x40010000
 8001a20:	40010800 	.word	0x40010800
 8001a24:	40010c00 	.word	0x40010c00
 8001a28:	40011000 	.word	0x40011000
 8001a2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001a30:	4b0b      	ldr	r3, [pc, #44]	; (8001a60 <HAL_GPIO_Init+0x2f4>)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	43db      	mvns	r3, r3
 8001a38:	4909      	ldr	r1, [pc, #36]	; (8001a60 <HAL_GPIO_Init+0x2f4>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a40:	3301      	adds	r3, #1
 8001a42:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f47f ae96 	bne.w	8001780 <HAL_GPIO_Init+0x14>
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	372c      	adds	r7, #44	; 0x2c
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bc80      	pop	{r7}
 8001a5e:	4770      	bx	lr
 8001a60:	40010400 	.word	0x40010400

08001a64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a6e:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	88fb      	ldrh	r3, [r7, #6]
 8001a74:	4013      	ands	r3, r2
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d006      	beq.n	8001a88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a7a:	4a05      	ldr	r2, [pc, #20]	; (8001a90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a7c:	88fb      	ldrh	r3, [r7, #6]
 8001a7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a80:	88fb      	ldrh	r3, [r7, #6]
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 f806 	bl	8001a94 <HAL_GPIO_EXTI_Callback>
  }
}
 8001a88:	bf00      	nop
 8001a8a:	3708      	adds	r7, #8
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	40010400 	.word	0x40010400

08001a94 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001a9e:	bf00      	nop
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bc80      	pop	{r7}
 8001aa6:	4770      	bx	lr

08001aa8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b084      	sub	sp, #16
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e12b      	b.n	8001d12 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ac0:	b2db      	uxtb	r3, r3
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d106      	bne.n	8001ad4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ace:	6878      	ldr	r0, [r7, #4]
 8001ad0:	f7fe fbd0 	bl	8000274 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2224      	movs	r2, #36	; 0x24
 8001ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 0201 	bic.w	r2, r2, #1
 8001aea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001afa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001b0c:	f003 f8ea 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8001b10:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	4a81      	ldr	r2, [pc, #516]	; (8001d1c <HAL_I2C_Init+0x274>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d807      	bhi.n	8001b2c <HAL_I2C_Init+0x84>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4a80      	ldr	r2, [pc, #512]	; (8001d20 <HAL_I2C_Init+0x278>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	bf94      	ite	ls
 8001b24:	2301      	movls	r3, #1
 8001b26:	2300      	movhi	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	e006      	b.n	8001b3a <HAL_I2C_Init+0x92>
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	4a7d      	ldr	r2, [pc, #500]	; (8001d24 <HAL_I2C_Init+0x27c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	bf94      	ite	ls
 8001b34:	2301      	movls	r3, #1
 8001b36:	2300      	movhi	r3, #0
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e0e7      	b.n	8001d12 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	4a78      	ldr	r2, [pc, #480]	; (8001d28 <HAL_I2C_Init+0x280>)
 8001b46:	fba2 2303 	umull	r2, r3, r2, r3
 8001b4a:	0c9b      	lsrs	r3, r3, #18
 8001b4c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	68ba      	ldr	r2, [r7, #8]
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	4a6a      	ldr	r2, [pc, #424]	; (8001d1c <HAL_I2C_Init+0x274>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d802      	bhi.n	8001b7c <HAL_I2C_Init+0xd4>
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	3301      	adds	r3, #1
 8001b7a:	e009      	b.n	8001b90 <HAL_I2C_Init+0xe8>
 8001b7c:	68bb      	ldr	r3, [r7, #8]
 8001b7e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b82:	fb02 f303 	mul.w	r3, r2, r3
 8001b86:	4a69      	ldr	r2, [pc, #420]	; (8001d2c <HAL_I2C_Init+0x284>)
 8001b88:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8c:	099b      	lsrs	r3, r3, #6
 8001b8e:	3301      	adds	r3, #1
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	6812      	ldr	r2, [r2, #0]
 8001b94:	430b      	orrs	r3, r1
 8001b96:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	69db      	ldr	r3, [r3, #28]
 8001b9e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ba2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	495c      	ldr	r1, [pc, #368]	; (8001d1c <HAL_I2C_Init+0x274>)
 8001bac:	428b      	cmp	r3, r1
 8001bae:	d819      	bhi.n	8001be4 <HAL_I2C_Init+0x13c>
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	1e59      	subs	r1, r3, #1
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bbe:	1c59      	adds	r1, r3, #1
 8001bc0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001bc4:	400b      	ands	r3, r1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d00a      	beq.n	8001be0 <HAL_I2C_Init+0x138>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	1e59      	subs	r1, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	005b      	lsls	r3, r3, #1
 8001bd4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001bd8:	3301      	adds	r3, #1
 8001bda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bde:	e051      	b.n	8001c84 <HAL_I2C_Init+0x1dc>
 8001be0:	2304      	movs	r3, #4
 8001be2:	e04f      	b.n	8001c84 <HAL_I2C_Init+0x1dc>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d111      	bne.n	8001c10 <HAL_I2C_Init+0x168>
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	1e58      	subs	r0, r3, #1
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	440b      	add	r3, r1
 8001bfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	bf0c      	ite	eq
 8001c08:	2301      	moveq	r3, #1
 8001c0a:	2300      	movne	r3, #0
 8001c0c:	b2db      	uxtb	r3, r3
 8001c0e:	e012      	b.n	8001c36 <HAL_I2C_Init+0x18e>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	1e58      	subs	r0, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	460b      	mov	r3, r1
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	440b      	add	r3, r1
 8001c1e:	0099      	lsls	r1, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c26:	3301      	adds	r3, #1
 8001c28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	bf0c      	ite	eq
 8001c30:	2301      	moveq	r3, #1
 8001c32:	2300      	movne	r3, #0
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d001      	beq.n	8001c3e <HAL_I2C_Init+0x196>
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e022      	b.n	8001c84 <HAL_I2C_Init+0x1dc>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10e      	bne.n	8001c64 <HAL_I2C_Init+0x1bc>
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	1e58      	subs	r0, r3, #1
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6859      	ldr	r1, [r3, #4]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	440b      	add	r3, r1
 8001c54:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c58:	3301      	adds	r3, #1
 8001c5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c62:	e00f      	b.n	8001c84 <HAL_I2C_Init+0x1dc>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1e58      	subs	r0, r3, #1
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6859      	ldr	r1, [r3, #4]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	0099      	lsls	r1, r3, #2
 8001c74:	440b      	add	r3, r1
 8001c76:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c80:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c84:	6879      	ldr	r1, [r7, #4]
 8001c86:	6809      	ldr	r1, [r1, #0]
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69da      	ldr	r2, [r3, #28]
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	431a      	orrs	r2, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001cb2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001cb6:	687a      	ldr	r2, [r7, #4]
 8001cb8:	6911      	ldr	r1, [r2, #16]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	68d2      	ldr	r2, [r2, #12]
 8001cbe:	4311      	orrs	r1, r2
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	6812      	ldr	r2, [r2, #0]
 8001cc4:	430b      	orrs	r3, r1
 8001cc6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	695a      	ldr	r2, [r3, #20]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	699b      	ldr	r3, [r3, #24]
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f042 0201 	orr.w	r2, r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2220      	movs	r2, #32
 8001cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	000186a0 	.word	0x000186a0
 8001d20:	001e847f 	.word	0x001e847f
 8001d24:	003d08ff 	.word	0x003d08ff
 8001d28:	431bde83 	.word	0x431bde83
 8001d2c:	10624dd3 	.word	0x10624dd3

08001d30 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	695b      	ldr	r3, [r3, #20]
 8001d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d42:	2b80      	cmp	r3, #128	; 0x80
 8001d44:	d103      	bne.n	8001d4e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
  }
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b088      	sub	sp, #32
 8001d5c:	af02      	add	r7, sp, #8
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	4608      	mov	r0, r1
 8001d62:	4611      	mov	r1, r2
 8001d64:	461a      	mov	r2, r3
 8001d66:	4603      	mov	r3, r0
 8001d68:	817b      	strh	r3, [r7, #10]
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	813b      	strh	r3, [r7, #8]
 8001d6e:	4613      	mov	r3, r2
 8001d70:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001d72:	f7ff f911 	bl	8000f98 <HAL_GetTick>
 8001d76:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	2b20      	cmp	r3, #32
 8001d82:	f040 80d9 	bne.w	8001f38 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	9300      	str	r3, [sp, #0]
 8001d8a:	2319      	movs	r3, #25
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	496d      	ldr	r1, [pc, #436]	; (8001f44 <HAL_I2C_Mem_Write+0x1ec>)
 8001d90:	68f8      	ldr	r0, [r7, #12]
 8001d92:	f002 f95b 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e0cc      	b.n	8001f3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_I2C_Mem_Write+0x56>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e0c5      	b.n	8001f3a <HAL_I2C_Mem_Write+0x1e2>
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d007      	beq.n	8001dd4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001de2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2221      	movs	r2, #33	; 0x21
 8001de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	2240      	movs	r2, #64	; 0x40
 8001df0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	2200      	movs	r2, #0
 8001df8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6a3a      	ldr	r2, [r7, #32]
 8001dfe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001e04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	4a4d      	ldr	r2, [pc, #308]	; (8001f48 <HAL_I2C_Mem_Write+0x1f0>)
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001e16:	88f8      	ldrh	r0, [r7, #6]
 8001e18:	893a      	ldrh	r2, [r7, #8]
 8001e1a:	8979      	ldrh	r1, [r7, #10]
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	9301      	str	r3, [sp, #4]
 8001e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e22:	9300      	str	r3, [sp, #0]
 8001e24:	4603      	mov	r3, r0
 8001e26:	68f8      	ldr	r0, [r7, #12]
 8001e28:	f001 feea 	bl	8003c00 <I2C_RequestMemoryWrite>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d052      	beq.n	8001ed8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e081      	b.n	8001f3a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e3a:	68f8      	ldr	r0, [r7, #12]
 8001e3c:	f002 fa20 	bl	8004280 <I2C_WaitOnTXEFlagUntilTimeout>
 8001e40:	4603      	mov	r3, r0
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d00d      	beq.n	8001e62 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d107      	bne.n	8001e5e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e5c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e06b      	b.n	8001f3a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e66:	781a      	ldrb	r2, [r3, #0]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	1c5a      	adds	r2, r3, #1
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e7c:	3b01      	subs	r3, #1
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695b      	ldr	r3, [r3, #20]
 8001e98:	f003 0304 	and.w	r3, r3, #4
 8001e9c:	2b04      	cmp	r3, #4
 8001e9e:	d11b      	bne.n	8001ed8 <HAL_I2C_Mem_Write+0x180>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d017      	beq.n	8001ed8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eac:	781a      	ldrb	r2, [r3, #0]
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ec2:	3b01      	subs	r3, #1
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	3b01      	subs	r3, #1
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d1aa      	bne.n	8001e36 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ee4:	68f8      	ldr	r0, [r7, #12]
 8001ee6:	f002 fa13 	bl	8004310 <I2C_WaitOnBTFFlagUntilTimeout>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d00d      	beq.n	8001f0c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d107      	bne.n	8001f08 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f06:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e016      	b.n	8001f3a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	681a      	ldr	r2, [r3, #0]
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2220      	movs	r2, #32
 8001f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	2200      	movs	r2, #0
 8001f28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f34:	2300      	movs	r3, #0
 8001f36:	e000      	b.n	8001f3a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001f38:	2302      	movs	r3, #2
  }
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3718      	adds	r7, #24
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	00100002 	.word	0x00100002
 8001f48:	ffff0000 	.word	0xffff0000

08001f4c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b08c      	sub	sp, #48	; 0x30
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	4608      	mov	r0, r1
 8001f56:	4611      	mov	r1, r2
 8001f58:	461a      	mov	r2, r3
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	817b      	strh	r3, [r7, #10]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	813b      	strh	r3, [r7, #8]
 8001f62:	4613      	mov	r3, r2
 8001f64:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8001f66:	2300      	movs	r3, #0
 8001f68:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f6a:	f7ff f815 	bl	8000f98 <HAL_GetTick>
 8001f6e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f76:	b2db      	uxtb	r3, r3
 8001f78:	2b20      	cmp	r3, #32
 8001f7a:	f040 8244 	bne.w	8002406 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	9300      	str	r3, [sp, #0]
 8001f82:	2319      	movs	r3, #25
 8001f84:	2201      	movs	r2, #1
 8001f86:	4982      	ldr	r1, [pc, #520]	; (8002190 <HAL_I2C_Mem_Read+0x244>)
 8001f88:	68f8      	ldr	r0, [r7, #12]
 8001f8a:	f002 f85f 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8001f94:	2302      	movs	r3, #2
 8001f96:	e237      	b.n	8002408 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d101      	bne.n	8001fa6 <HAL_I2C_Mem_Read+0x5a>
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	e230      	b.n	8002408 <HAL_I2C_Mem_Read+0x4bc>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d007      	beq.n	8001fcc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f042 0201 	orr.w	r2, r2, #1
 8001fca:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fda:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	2222      	movs	r2, #34	; 0x22
 8001fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	2240      	movs	r2, #64	; 0x40
 8001fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2200      	movs	r2, #0
 8001ff0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ff6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8001ffc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002002:	b29a      	uxth	r2, r3
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	4a62      	ldr	r2, [pc, #392]	; (8002194 <HAL_I2C_Mem_Read+0x248>)
 800200c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800200e:	88f8      	ldrh	r0, [r7, #6]
 8002010:	893a      	ldrh	r2, [r7, #8]
 8002012:	8979      	ldrh	r1, [r7, #10]
 8002014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002016:	9301      	str	r3, [sp, #4]
 8002018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	4603      	mov	r3, r0
 800201e:	68f8      	ldr	r0, [r7, #12]
 8002020:	f001 fe84 	bl	8003d2c <I2C_RequestMemoryRead>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e1ec      	b.n	8002408 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002032:	2b00      	cmp	r3, #0
 8002034:	d113      	bne.n	800205e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002036:	2300      	movs	r3, #0
 8002038:	61fb      	str	r3, [r7, #28]
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	61fb      	str	r3, [r7, #28]
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	699b      	ldr	r3, [r3, #24]
 8002048:	61fb      	str	r3, [r7, #28]
 800204a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	681a      	ldr	r2, [r3, #0]
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	e1c0      	b.n	80023e0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002062:	2b01      	cmp	r3, #1
 8002064:	d11e      	bne.n	80020a4 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002074:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002076:	b672      	cpsid	i
}
 8002078:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800207a:	2300      	movs	r3, #0
 800207c:	61bb      	str	r3, [r7, #24]
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	61bb      	str	r3, [r7, #24]
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800209e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020a0:	b662      	cpsie	i
}
 80020a2:	e035      	b.n	8002110 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d11e      	bne.n	80020ea <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020ba:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80020bc:	b672      	cpsid	i
}
 80020be:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	695b      	ldr	r3, [r3, #20]
 80020ca:	617b      	str	r3, [r7, #20]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80020e6:	b662      	cpsie	i
}
 80020e8:	e012      	b.n	8002110 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	681a      	ldr	r2, [r3, #0]
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020f8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	613b      	str	r3, [r7, #16]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	613b      	str	r3, [r7, #16]
 800210e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002110:	e166      	b.n	80023e0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002116:	2b03      	cmp	r3, #3
 8002118:	f200 811f 	bhi.w	800235a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002120:	2b01      	cmp	r3, #1
 8002122:	d123      	bne.n	800216c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002124:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002126:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f002 f96b 	bl	8004404 <I2C_WaitOnRXNEFlagUntilTimeout>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e167      	b.n	8002408 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691a      	ldr	r2, [r3, #16]
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	b2d2      	uxtb	r2, r2
 8002144:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800214a:	1c5a      	adds	r2, r3, #1
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002154:	3b01      	subs	r3, #1
 8002156:	b29a      	uxth	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002160:	b29b      	uxth	r3, r3
 8002162:	3b01      	subs	r3, #1
 8002164:	b29a      	uxth	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	855a      	strh	r2, [r3, #42]	; 0x2a
 800216a:	e139      	b.n	80023e0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002170:	2b02      	cmp	r3, #2
 8002172:	d152      	bne.n	800221a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002176:	9300      	str	r3, [sp, #0]
 8002178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800217a:	2200      	movs	r2, #0
 800217c:	4906      	ldr	r1, [pc, #24]	; (8002198 <HAL_I2C_Mem_Read+0x24c>)
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f001 ff64 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d008      	beq.n	800219c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e13c      	b.n	8002408 <HAL_I2C_Mem_Read+0x4bc>
 800218e:	bf00      	nop
 8002190:	00100002 	.word	0x00100002
 8002194:	ffff0000 	.word	0xffff0000
 8002198:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800219c:	b672      	cpsid	i
}
 800219e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	681a      	ldr	r2, [r3, #0]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021ae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	691a      	ldr	r2, [r3, #16]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ba:	b2d2      	uxtb	r2, r2
 80021bc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	1c5a      	adds	r2, r3, #1
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d8:	b29b      	uxth	r3, r3
 80021da:	3b01      	subs	r3, #1
 80021dc:	b29a      	uxth	r2, r3
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80021e2:	b662      	cpsie	i
}
 80021e4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	691a      	ldr	r2, [r3, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f8:	1c5a      	adds	r2, r3, #1
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800220e:	b29b      	uxth	r3, r3
 8002210:	3b01      	subs	r3, #1
 8002212:	b29a      	uxth	r2, r3
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002218:	e0e2      	b.n	80023e0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800221a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002220:	2200      	movs	r2, #0
 8002222:	497b      	ldr	r1, [pc, #492]	; (8002410 <HAL_I2C_Mem_Read+0x4c4>)
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f001 ff11 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e0e9      	b.n	8002408 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	681a      	ldr	r2, [r3, #0]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002242:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002244:	b672      	cpsid	i
}
 8002246:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	691a      	ldr	r2, [r3, #16]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002252:	b2d2      	uxtb	r2, r2
 8002254:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002264:	3b01      	subs	r3, #1
 8002266:	b29a      	uxth	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002270:	b29b      	uxth	r3, r3
 8002272:	3b01      	subs	r3, #1
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800227a:	4b66      	ldr	r3, [pc, #408]	; (8002414 <HAL_I2C_Mem_Read+0x4c8>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	08db      	lsrs	r3, r3, #3
 8002280:	4a65      	ldr	r2, [pc, #404]	; (8002418 <HAL_I2C_Mem_Read+0x4cc>)
 8002282:	fba2 2303 	umull	r2, r3, r2, r3
 8002286:	0a1a      	lsrs	r2, r3, #8
 8002288:	4613      	mov	r3, r2
 800228a:	009b      	lsls	r3, r3, #2
 800228c:	4413      	add	r3, r2
 800228e:	00da      	lsls	r2, r3, #3
 8002290:	1ad3      	subs	r3, r2, r3
 8002292:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	3b01      	subs	r3, #1
 8002298:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800229a:	6a3b      	ldr	r3, [r7, #32]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d118      	bne.n	80022d2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2220      	movs	r2, #32
 80022aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	f043 0220 	orr.w	r2, r3, #32
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80022c2:	b662      	cpsie	i
}
 80022c4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e09a      	b.n	8002408 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b04      	cmp	r3, #4
 80022de:	d1d9      	bne.n	8002294 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	691a      	ldr	r2, [r3, #16]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	b2d2      	uxtb	r2, r2
 80022fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800230c:	3b01      	subs	r3, #1
 800230e:	b29a      	uxth	r2, r3
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b01      	subs	r3, #1
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002322:	b662      	cpsie	i
}
 8002324:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	b2d2      	uxtb	r2, r2
 8002332:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	1c5a      	adds	r2, r3, #1
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800234e:	b29b      	uxth	r3, r3
 8002350:	3b01      	subs	r3, #1
 8002352:	b29a      	uxth	r2, r3
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002358:	e042      	b.n	80023e0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800235a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800235c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f002 f850 	bl	8004404 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d001      	beq.n	800236e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800236a:	2301      	movs	r3, #1
 800236c:	e04c      	b.n	8002408 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	691a      	ldr	r2, [r3, #16]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	b2d2      	uxtb	r2, r2
 800237a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002380:	1c5a      	adds	r2, r3, #1
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800238a:	3b01      	subs	r3, #1
 800238c:	b29a      	uxth	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002396:	b29b      	uxth	r3, r3
 8002398:	3b01      	subs	r3, #1
 800239a:	b29a      	uxth	r2, r3
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	f003 0304 	and.w	r3, r3, #4
 80023aa:	2b04      	cmp	r3, #4
 80023ac:	d118      	bne.n	80023e0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	691a      	ldr	r2, [r3, #16]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	1c5a      	adds	r2, r3, #1
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	3b01      	subs	r3, #1
 80023da:	b29a      	uxth	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	f47f ae94 	bne.w	8002112 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2220      	movs	r2, #32
 80023ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2200      	movs	r2, #0
 80023fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002402:	2300      	movs	r3, #0
 8002404:	e000      	b.n	8002408 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 8002406:	2302      	movs	r3, #2
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	3728      	adds	r7, #40	; 0x28
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	00010004 	.word	0x00010004
 8002414:	200003e8 	.word	0x200003e8
 8002418:	14f8b589 	.word	0x14f8b589

0800241c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b088      	sub	sp, #32
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002434:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800243c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002444:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8002446:	7bfb      	ldrb	r3, [r7, #15]
 8002448:	2b10      	cmp	r3, #16
 800244a:	d003      	beq.n	8002454 <HAL_I2C_EV_IRQHandler+0x38>
 800244c:	7bfb      	ldrb	r3, [r7, #15]
 800244e:	2b40      	cmp	r3, #64	; 0x40
 8002450:	f040 80c1 	bne.w	80025d6 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	699b      	ldr	r3, [r3, #24]
 800245a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8002464:	69fb      	ldr	r3, [r7, #28]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d10d      	bne.n	800248a <HAL_I2C_EV_IRQHandler+0x6e>
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002474:	d003      	beq.n	800247e <HAL_I2C_EV_IRQHandler+0x62>
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800247c:	d101      	bne.n	8002482 <HAL_I2C_EV_IRQHandler+0x66>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_I2C_EV_IRQHandler+0x68>
 8002482:	2300      	movs	r3, #0
 8002484:	2b01      	cmp	r3, #1
 8002486:	f000 8132 	beq.w	80026ee <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d00c      	beq.n	80024ae <HAL_I2C_EV_IRQHandler+0x92>
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	0a5b      	lsrs	r3, r3, #9
 8002498:	f003 0301 	and.w	r3, r3, #1
 800249c:	2b00      	cmp	r3, #0
 800249e:	d006      	beq.n	80024ae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f002 f83a 	bl	800451a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 fd85 	bl	8002fb6 <I2C_Master_SB>
 80024ac:	e092      	b.n	80025d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	08db      	lsrs	r3, r3, #3
 80024b2:	f003 0301 	and.w	r3, r3, #1
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d009      	beq.n	80024ce <HAL_I2C_EV_IRQHandler+0xb2>
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	0a5b      	lsrs	r3, r3, #9
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d003      	beq.n	80024ce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fdfa 	bl	80030c0 <I2C_Master_ADD10>
 80024cc:	e082      	b.n	80025d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	085b      	lsrs	r3, r3, #1
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d009      	beq.n	80024ee <HAL_I2C_EV_IRQHandler+0xd2>
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	0a5b      	lsrs	r3, r3, #9
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d003      	beq.n	80024ee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80024e6:	6878      	ldr	r0, [r7, #4]
 80024e8:	f000 fe13 	bl	8003112 <I2C_Master_ADDR>
 80024ec:	e072      	b.n	80025d4 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	089b      	lsrs	r3, r3, #2
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d03b      	beq.n	8002572 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002508:	f000 80f3 	beq.w	80026f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	09db      	lsrs	r3, r3, #7
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00f      	beq.n	8002538 <HAL_I2C_EV_IRQHandler+0x11c>
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	0a9b      	lsrs	r3, r3, #10
 800251c:	f003 0301 	and.w	r3, r3, #1
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_I2C_EV_IRQHandler+0x11c>
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	089b      	lsrs	r3, r3, #2
 8002528:	f003 0301 	and.w	r3, r3, #1
 800252c:	2b00      	cmp	r3, #0
 800252e:	d103      	bne.n	8002538 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f9f1 	bl	8002918 <I2C_MasterTransmit_TXE>
 8002536:	e04d      	b.n	80025d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	089b      	lsrs	r3, r3, #2
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b00      	cmp	r3, #0
 8002542:	f000 80d6 	beq.w	80026f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	0a5b      	lsrs	r3, r3, #9
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	f000 80cf 	beq.w	80026f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002554:	7bbb      	ldrb	r3, [r7, #14]
 8002556:	2b21      	cmp	r3, #33	; 0x21
 8002558:	d103      	bne.n	8002562 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fa78 	bl	8002a50 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002560:	e0c7      	b.n	80026f2 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b40      	cmp	r3, #64	; 0x40
 8002566:	f040 80c4 	bne.w	80026f2 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fae6 	bl	8002b3c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002570:	e0bf      	b.n	80026f2 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800257c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002580:	f000 80b7 	beq.w	80026f2 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	099b      	lsrs	r3, r3, #6
 8002588:	f003 0301 	and.w	r3, r3, #1
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00f      	beq.n	80025b0 <HAL_I2C_EV_IRQHandler+0x194>
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	0a9b      	lsrs	r3, r3, #10
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b00      	cmp	r3, #0
 800259a:	d009      	beq.n	80025b0 <HAL_I2C_EV_IRQHandler+0x194>
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	089b      	lsrs	r3, r3, #2
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d103      	bne.n	80025b0 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fb5f 	bl	8002c6c <I2C_MasterReceive_RXNE>
 80025ae:	e011      	b.n	80025d4 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025b0:	69fb      	ldr	r3, [r7, #28]
 80025b2:	089b      	lsrs	r3, r3, #2
 80025b4:	f003 0301 	and.w	r3, r3, #1
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 809a 	beq.w	80026f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	0a5b      	lsrs	r3, r3, #9
 80025c2:	f003 0301 	and.w	r3, r3, #1
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	f000 8093 	beq.w	80026f2 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80025cc:	6878      	ldr	r0, [r7, #4]
 80025ce:	f000 fc08 	bl	8002de2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025d2:	e08e      	b.n	80026f2 <HAL_I2C_EV_IRQHandler+0x2d6>
 80025d4:	e08d      	b.n	80026f2 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d004      	beq.n	80025e8 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	61fb      	str	r3, [r7, #28]
 80025e6:	e007      	b.n	80025f8 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	085b      	lsrs	r3, r3, #1
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d012      	beq.n	800262a <HAL_I2C_EV_IRQHandler+0x20e>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	0a5b      	lsrs	r3, r3, #9
 8002608:	f003 0301 	and.w	r3, r3, #1
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00c      	beq.n	800262a <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	2b00      	cmp	r3, #0
 8002616:	d003      	beq.n	8002620 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	699b      	ldr	r3, [r3, #24]
 800261e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8002620:	69b9      	ldr	r1, [r7, #24]
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 ffcc 	bl	80035c0 <I2C_Slave_ADDR>
 8002628:	e066      	b.n	80026f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	091b      	lsrs	r3, r3, #4
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d009      	beq.n	800264a <HAL_I2C_EV_IRQHandler+0x22e>
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	0a5b      	lsrs	r3, r3, #9
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d003      	beq.n	800264a <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f001 f806 	bl	8003654 <I2C_Slave_STOPF>
 8002648:	e056      	b.n	80026f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800264a:	7bbb      	ldrb	r3, [r7, #14]
 800264c:	2b21      	cmp	r3, #33	; 0x21
 800264e:	d002      	beq.n	8002656 <HAL_I2C_EV_IRQHandler+0x23a>
 8002650:	7bbb      	ldrb	r3, [r7, #14]
 8002652:	2b29      	cmp	r3, #41	; 0x29
 8002654:	d125      	bne.n	80026a2 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	09db      	lsrs	r3, r3, #7
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00f      	beq.n	8002682 <HAL_I2C_EV_IRQHandler+0x266>
 8002662:	697b      	ldr	r3, [r7, #20]
 8002664:	0a9b      	lsrs	r3, r3, #10
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b00      	cmp	r3, #0
 800266c:	d009      	beq.n	8002682 <HAL_I2C_EV_IRQHandler+0x266>
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	089b      	lsrs	r3, r3, #2
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 fee4 	bl	8003448 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8002680:	e039      	b.n	80026f6 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	089b      	lsrs	r3, r3, #2
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d033      	beq.n	80026f6 <HAL_I2C_EV_IRQHandler+0x2da>
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	0a5b      	lsrs	r3, r3, #9
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d02d      	beq.n	80026f6 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 ff11 	bl	80034c2 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026a0:	e029      	b.n	80026f6 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	099b      	lsrs	r3, r3, #6
 80026a6:	f003 0301 	and.w	r3, r3, #1
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d00f      	beq.n	80026ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	0a9b      	lsrs	r3, r3, #10
 80026b2:	f003 0301 	and.w	r3, r3, #1
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d009      	beq.n	80026ce <HAL_I2C_EV_IRQHandler+0x2b2>
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	089b      	lsrs	r3, r3, #2
 80026be:	f003 0301 	and.w	r3, r3, #1
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d103      	bne.n	80026ce <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 ff1b 	bl	8003502 <I2C_SlaveReceive_RXNE>
 80026cc:	e014      	b.n	80026f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	089b      	lsrs	r3, r3, #2
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00e      	beq.n	80026f8 <HAL_I2C_EV_IRQHandler+0x2dc>
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	0a5b      	lsrs	r3, r3, #9
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d008      	beq.n	80026f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 ff49 	bl	800357e <I2C_SlaveReceive_BTF>
 80026ec:	e004      	b.n	80026f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80026ee:	bf00      	nop
 80026f0:	e002      	b.n	80026f8 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80026f2:	bf00      	nop
 80026f4:	e000      	b.n	80026f8 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80026f6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80026f8:	3720      	adds	r7, #32
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b08a      	sub	sp, #40	; 0x28
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	695b      	ldr	r3, [r3, #20]
 800270c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8002716:	2300      	movs	r3, #0
 8002718:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002720:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	0a1b      	lsrs	r3, r3, #8
 8002726:	f003 0301 	and.w	r3, r3, #1
 800272a:	2b00      	cmp	r3, #0
 800272c:	d016      	beq.n	800275c <HAL_I2C_ER_IRQHandler+0x5e>
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	0a1b      	lsrs	r3, r3, #8
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d010      	beq.n	800275c <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	f043 0301 	orr.w	r3, r3, #1
 8002740:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800274a:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800275a:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800275c:	6a3b      	ldr	r3, [r7, #32]
 800275e:	0a5b      	lsrs	r3, r3, #9
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00e      	beq.n	8002786 <HAL_I2C_ER_IRQHandler+0x88>
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	0a1b      	lsrs	r3, r3, #8
 800276c:	f003 0301 	and.w	r3, r3, #1
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8002774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002776:	f043 0302 	orr.w	r3, r3, #2
 800277a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8002784:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	0a9b      	lsrs	r3, r3, #10
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b00      	cmp	r3, #0
 8002790:	d03f      	beq.n	8002812 <HAL_I2C_ER_IRQHandler+0x114>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	0a1b      	lsrs	r3, r3, #8
 8002796:	f003 0301 	and.w	r3, r3, #1
 800279a:	2b00      	cmp	r3, #0
 800279c:	d039      	beq.n	8002812 <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 800279e:	7efb      	ldrb	r3, [r7, #27]
 80027a0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027b0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80027b8:	7ebb      	ldrb	r3, [r7, #26]
 80027ba:	2b20      	cmp	r3, #32
 80027bc:	d112      	bne.n	80027e4 <HAL_I2C_ER_IRQHandler+0xe6>
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d10f      	bne.n	80027e4 <HAL_I2C_ER_IRQHandler+0xe6>
 80027c4:	7cfb      	ldrb	r3, [r7, #19]
 80027c6:	2b21      	cmp	r3, #33	; 0x21
 80027c8:	d008      	beq.n	80027dc <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80027ca:	7cfb      	ldrb	r3, [r7, #19]
 80027cc:	2b29      	cmp	r3, #41	; 0x29
 80027ce:	d005      	beq.n	80027dc <HAL_I2C_ER_IRQHandler+0xde>
 80027d0:	7cfb      	ldrb	r3, [r7, #19]
 80027d2:	2b28      	cmp	r3, #40	; 0x28
 80027d4:	d106      	bne.n	80027e4 <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2b21      	cmp	r3, #33	; 0x21
 80027da:	d103      	bne.n	80027e4 <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 80027dc:	6878      	ldr	r0, [r7, #4]
 80027de:	f001 f869 	bl	80038b4 <I2C_Slave_AF>
 80027e2:	e016      	b.n	8002812 <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80027ec:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80027ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f0:	f043 0304 	orr.w	r3, r3, #4
 80027f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80027f6:	7efb      	ldrb	r3, [r7, #27]
 80027f8:	2b10      	cmp	r3, #16
 80027fa:	d002      	beq.n	8002802 <HAL_I2C_ER_IRQHandler+0x104>
 80027fc:	7efb      	ldrb	r3, [r7, #27]
 80027fe:	2b40      	cmp	r3, #64	; 0x40
 8002800:	d107      	bne.n	8002812 <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002810:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	0adb      	lsrs	r3, r3, #11
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00e      	beq.n	800283c <HAL_I2C_ER_IRQHandler+0x13e>
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	0a1b      	lsrs	r3, r3, #8
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b00      	cmp	r3, #0
 8002828:	d008      	beq.n	800283c <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	f043 0308 	orr.w	r3, r3, #8
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800283a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	2b00      	cmp	r3, #0
 8002840:	d008      	beq.n	8002854 <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	431a      	orrs	r2, r3
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	f001 f8a4 	bl	800399c <I2C_ITError>
  }
}
 8002854:	bf00      	nop
 8002856:	3728      	adds	r7, #40	; 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}

0800285c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800285c:	b480      	push	{r7}
 800285e:	b083      	sub	sp, #12
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002864:	bf00      	nop
 8002866:	370c      	adds	r7, #12
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr

0800286e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800286e:	b480      	push	{r7}
 8002870:	b083      	sub	sp, #12
 8002872:	af00      	add	r7, sp, #0
 8002874:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002876:	bf00      	nop
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	bc80      	pop	{r7}
 800287e:	4770      	bx	lr

08002880 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002880:	b480      	push	{r7}
 8002882:	b083      	sub	sp, #12
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002888:	bf00      	nop
 800288a:	370c      	adds	r7, #12
 800288c:	46bd      	mov	sp, r7
 800288e:	bc80      	pop	{r7}
 8002890:	4770      	bx	lr

08002892 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr

080028a4 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	460b      	mov	r3, r1
 80028ae:	70fb      	strb	r3, [r7, #3]
 80028b0:	4613      	mov	r3, r2
 80028b2:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80028b4:	bf00      	nop
 80028b6:	370c      	adds	r7, #12
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bc80      	pop	{r7}
 80028bc:	4770      	bx	lr

080028be <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bc80      	pop	{r7}
 80028ce:	4770      	bx	lr

080028d0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b083      	sub	sp, #12
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80028d8:	bf00      	nop
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80028ea:	bf00      	nop
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bc80      	pop	{r7}
 80028f2:	4770      	bx	lr

080028f4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bc80      	pop	{r7}
 8002904:	4770      	bx	lr

08002906 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002906:	b480      	push	{r7}
 8002908:	b083      	sub	sp, #12
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800290e:	bf00      	nop
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002926:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800292e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293a:	2b00      	cmp	r3, #0
 800293c:	d150      	bne.n	80029e0 <I2C_MasterTransmit_TXE+0xc8>
 800293e:	7bfb      	ldrb	r3, [r7, #15]
 8002940:	2b21      	cmp	r3, #33	; 0x21
 8002942:	d14d      	bne.n	80029e0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	2b08      	cmp	r3, #8
 8002948:	d01d      	beq.n	8002986 <I2C_MasterTransmit_TXE+0x6e>
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2b20      	cmp	r3, #32
 800294e:	d01a      	beq.n	8002986 <I2C_MasterTransmit_TXE+0x6e>
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002956:	d016      	beq.n	8002986 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002966:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2211      	movs	r2, #17
 800296c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2220      	movs	r2, #32
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ff6c 	bl	800285c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002984:	e060      	b.n	8002a48 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002994:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029a4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b40      	cmp	r3, #64	; 0x40
 80029be:	d107      	bne.n	80029d0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2200      	movs	r2, #0
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff ff81 	bl	80028d0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029ce:	e03b      	b.n	8002a48 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f7ff ff3f 	bl	800285c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80029de:	e033      	b.n	8002a48 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80029e0:	7bfb      	ldrb	r3, [r7, #15]
 80029e2:	2b21      	cmp	r3, #33	; 0x21
 80029e4:	d005      	beq.n	80029f2 <I2C_MasterTransmit_TXE+0xda>
 80029e6:	7bbb      	ldrb	r3, [r7, #14]
 80029e8:	2b40      	cmp	r3, #64	; 0x40
 80029ea:	d12d      	bne.n	8002a48 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	2b22      	cmp	r3, #34	; 0x22
 80029f0:	d12a      	bne.n	8002a48 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d108      	bne.n	8002a0e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	685a      	ldr	r2, [r3, #4]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a0a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8002a0c:	e01c      	b.n	8002a48 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a14:	b2db      	uxtb	r3, r3
 8002a16:	2b40      	cmp	r3, #64	; 0x40
 8002a18:	d103      	bne.n	8002a22 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f88e 	bl	8002b3c <I2C_MemoryTransmit_TXE_BTF>
}
 8002a20:	e012      	b.n	8002a48 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a32:	1c5a      	adds	r2, r3, #1
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	3b01      	subs	r3, #1
 8002a40:	b29a      	uxth	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002a46:	e7ff      	b.n	8002a48 <I2C_MasterTransmit_TXE+0x130>
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b084      	sub	sp, #16
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a5c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b21      	cmp	r3, #33	; 0x21
 8002a68:	d164      	bne.n	8002b34 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d012      	beq.n	8002a9a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8002a98:	e04c      	b.n	8002b34 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	2b08      	cmp	r3, #8
 8002a9e:	d01d      	beq.n	8002adc <I2C_MasterTransmit_BTF+0x8c>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b20      	cmp	r3, #32
 8002aa4:	d01a      	beq.n	8002adc <I2C_MasterTransmit_BTF+0x8c>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002aac:	d016      	beq.n	8002adc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002abc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2211      	movs	r2, #17
 8002ac2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fec1 	bl	800285c <HAL_I2C_MasterTxCpltCallback>
}
 8002ada:	e02b      	b.n	8002b34 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	685a      	ldr	r2, [r3, #4]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002aea:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2200      	movs	r2, #0
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2220      	movs	r2, #32
 8002b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b40      	cmp	r3, #64	; 0x40
 8002b14:	d107      	bne.n	8002b26 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7ff fed6 	bl	80028d0 <HAL_I2C_MemTxCpltCallback>
}
 8002b24:	e006      	b.n	8002b34 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff fe94 	bl	800285c <HAL_I2C_MasterTxCpltCallback>
}
 8002b34:	bf00      	nop
 8002b36:	3710      	adds	r7, #16
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b4a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d11d      	bne.n	8002b90 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d10b      	bne.n	8002b74 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b60:	b2da      	uxtb	r2, r3
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b6c:	1c9a      	adds	r2, r3, #2
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8002b72:	e077      	b.n	8002c64 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	121b      	asrs	r3, r3, #8
 8002b7c:	b2da      	uxtb	r2, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b88:	1c5a      	adds	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002b8e:	e069      	b.n	8002c64 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d10b      	bne.n	8002bb0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9c:	b2da      	uxtb	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002bae:	e059      	b.n	8002c64 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d152      	bne.n	8002c5e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8002bb8:	7bfb      	ldrb	r3, [r7, #15]
 8002bba:	2b22      	cmp	r3, #34	; 0x22
 8002bbc:	d10d      	bne.n	8002bda <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bcc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8002bd8:	e044      	b.n	8002c64 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d015      	beq.n	8002c10 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
 8002be6:	2b21      	cmp	r3, #33	; 0x21
 8002be8:	d112      	bne.n	8002c10 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bee:	781a      	ldrb	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfa:	1c5a      	adds	r2, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c04:	b29b      	uxth	r3, r3
 8002c06:	3b01      	subs	r3, #1
 8002c08:	b29a      	uxth	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002c0e:	e029      	b.n	8002c64 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d124      	bne.n	8002c64 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8002c1a:	7bfb      	ldrb	r3, [r7, #15]
 8002c1c:	2b21      	cmp	r3, #33	; 0x21
 8002c1e:	d121      	bne.n	8002c64 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c2e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c3e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2200      	movs	r2, #0
 8002c44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2220      	movs	r2, #32
 8002c4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff fe3a 	bl	80028d0 <HAL_I2C_MemTxCpltCallback>
}
 8002c5c:	e002      	b.n	8002c64 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f7ff f866 	bl	8001d30 <I2C_Flush_DR>
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b084      	sub	sp, #16
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b22      	cmp	r3, #34	; 0x22
 8002c7e:	f040 80ac 	bne.w	8002dda <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2b03      	cmp	r3, #3
 8002c8e:	d921      	bls.n	8002cd4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691a      	ldr	r2, [r3, #16]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca2:	1c5a      	adds	r2, r3, #1
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	3b01      	subs	r3, #1
 8002cb0:	b29a      	uxth	r2, r3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	f040 808c 	bne.w	8002dda <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8002cd2:	e082      	b.n	8002dda <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d075      	beq.n	8002dc8 <I2C_MasterReceive_RXNE+0x15c>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d002      	beq.n	8002ce8 <I2C_MasterReceive_RXNE+0x7c>
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d16f      	bne.n	8002dc8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f001 fb59 	bl	80043a0 <I2C_WaitOnSTOPRequestThroughIT>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d142      	bne.n	8002d7a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d02:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	685a      	ldr	r2, [r3, #4]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d12:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d1e:	b2d2      	uxtb	r2, r2
 8002d20:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d26:	1c5a      	adds	r2, r3, #1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	3b01      	subs	r3, #1
 8002d34:	b29a      	uxth	r2, r3
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b40      	cmp	r3, #64	; 0x40
 8002d4c:	d10a      	bne.n	8002d64 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8002d5c:	6878      	ldr	r0, [r7, #4]
 8002d5e:	f7ff fdc0 	bl	80028e2 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d62:	e03a      	b.n	8002dda <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2212      	movs	r2, #18
 8002d70:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f7ff fd7b 	bl	800286e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002d78:	e02f      	b.n	8002dda <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d88:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	691a      	ldr	r2, [r3, #16]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	b2d2      	uxtb	r2, r2
 8002d96:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9c:	1c5a      	adds	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	3b01      	subs	r3, #1
 8002daa:	b29a      	uxth	r2, r3
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2220      	movs	r2, #32
 8002db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8002dc0:	6878      	ldr	r0, [r7, #4]
 8002dc2:	f7ff fd97 	bl	80028f4 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8002dc6:	e008      	b.n	8002dda <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd6:	605a      	str	r2, [r3, #4]
}
 8002dd8:	e7ff      	b.n	8002dda <I2C_MasterReceive_RXNE+0x16e>
 8002dda:	bf00      	nop
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}

08002de2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dee:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d11b      	bne.n	8002e32 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e08:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e14:	b2d2      	uxtb	r2, r2
 8002e16:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1c:	1c5a      	adds	r2, r3, #1
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8002e30:	e0bd      	b.n	8002fae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	2b03      	cmp	r3, #3
 8002e3a:	d129      	bne.n	8002e90 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e4a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b04      	cmp	r3, #4
 8002e50:	d00a      	beq.n	8002e68 <I2C_MasterReceive_BTF+0x86>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d007      	beq.n	8002e68 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e66:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	691a      	ldr	r2, [r3, #16]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e72:	b2d2      	uxtb	r2, r2
 8002e74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002e8e:	e08e      	b.n	8002fae <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e94:	b29b      	uxth	r3, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d176      	bne.n	8002f88 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2b01      	cmp	r3, #1
 8002e9e:	d002      	beq.n	8002ea6 <I2C_MasterReceive_BTF+0xc4>
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b10      	cmp	r3, #16
 8002ea4:	d108      	bne.n	8002eb8 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002eb4:	601a      	str	r2, [r3, #0]
 8002eb6:	e019      	b.n	8002eec <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2b04      	cmp	r3, #4
 8002ebc:	d002      	beq.n	8002ec4 <I2C_MasterReceive_BTF+0xe2>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d108      	bne.n	8002ed6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002ed2:	601a      	str	r2, [r3, #0]
 8002ed4:	e00a      	b.n	8002eec <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b10      	cmp	r3, #16
 8002eda:	d007      	beq.n	8002eec <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eea:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	691a      	ldr	r2, [r3, #16]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	b2d2      	uxtb	r2, r2
 8002ef8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efe:	1c5a      	adds	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f08:	b29b      	uxth	r3, r3
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	b29a      	uxth	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	1c5a      	adds	r2, r3, #1
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29a      	uxth	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002f46:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b40      	cmp	r3, #64	; 0x40
 8002f5a:	d10a      	bne.n	8002f72 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff fcb9 	bl	80028e2 <HAL_I2C_MemRxCpltCallback>
}
 8002f70:	e01d      	b.n	8002fae <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2212      	movs	r2, #18
 8002f7e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f7ff fc74 	bl	800286e <HAL_I2C_MasterRxCpltCallback>
}
 8002f86:	e012      	b.n	8002fae <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	691a      	ldr	r2, [r3, #16]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	b2d2      	uxtb	r2, r2
 8002f94:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	1c5a      	adds	r2, r3, #1
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa4:	b29b      	uxth	r3, r3
 8002fa6:	3b01      	subs	r3, #1
 8002fa8:	b29a      	uxth	r2, r3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002fae:	bf00      	nop
 8002fb0:	3710      	adds	r7, #16
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	bd80      	pop	{r7, pc}

08002fb6 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fc4:	b2db      	uxtb	r3, r3
 8002fc6:	2b40      	cmp	r3, #64	; 0x40
 8002fc8:	d117      	bne.n	8002ffa <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d109      	bne.n	8002fe6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fe2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8002fe4:	e067      	b.n	80030b6 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	b2db      	uxtb	r3, r3
 8002fec:	f043 0301 	orr.w	r3, r3, #1
 8002ff0:	b2da      	uxtb	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	611a      	str	r2, [r3, #16]
}
 8002ff8:	e05d      	b.n	80030b6 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	691b      	ldr	r3, [r3, #16]
 8002ffe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003002:	d133      	bne.n	800306c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b21      	cmp	r3, #33	; 0x21
 800300e:	d109      	bne.n	8003024 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003020:	611a      	str	r2, [r3, #16]
 8003022:	e008      	b.n	8003036 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003028:	b2db      	uxtb	r3, r3
 800302a:	f043 0301 	orr.w	r3, r3, #1
 800302e:	b2da      	uxtb	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800303a:	2b00      	cmp	r3, #0
 800303c:	d004      	beq.n	8003048 <I2C_Master_SB+0x92>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003044:	2b00      	cmp	r3, #0
 8003046:	d108      	bne.n	800305a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304c:	2b00      	cmp	r3, #0
 800304e:	d032      	beq.n	80030b6 <I2C_Master_SB+0x100>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	2b00      	cmp	r3, #0
 8003058:	d02d      	beq.n	80030b6 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003068:	605a      	str	r2, [r3, #4]
}
 800306a:	e024      	b.n	80030b6 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003070:	2b00      	cmp	r3, #0
 8003072:	d10e      	bne.n	8003092 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003078:	b29b      	uxth	r3, r3
 800307a:	11db      	asrs	r3, r3, #7
 800307c:	b2db      	uxtb	r3, r3
 800307e:	f003 0306 	and.w	r3, r3, #6
 8003082:	b2db      	uxtb	r3, r3
 8003084:	f063 030f 	orn	r3, r3, #15
 8003088:	b2da      	uxtb	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	611a      	str	r2, [r3, #16]
}
 8003090:	e011      	b.n	80030b6 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003096:	2b01      	cmp	r3, #1
 8003098:	d10d      	bne.n	80030b6 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800309e:	b29b      	uxth	r3, r3
 80030a0:	11db      	asrs	r3, r3, #7
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f003 0306 	and.w	r3, r3, #6
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	f063 030e 	orn	r3, r3, #14
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	611a      	str	r2, [r3, #16]
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bc80      	pop	{r7}
 80030be:	4770      	bx	lr

080030c0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80030c0:	b480      	push	{r7}
 80030c2:	b083      	sub	sp, #12
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030cc:	b2da      	uxtb	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d004      	beq.n	80030e6 <I2C_Master_ADD10+0x26>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d108      	bne.n	80030f8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d00c      	beq.n	8003108 <I2C_Master_ADD10+0x48>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d007      	beq.n	8003108 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685a      	ldr	r2, [r3, #4]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003106:	605a      	str	r2, [r3, #4]
  }
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	bc80      	pop	{r7}
 8003110:	4770      	bx	lr

08003112 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003112:	b480      	push	{r7}
 8003114:	b091      	sub	sp, #68	; 0x44
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003120:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003128:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800312e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b22      	cmp	r3, #34	; 0x22
 800313a:	f040 8174 	bne.w	8003426 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10f      	bne.n	8003166 <I2C_Master_ADDR+0x54>
 8003146:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800314a:	2b40      	cmp	r3, #64	; 0x40
 800314c:	d10b      	bne.n	8003166 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800314e:	2300      	movs	r3, #0
 8003150:	633b      	str	r3, [r7, #48]	; 0x30
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	633b      	str	r3, [r7, #48]	; 0x30
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	633b      	str	r3, [r7, #48]	; 0x30
 8003162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003164:	e16b      	b.n	800343e <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800316a:	2b00      	cmp	r3, #0
 800316c:	d11d      	bne.n	80031aa <I2C_Master_ADDR+0x98>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	691b      	ldr	r3, [r3, #16]
 8003172:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003176:	d118      	bne.n	80031aa <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003178:	2300      	movs	r3, #0
 800317a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800318c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800319c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031a2:	1c5a      	adds	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	651a      	str	r2, [r3, #80]	; 0x50
 80031a8:	e149      	b.n	800343e <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d113      	bne.n	80031dc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031b4:	2300      	movs	r3, #0
 80031b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	699b      	ldr	r3, [r3, #24]
 80031c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e120      	b.n	800341e <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	f040 808a 	bne.w	80032fc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80031e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031ea:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80031ee:	d137      	bne.n	8003260 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031fe:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800320a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800320e:	d113      	bne.n	8003238 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800321e:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	627b      	str	r3, [r7, #36]	; 0x24
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699b      	ldr	r3, [r3, #24]
 8003232:	627b      	str	r3, [r7, #36]	; 0x24
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	e0f2      	b.n	800341e <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003238:	2300      	movs	r3, #0
 800323a:	623b      	str	r3, [r7, #32]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	695b      	ldr	r3, [r3, #20]
 8003242:	623b      	str	r3, [r7, #32]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	623b      	str	r3, [r7, #32]
 800324c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325c:	601a      	str	r2, [r3, #0]
 800325e:	e0de      	b.n	800341e <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8003260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003262:	2b08      	cmp	r3, #8
 8003264:	d02e      	beq.n	80032c4 <I2C_Master_ADDR+0x1b2>
 8003266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003268:	2b20      	cmp	r3, #32
 800326a:	d02b      	beq.n	80032c4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800326c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800326e:	2b12      	cmp	r3, #18
 8003270:	d102      	bne.n	8003278 <I2C_Master_ADDR+0x166>
 8003272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003274:	2b01      	cmp	r3, #1
 8003276:	d125      	bne.n	80032c4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003278:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800327a:	2b04      	cmp	r3, #4
 800327c:	d00e      	beq.n	800329c <I2C_Master_ADDR+0x18a>
 800327e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003280:	2b02      	cmp	r3, #2
 8003282:	d00b      	beq.n	800329c <I2C_Master_ADDR+0x18a>
 8003284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003286:	2b10      	cmp	r3, #16
 8003288:	d008      	beq.n	800329c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	681a      	ldr	r2, [r3, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003298:	601a      	str	r2, [r3, #0]
 800329a:	e007      	b.n	80032ac <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80032aa:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ac:	2300      	movs	r3, #0
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	61fb      	str	r3, [r7, #28]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	699b      	ldr	r3, [r3, #24]
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	69fb      	ldr	r3, [r7, #28]
 80032c2:	e0ac      	b.n	800341e <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032d2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	695b      	ldr	r3, [r3, #20]
 80032de:	61bb      	str	r3, [r7, #24]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	699b      	ldr	r3, [r3, #24]
 80032e6:	61bb      	str	r3, [r7, #24]
 80032e8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032f8:	601a      	str	r2, [r3, #0]
 80032fa:	e090      	b.n	800341e <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b02      	cmp	r3, #2
 8003304:	d158      	bne.n	80033b8 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8003306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003308:	2b04      	cmp	r3, #4
 800330a:	d021      	beq.n	8003350 <I2C_Master_ADDR+0x23e>
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	2b02      	cmp	r3, #2
 8003310:	d01e      	beq.n	8003350 <I2C_Master_ADDR+0x23e>
 8003312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003314:	2b10      	cmp	r3, #16
 8003316:	d01b      	beq.n	8003350 <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003326:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003328:	2300      	movs	r3, #0
 800332a:	617b      	str	r3, [r7, #20]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800334c:	601a      	str	r2, [r3, #0]
 800334e:	e012      	b.n	8003376 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800335e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003360:	2300      	movs	r3, #0
 8003362:	613b      	str	r3, [r7, #16]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	695b      	ldr	r3, [r3, #20]
 800336a:	613b      	str	r3, [r7, #16]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003380:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003384:	d14b      	bne.n	800341e <I2C_Master_ADDR+0x30c>
 8003386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003388:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800338c:	d00b      	beq.n	80033a6 <I2C_Master_ADDR+0x294>
 800338e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003390:	2b01      	cmp	r3, #1
 8003392:	d008      	beq.n	80033a6 <I2C_Master_ADDR+0x294>
 8003394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003396:	2b08      	cmp	r3, #8
 8003398:	d005      	beq.n	80033a6 <I2C_Master_ADDR+0x294>
 800339a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800339c:	2b10      	cmp	r3, #16
 800339e:	d002      	beq.n	80033a6 <I2C_Master_ADDR+0x294>
 80033a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033a2:	2b20      	cmp	r3, #32
 80033a4:	d13b      	bne.n	800341e <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80033b4:	605a      	str	r2, [r3, #4]
 80033b6:	e032      	b.n	800341e <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	681a      	ldr	r2, [r3, #0]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033c6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033d6:	d117      	bne.n	8003408 <I2C_Master_ADDR+0x2f6>
 80033d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80033de:	d00b      	beq.n	80033f8 <I2C_Master_ADDR+0x2e6>
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d008      	beq.n	80033f8 <I2C_Master_ADDR+0x2e6>
 80033e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d005      	beq.n	80033f8 <I2C_Master_ADDR+0x2e6>
 80033ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033ee:	2b10      	cmp	r3, #16
 80033f0:	d002      	beq.n	80033f8 <I2C_Master_ADDR+0x2e6>
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	2b20      	cmp	r3, #32
 80033f6:	d107      	bne.n	8003408 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	685a      	ldr	r2, [r3, #4]
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003406:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003408:	2300      	movs	r3, #0
 800340a:	60fb      	str	r3, [r7, #12]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699b      	ldr	r3, [r3, #24]
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8003424:	e00b      	b.n	800343e <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003426:	2300      	movs	r3, #0
 8003428:	60bb      	str	r3, [r7, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	695b      	ldr	r3, [r3, #20]
 8003430:	60bb      	str	r3, [r7, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	699b      	ldr	r3, [r3, #24]
 8003438:	60bb      	str	r3, [r7, #8]
 800343a:	68bb      	ldr	r3, [r7, #8]
}
 800343c:	e7ff      	b.n	800343e <I2C_Master_ADDR+0x32c>
 800343e:	bf00      	nop
 8003440:	3744      	adds	r7, #68	; 0x44
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003456:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345c:	b29b      	uxth	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d02b      	beq.n	80034ba <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003466:	781a      	ldrb	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	1c5a      	adds	r2, r3, #1
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800347c:	b29b      	uxth	r3, r3
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	d114      	bne.n	80034ba <I2C_SlaveTransmit_TXE+0x72>
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b29      	cmp	r3, #41	; 0x29
 8003494:	d111      	bne.n	80034ba <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2221      	movs	r2, #33	; 0x21
 80034aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2228      	movs	r2, #40	; 0x28
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f7ff f9e3 	bl	8002880 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d011      	beq.n	80034f8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	781a      	ldrb	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	1c5a      	adds	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80034f8:	bf00      	nop
 80034fa:	370c      	adds	r7, #12
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bc80      	pop	{r7}
 8003500:	4770      	bx	lr

08003502 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003502:	b580      	push	{r7, lr}
 8003504:	b084      	sub	sp, #16
 8003506:	af00      	add	r7, sp, #0
 8003508:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003510:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003516:	b29b      	uxth	r3, r3
 8003518:	2b00      	cmp	r3, #0
 800351a:	d02c      	beq.n	8003576 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b29a      	uxth	r2, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003546:	b29b      	uxth	r3, r3
 8003548:	2b00      	cmp	r3, #0
 800354a:	d114      	bne.n	8003576 <I2C_SlaveReceive_RXNE+0x74>
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	2b2a      	cmp	r3, #42	; 0x2a
 8003550:	d111      	bne.n	8003576 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	685a      	ldr	r2, [r3, #4]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003560:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2222      	movs	r2, #34	; 0x22
 8003566:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2228      	movs	r2, #40	; 0x28
 800356c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff f98e 	bl	8002892 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8003576:	bf00      	nop
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800358a:	b29b      	uxth	r3, r3
 800358c:	2b00      	cmp	r3, #0
 800358e:	d012      	beq.n	80035b6 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691a      	ldr	r2, [r3, #16]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359a:	b2d2      	uxtb	r2, r2
 800359c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a2:	1c5a      	adds	r2, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	3b01      	subs	r3, #1
 80035b0:	b29a      	uxth	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bc80      	pop	{r7}
 80035be:	4770      	bx	lr

080035c0 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b084      	sub	sp, #16
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80035ca:	2300      	movs	r3, #0
 80035cc:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80035da:	2b28      	cmp	r3, #40	; 0x28
 80035dc:	d127      	bne.n	800362e <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685a      	ldr	r2, [r3, #4]
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ec:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	089b      	lsrs	r3, r3, #2
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80035fa:	2301      	movs	r3, #1
 80035fc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	09db      	lsrs	r3, r3, #7
 8003602:	f003 0301 	and.w	r3, r3, #1
 8003606:	2b00      	cmp	r3, #0
 8003608:	d103      	bne.n	8003612 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	81bb      	strh	r3, [r7, #12]
 8003610:	e002      	b.n	8003618 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8003620:	89ba      	ldrh	r2, [r7, #12]
 8003622:	7bfb      	ldrb	r3, [r7, #15]
 8003624:	4619      	mov	r1, r3
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff f93c 	bl	80028a4 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800362c:	e00e      	b.n	800364c <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800362e:	2300      	movs	r3, #0
 8003630:	60bb      	str	r3, [r7, #8]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695b      	ldr	r3, [r3, #20]
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	699b      	ldr	r3, [r3, #24]
 8003640:	60bb      	str	r3, [r7, #8]
 8003642:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003662:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685a      	ldr	r2, [r3, #4]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003672:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8003674:	2300      	movs	r3, #0
 8003676:	60bb      	str	r3, [r7, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	60bb      	str	r3, [r7, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f042 0201 	orr.w	r2, r2, #1
 800368e:	601a      	str	r2, [r3, #0]
 8003690:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681a      	ldr	r2, [r3, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036a0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b0:	d172      	bne.n	8003798 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80036b2:	7bfb      	ldrb	r3, [r7, #15]
 80036b4:	2b22      	cmp	r3, #34	; 0x22
 80036b6:	d002      	beq.n	80036be <I2C_Slave_STOPF+0x6a>
 80036b8:	7bfb      	ldrb	r3, [r7, #15]
 80036ba:	2b2a      	cmp	r3, #42	; 0x2a
 80036bc:	d135      	bne.n	800372a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	b29a      	uxth	r2, r3
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d005      	beq.n	80036e2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036da:	f043 0204 	orr.w	r2, r3, #4
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	685a      	ldr	r2, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036f6:	4618      	mov	r0, r3
 80036f8:	f7fd fffe 	bl	80016f8 <HAL_DMA_GetState>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d049      	beq.n	8003796 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	4a69      	ldr	r2, [pc, #420]	; (80038ac <I2C_Slave_STOPF+0x258>)
 8003708:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800370e:	4618      	mov	r0, r3
 8003710:	f7fd fe74 	bl	80013fc <HAL_DMA_Abort_IT>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d03d      	beq.n	8003796 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800371e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003724:	4610      	mov	r0, r2
 8003726:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003728:	e035      	b.n	8003796 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	b29a      	uxth	r2, r3
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	d005      	beq.n	800374e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003746:	f043 0204 	orr.w	r2, r3, #4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	685a      	ldr	r2, [r3, #4]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800375c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003762:	4618      	mov	r0, r3
 8003764:	f7fd ffc8 	bl	80016f8 <HAL_DMA_GetState>
 8003768:	4603      	mov	r3, r0
 800376a:	2b01      	cmp	r3, #1
 800376c:	d014      	beq.n	8003798 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003772:	4a4e      	ldr	r2, [pc, #312]	; (80038ac <I2C_Slave_STOPF+0x258>)
 8003774:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377a:	4618      	mov	r0, r3
 800377c:	f7fd fe3e 	bl	80013fc <HAL_DMA_Abort_IT>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d008      	beq.n	8003798 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003790:	4610      	mov	r0, r2
 8003792:	4798      	blx	r3
 8003794:	e000      	b.n	8003798 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003796:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800379c:	b29b      	uxth	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d03e      	beq.n	8003820 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695b      	ldr	r3, [r3, #20]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d112      	bne.n	80037d6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c2:	1c5a      	adds	r2, r3, #1
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	3b01      	subs	r3, #1
 80037d0:	b29a      	uxth	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	695b      	ldr	r3, [r3, #20]
 80037dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037e0:	2b40      	cmp	r3, #64	; 0x40
 80037e2:	d112      	bne.n	800380a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	691a      	ldr	r2, [r3, #16]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	b2d2      	uxtb	r2, r2
 80037f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f6:	1c5a      	adds	r2, r3, #1
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003800:	b29b      	uxth	r3, r3
 8003802:	3b01      	subs	r3, #1
 8003804:	b29a      	uxth	r2, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003818:	f043 0204 	orr.w	r2, r3, #4
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 f8b7 	bl	800399c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800382e:	e039      	b.n	80038a4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	2b2a      	cmp	r3, #42	; 0x2a
 8003834:	d109      	bne.n	800384a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2228      	movs	r2, #40	; 0x28
 8003840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff f824 	bl	8002892 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b28      	cmp	r3, #40	; 0x28
 8003854:	d111      	bne.n	800387a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	4a15      	ldr	r2, [pc, #84]	; (80038b0 <I2C_Slave_STOPF+0x25c>)
 800385a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2220      	movs	r2, #32
 8003866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2200      	movs	r2, #0
 800386e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f7ff f823 	bl	80028be <HAL_I2C_ListenCpltCallback>
}
 8003878:	e014      	b.n	80038a4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	2b22      	cmp	r3, #34	; 0x22
 8003880:	d002      	beq.n	8003888 <I2C_Slave_STOPF+0x234>
 8003882:	7bfb      	ldrb	r3, [r7, #15]
 8003884:	2b22      	cmp	r3, #34	; 0x22
 8003886:	d10d      	bne.n	80038a4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2220      	movs	r2, #32
 8003892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2200      	movs	r2, #0
 800389a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7fe fff7 	bl	8002892 <HAL_I2C_SlaveRxCpltCallback>
}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	08003efd 	.word	0x08003efd
 80038b0:	ffff0000 	.word	0xffff0000

080038b4 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	2b08      	cmp	r3, #8
 80038ce:	d002      	beq.n	80038d6 <I2C_Slave_AF+0x22>
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2b20      	cmp	r3, #32
 80038d4:	d129      	bne.n	800392a <I2C_Slave_AF+0x76>
 80038d6:	7bfb      	ldrb	r3, [r7, #15]
 80038d8:	2b28      	cmp	r3, #40	; 0x28
 80038da:	d126      	bne.n	800392a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a2e      	ldr	r2, [pc, #184]	; (8003998 <I2C_Slave_AF+0xe4>)
 80038e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	685a      	ldr	r2, [r3, #4]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80038f0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038fa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fe ffcb 	bl	80028be <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8003928:	e031      	b.n	800398e <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	2b21      	cmp	r3, #33	; 0x21
 800392e:	d129      	bne.n	8003984 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	4a19      	ldr	r2, [pc, #100]	; (8003998 <I2C_Slave_AF+0xe4>)
 8003934:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2221      	movs	r2, #33	; 0x21
 800393a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800395a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003964:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003974:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8003976:	6878      	ldr	r0, [r7, #4]
 8003978:	f7fe f9da 	bl	8001d30 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7fe ff7f 	bl	8002880 <HAL_I2C_SlaveTxCpltCallback>
}
 8003982:	e004      	b.n	800398e <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800398c:	615a      	str	r2, [r3, #20]
}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	ffff0000 	.word	0xffff0000

0800399c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039aa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80039b4:	7bbb      	ldrb	r3, [r7, #14]
 80039b6:	2b10      	cmp	r3, #16
 80039b8:	d002      	beq.n	80039c0 <I2C_ITError+0x24>
 80039ba:	7bbb      	ldrb	r3, [r7, #14]
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	d10a      	bne.n	80039d6 <I2C_ITError+0x3a>
 80039c0:	7bfb      	ldrb	r3, [r7, #15]
 80039c2:	2b22      	cmp	r3, #34	; 0x22
 80039c4:	d107      	bne.n	80039d6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039d4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039dc:	2b28      	cmp	r3, #40	; 0x28
 80039de:	d107      	bne.n	80039f0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2228      	movs	r2, #40	; 0x28
 80039ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80039ee:	e015      	b.n	8003a1c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80039fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039fe:	d00a      	beq.n	8003a16 <I2C_ITError+0x7a>
 8003a00:	7bfb      	ldrb	r3, [r7, #15]
 8003a02:	2b60      	cmp	r3, #96	; 0x60
 8003a04:	d007      	beq.n	8003a16 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a2a:	d162      	bne.n	8003af2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	685a      	ldr	r2, [r3, #4]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a3a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a40:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003a44:	b2db      	uxtb	r3, r3
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d020      	beq.n	8003a8c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a4e:	4a6a      	ldr	r2, [pc, #424]	; (8003bf8 <I2C_ITError+0x25c>)
 8003a50:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fd fcd0 	bl	80013fc <HAL_DMA_Abort_IT>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f000 8089 	beq.w	8003b76 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681a      	ldr	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f022 0201 	bic.w	r2, r2, #1
 8003a72:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2220      	movs	r2, #32
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a82:	687a      	ldr	r2, [r7, #4]
 8003a84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003a86:	4610      	mov	r0, r2
 8003a88:	4798      	blx	r3
 8003a8a:	e074      	b.n	8003b76 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	4a59      	ldr	r2, [pc, #356]	; (8003bf8 <I2C_ITError+0x25c>)
 8003a92:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fd fcaf 	bl	80013fc <HAL_DMA_Abort_IT>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d068      	beq.n	8003b76 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d10b      	bne.n	8003aca <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	691a      	ldr	r2, [r3, #16]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac4:	1c5a      	adds	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 0201 	bic.w	r2, r2, #1
 8003ad8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2220      	movs	r2, #32
 8003ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003aec:	4610      	mov	r0, r2
 8003aee:	4798      	blx	r3
 8003af0:	e041      	b.n	8003b76 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003af8:	b2db      	uxtb	r3, r3
 8003afa:	2b60      	cmp	r3, #96	; 0x60
 8003afc:	d125      	bne.n	8003b4a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b16:	2b40      	cmp	r3, #64	; 0x40
 8003b18:	d10b      	bne.n	8003b32 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	691a      	ldr	r2, [r3, #16]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	b2d2      	uxtb	r2, r2
 8003b26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	1c5a      	adds	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0201 	bic.w	r2, r2, #1
 8003b40:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7fe fedf 	bl	8002906 <HAL_I2C_AbortCpltCallback>
 8003b48:	e015      	b.n	8003b76 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b54:	2b40      	cmp	r3, #64	; 0x40
 8003b56:	d10b      	bne.n	8003b70 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	691a      	ldr	r2, [r3, #16]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b62:	b2d2      	uxtb	r2, r2
 8003b64:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f7fe febf 	bl	80028f4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b7a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	f003 0301 	and.w	r3, r3, #1
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d10e      	bne.n	8003ba4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d007      	beq.n	8003bb4 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	685a      	ldr	r2, [r3, #4]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bb2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bc0:	f003 0304 	and.w	r3, r3, #4
 8003bc4:	2b04      	cmp	r3, #4
 8003bc6:	d113      	bne.n	8003bf0 <I2C_ITError+0x254>
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
 8003bca:	2b28      	cmp	r3, #40	; 0x28
 8003bcc:	d110      	bne.n	8003bf0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <I2C_ITError+0x260>)
 8003bd2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2220      	movs	r2, #32
 8003bde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fe fe67 	bl	80028be <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003bf0:	bf00      	nop
 8003bf2:	3710      	adds	r7, #16
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}
 8003bf8:	08003efd 	.word	0x08003efd
 8003bfc:	ffff0000 	.word	0xffff0000

08003c00 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	4608      	mov	r0, r1
 8003c0a:	4611      	mov	r1, r2
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4603      	mov	r3, r0
 8003c10:	817b      	strh	r3, [r7, #10]
 8003c12:	460b      	mov	r3, r1
 8003c14:	813b      	strh	r3, [r7, #8]
 8003c16:	4613      	mov	r3, r2
 8003c18:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c28:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c2c:	9300      	str	r3, [sp, #0]
 8003c2e:	6a3b      	ldr	r3, [r7, #32]
 8003c30:	2200      	movs	r2, #0
 8003c32:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c36:	68f8      	ldr	r0, [r7, #12]
 8003c38:	f000 fa08 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00d      	beq.n	8003c5e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c50:	d103      	bne.n	8003c5a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c58:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c5a:	2303      	movs	r3, #3
 8003c5c:	e05f      	b.n	8003d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c5e:	897b      	ldrh	r3, [r7, #10]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	461a      	mov	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c6c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	6a3a      	ldr	r2, [r7, #32]
 8003c72:	492d      	ldr	r1, [pc, #180]	; (8003d28 <I2C_RequestMemoryWrite+0x128>)
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 fa63 	bl	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	e04c      	b.n	8003d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c84:	2300      	movs	r3, #0
 8003c86:	617b      	str	r3, [r7, #20]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	695b      	ldr	r3, [r3, #20]
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	699b      	ldr	r3, [r3, #24]
 8003c96:	617b      	str	r3, [r7, #20]
 8003c98:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c9c:	6a39      	ldr	r1, [r7, #32]
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 faee 	bl	8004280 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00d      	beq.n	8003cc6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	2b04      	cmp	r3, #4
 8003cb0:	d107      	bne.n	8003cc2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cc0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e02b      	b.n	8003d1e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003cc6:	88fb      	ldrh	r3, [r7, #6]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d105      	bne.n	8003cd8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ccc:	893b      	ldrh	r3, [r7, #8]
 8003cce:	b2da      	uxtb	r2, r3
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	611a      	str	r2, [r3, #16]
 8003cd6:	e021      	b.n	8003d1c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003cd8:	893b      	ldrh	r3, [r7, #8]
 8003cda:	0a1b      	lsrs	r3, r3, #8
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	b2da      	uxtb	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ce8:	6a39      	ldr	r1, [r7, #32]
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 fac8 	bl	8004280 <I2C_WaitOnTXEFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00d      	beq.n	8003d12 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	2b04      	cmp	r3, #4
 8003cfc:	d107      	bne.n	8003d0e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d0c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e005      	b.n	8003d1e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003d12:	893b      	ldrh	r3, [r7, #8]
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	00010002 	.word	0x00010002

08003d2c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b088      	sub	sp, #32
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	4608      	mov	r0, r1
 8003d36:	4611      	mov	r1, r2
 8003d38:	461a      	mov	r2, r3
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	817b      	strh	r3, [r7, #10]
 8003d3e:	460b      	mov	r3, r1
 8003d40:	813b      	strh	r3, [r7, #8]
 8003d42:	4613      	mov	r3, r2
 8003d44:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d54:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681a      	ldr	r2, [r3, #0]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003d72:	68f8      	ldr	r0, [r7, #12]
 8003d74:	f000 f96a 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00d      	beq.n	8003d9a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d8c:	d103      	bne.n	8003d96 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d94:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e0aa      	b.n	8003ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003d9a:	897b      	ldrh	r3, [r7, #10]
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003da8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	6a3a      	ldr	r2, [r7, #32]
 8003dae:	4952      	ldr	r1, [pc, #328]	; (8003ef8 <I2C_RequestMemoryRead+0x1cc>)
 8003db0:	68f8      	ldr	r0, [r7, #12]
 8003db2:	f000 f9c5 	bl	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d001      	beq.n	8003dc0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e097      	b.n	8003ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	617b      	str	r3, [r7, #20]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	617b      	str	r3, [r7, #20]
 8003dd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd8:	6a39      	ldr	r1, [r7, #32]
 8003dda:	68f8      	ldr	r0, [r7, #12]
 8003ddc:	f000 fa50 	bl	8004280 <I2C_WaitOnTXEFlagUntilTimeout>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00d      	beq.n	8003e02 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	2b04      	cmp	r3, #4
 8003dec:	d107      	bne.n	8003dfe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e076      	b.n	8003ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003e02:	88fb      	ldrh	r3, [r7, #6]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d105      	bne.n	8003e14 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e08:	893b      	ldrh	r3, [r7, #8]
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	611a      	str	r2, [r3, #16]
 8003e12:	e021      	b.n	8003e58 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003e14:	893b      	ldrh	r3, [r7, #8]
 8003e16:	0a1b      	lsrs	r3, r3, #8
 8003e18:	b29b      	uxth	r3, r3
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e22:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e24:	6a39      	ldr	r1, [r7, #32]
 8003e26:	68f8      	ldr	r0, [r7, #12]
 8003e28:	f000 fa2a 	bl	8004280 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00d      	beq.n	8003e4e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d107      	bne.n	8003e4a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e48:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e050      	b.n	8003ef0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003e4e:	893b      	ldrh	r3, [r7, #8]
 8003e50:	b2da      	uxtb	r2, r3
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e5a:	6a39      	ldr	r1, [r7, #32]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 fa0f 	bl	8004280 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00d      	beq.n	8003e84 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d107      	bne.n	8003e80 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e7e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	e035      	b.n	8003ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e92:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	6a3b      	ldr	r3, [r7, #32]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003ea0:	68f8      	ldr	r0, [r7, #12]
 8003ea2:	f000 f8d3 	bl	800404c <I2C_WaitOnFlagUntilTimeout>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d00d      	beq.n	8003ec8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eba:	d103      	bne.n	8003ec4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ec2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003ec4:	2303      	movs	r3, #3
 8003ec6:	e013      	b.n	8003ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003ec8:	897b      	ldrh	r3, [r7, #10]
 8003eca:	b2db      	uxtb	r3, r3
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	b2da      	uxtb	r2, r3
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eda:	6a3a      	ldr	r2, [r7, #32]
 8003edc:	4906      	ldr	r1, [pc, #24]	; (8003ef8 <I2C_RequestMemoryRead+0x1cc>)
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 f92e 	bl	8004140 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	e000      	b.n	8003ef0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003eee:	2300      	movs	r3, #0
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	00010002 	.word	0x00010002

08003efc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b086      	sub	sp, #24
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f04:	2300      	movs	r3, #0
 8003f06:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f14:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003f16:	4b4b      	ldr	r3, [pc, #300]	; (8004044 <I2C_DMAAbort+0x148>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	08db      	lsrs	r3, r3, #3
 8003f1c:	4a4a      	ldr	r2, [pc, #296]	; (8004048 <I2C_DMAAbort+0x14c>)
 8003f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f22:	0a1a      	lsrs	r2, r3, #8
 8003f24:	4613      	mov	r3, r2
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	00da      	lsls	r2, r3, #3
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d106      	bne.n	8003f44 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f043 0220 	orr.w	r2, r3, #32
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8003f42:	e00a      	b.n	8003f5a <I2C_DMAAbort+0x5e>
    }
    count--;
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	3b01      	subs	r3, #1
 8003f48:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f58:	d0ea      	beq.n	8003f30 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8003f62:	697b      	ldr	r3, [r7, #20]
 8003f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f66:	2200      	movs	r2, #0
 8003f68:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f76:	2200      	movs	r2, #0
 8003f78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f7a:	697b      	ldr	r3, [r7, #20]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f88:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003f90:	697b      	ldr	r3, [r7, #20]
 8003f92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d003      	beq.n	8003fa0 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d003      	beq.n	8003fb0 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fac:	2200      	movs	r2, #0
 8003fae:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f022 0201 	bic.w	r2, r2, #1
 8003fbe:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b60      	cmp	r3, #96	; 0x60
 8003fca:	d10e      	bne.n	8003fea <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2220      	movs	r2, #32
 8003fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003fd4:	697b      	ldr	r3, [r7, #20]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003fe2:	6978      	ldr	r0, [r7, #20]
 8003fe4:	f7fe fc8f 	bl	8002906 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003fe8:	e027      	b.n	800403a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003fea:	7cfb      	ldrb	r3, [r7, #19]
 8003fec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003ff0:	2b28      	cmp	r3, #40	; 0x28
 8003ff2:	d117      	bne.n	8004024 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f042 0201 	orr.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004004:	697b      	ldr	r3, [r7, #20]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004012:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800401a:	697b      	ldr	r3, [r7, #20]
 800401c:	2228      	movs	r2, #40	; 0x28
 800401e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004022:	e007      	b.n	8004034 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	2200      	movs	r2, #0
 8004030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004034:	6978      	ldr	r0, [r7, #20]
 8004036:	f7fe fc5d 	bl	80028f4 <HAL_I2C_ErrorCallback>
}
 800403a:	bf00      	nop
 800403c:	3718      	adds	r7, #24
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	bf00      	nop
 8004044:	200003e8 	.word	0x200003e8
 8004048:	14f8b589 	.word	0x14f8b589

0800404c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800405c:	e048      	b.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d044      	beq.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004066:	f7fc ff97 	bl	8000f98 <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	683a      	ldr	r2, [r7, #0]
 8004072:	429a      	cmp	r2, r3
 8004074:	d302      	bcc.n	800407c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d139      	bne.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	0c1b      	lsrs	r3, r3, #16
 8004080:	b2db      	uxtb	r3, r3
 8004082:	2b01      	cmp	r3, #1
 8004084:	d10d      	bne.n	80040a2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	43da      	mvns	r2, r3
 800408e:	68bb      	ldr	r3, [r7, #8]
 8004090:	4013      	ands	r3, r2
 8004092:	b29b      	uxth	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	bf0c      	ite	eq
 8004098:	2301      	moveq	r3, #1
 800409a:	2300      	movne	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
 80040a0:	e00c      	b.n	80040bc <I2C_WaitOnFlagUntilTimeout+0x70>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	43da      	mvns	r2, r3
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	4013      	ands	r3, r2
 80040ae:	b29b      	uxth	r3, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	461a      	mov	r2, r3
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	429a      	cmp	r2, r3
 80040c0:	d116      	bne.n	80040f0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	2200      	movs	r2, #0
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2220      	movs	r2, #32
 80040cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040dc:	f043 0220 	orr.w	r2, r3, #32
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e023      	b.n	8004138 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	0c1b      	lsrs	r3, r3, #16
 80040f4:	b2db      	uxtb	r3, r3
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	d10d      	bne.n	8004116 <I2C_WaitOnFlagUntilTimeout+0xca>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	43da      	mvns	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4013      	ands	r3, r2
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf0c      	ite	eq
 800410c:	2301      	moveq	r3, #1
 800410e:	2300      	movne	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	461a      	mov	r2, r3
 8004114:	e00c      	b.n	8004130 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	43da      	mvns	r2, r3
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	4013      	ands	r3, r2
 8004122:	b29b      	uxth	r3, r3
 8004124:	2b00      	cmp	r3, #0
 8004126:	bf0c      	ite	eq
 8004128:	2301      	moveq	r3, #1
 800412a:	2300      	movne	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	461a      	mov	r2, r3
 8004130:	79fb      	ldrb	r3, [r7, #7]
 8004132:	429a      	cmp	r2, r3
 8004134:	d093      	beq.n	800405e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004136:	2300      	movs	r3, #0
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b084      	sub	sp, #16
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800414e:	e071      	b.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800415a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800415e:	d123      	bne.n	80041a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004178:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2220      	movs	r2, #32
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004194:	f043 0204 	orr.w	r2, r3, #4
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2200      	movs	r2, #0
 80041a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e067      	b.n	8004278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ae:	d041      	beq.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b0:	f7fc fef2 	bl	8000f98 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	683b      	ldr	r3, [r7, #0]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d302      	bcc.n	80041c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d136      	bne.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	0c1b      	lsrs	r3, r3, #16
 80041ca:	b2db      	uxtb	r3, r3
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d10c      	bne.n	80041ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	43da      	mvns	r2, r3
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4013      	ands	r3, r2
 80041dc:	b29b      	uxth	r3, r3
 80041de:	2b00      	cmp	r3, #0
 80041e0:	bf14      	ite	ne
 80041e2:	2301      	movne	r3, #1
 80041e4:	2300      	moveq	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	e00b      	b.n	8004202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	43da      	mvns	r2, r3
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	4013      	ands	r3, r2
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	bf14      	ite	ne
 80041fc:	2301      	movne	r3, #1
 80041fe:	2300      	moveq	r3, #0
 8004200:	b2db      	uxtb	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2220      	movs	r2, #32
 8004210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	f043 0220 	orr.w	r2, r3, #32
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2200      	movs	r2, #0
 800422c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004230:	2301      	movs	r3, #1
 8004232:	e021      	b.n	8004278 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	0c1b      	lsrs	r3, r3, #16
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b01      	cmp	r3, #1
 800423c:	d10c      	bne.n	8004258 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	43da      	mvns	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4013      	ands	r3, r2
 800424a:	b29b      	uxth	r3, r3
 800424c:	2b00      	cmp	r3, #0
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
 8004256:	e00b      	b.n	8004270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	43da      	mvns	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4013      	ands	r3, r2
 8004264:	b29b      	uxth	r3, r3
 8004266:	2b00      	cmp	r3, #0
 8004268:	bf14      	ite	ne
 800426a:	2301      	movne	r3, #1
 800426c:	2300      	moveq	r3, #0
 800426e:	b2db      	uxtb	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	f47f af6d 	bne.w	8004150 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800428c:	e034      	b.n	80042f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800428e:	68f8      	ldr	r0, [r7, #12]
 8004290:	f000 f915 	bl	80044be <I2C_IsAcknowledgeFailed>
 8004294:	4603      	mov	r3, r0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d001      	beq.n	800429e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e034      	b.n	8004308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a4:	d028      	beq.n	80042f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a6:	f7fc fe77 	bl	8000f98 <HAL_GetTick>
 80042aa:	4602      	mov	r2, r0
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	1ad3      	subs	r3, r2, r3
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d302      	bcc.n	80042bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d11d      	bne.n	80042f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c6:	2b80      	cmp	r3, #128	; 0x80
 80042c8:	d016      	beq.n	80042f8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e4:	f043 0220 	orr.w	r2, r3, #32
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e007      	b.n	8004308 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	695b      	ldr	r3, [r3, #20]
 80042fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004302:	2b80      	cmp	r3, #128	; 0x80
 8004304:	d1c3      	bne.n	800428e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3710      	adds	r7, #16
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b084      	sub	sp, #16
 8004314:	af00      	add	r7, sp, #0
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	60b9      	str	r1, [r7, #8]
 800431a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800431c:	e034      	b.n	8004388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f8cd 	bl	80044be <I2C_IsAcknowledgeFailed>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d001      	beq.n	800432e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e034      	b.n	8004398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d028      	beq.n	8004388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004336:	f7fc fe2f 	bl	8000f98 <HAL_GetTick>
 800433a:	4602      	mov	r2, r0
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	429a      	cmp	r2, r3
 8004344:	d302      	bcc.n	800434c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004346:	68bb      	ldr	r3, [r7, #8]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d11d      	bne.n	8004388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	f003 0304 	and.w	r3, r3, #4
 8004356:	2b04      	cmp	r3, #4
 8004358:	d016      	beq.n	8004388 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	2200      	movs	r2, #0
 800435e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004374:	f043 0220 	orr.w	r2, r3, #32
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004384:	2301      	movs	r3, #1
 8004386:	e007      	b.n	8004398 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	695b      	ldr	r3, [r3, #20]
 800438e:	f003 0304 	and.w	r3, r3, #4
 8004392:	2b04      	cmp	r3, #4
 8004394:	d1c3      	bne.n	800431e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3710      	adds	r7, #16
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b085      	sub	sp, #20
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80043a8:	2300      	movs	r3, #0
 80043aa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80043ac:	4b13      	ldr	r3, [pc, #76]	; (80043fc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	08db      	lsrs	r3, r3, #3
 80043b2:	4a13      	ldr	r2, [pc, #76]	; (8004400 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80043b4:	fba2 2303 	umull	r2, r3, r2, r3
 80043b8:	0a1a      	lsrs	r2, r3, #8
 80043ba:	4613      	mov	r3, r2
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	4413      	add	r3, r2
 80043c0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d107      	bne.n	80043de <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	f043 0220 	orr.w	r2, r3, #32
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e008      	b.n	80043f0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80043e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80043ec:	d0e9      	beq.n	80043c2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bc80      	pop	{r7}
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	200003e8 	.word	0x200003e8
 8004400:	14f8b589 	.word	0x14f8b589

08004404 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b084      	sub	sp, #16
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004410:	e049      	b.n	80044a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	f003 0310 	and.w	r3, r3, #16
 800441c:	2b10      	cmp	r3, #16
 800441e:	d119      	bne.n	8004454 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f06f 0210 	mvn.w	r2, #16
 8004428:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2200      	movs	r2, #0
 800442e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2200      	movs	r2, #0
 800444c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e030      	b.n	80044b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004454:	f7fc fda0 	bl	8000f98 <HAL_GetTick>
 8004458:	4602      	mov	r2, r0
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	1ad3      	subs	r3, r2, r3
 800445e:	68ba      	ldr	r2, [r7, #8]
 8004460:	429a      	cmp	r2, r3
 8004462:	d302      	bcc.n	800446a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d11d      	bne.n	80044a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004474:	2b40      	cmp	r3, #64	; 0x40
 8004476:	d016      	beq.n	80044a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2220      	movs	r2, #32
 8004482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2200      	movs	r2, #0
 800448a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f043 0220 	orr.w	r2, r3, #32
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e007      	b.n	80044b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	695b      	ldr	r3, [r3, #20]
 80044ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044b0:	2b40      	cmp	r3, #64	; 0x40
 80044b2:	d1ae      	bne.n	8004412 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3710      	adds	r7, #16
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bd80      	pop	{r7, pc}

080044be <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044be:	b480      	push	{r7}
 80044c0:	b083      	sub	sp, #12
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044d4:	d11b      	bne.n	800450e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044de:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2220      	movs	r2, #32
 80044ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	f043 0204 	orr.w	r2, r3, #4
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800451a:	b480      	push	{r7}
 800451c:	b083      	sub	sp, #12
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004526:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800452a:	d103      	bne.n	8004534 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004532:	e007      	b.n	8004544 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004538:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800453c:	d102      	bne.n	8004544 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2208      	movs	r2, #8
 8004542:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	bc80      	pop	{r7}
 800454c:	4770      	bx	lr
	...

08004550 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e272      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8087 	beq.w	800467e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004570:	4b92      	ldr	r3, [pc, #584]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 030c 	and.w	r3, r3, #12
 8004578:	2b04      	cmp	r3, #4
 800457a:	d00c      	beq.n	8004596 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800457c:	4b8f      	ldr	r3, [pc, #572]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f003 030c 	and.w	r3, r3, #12
 8004584:	2b08      	cmp	r3, #8
 8004586:	d112      	bne.n	80045ae <HAL_RCC_OscConfig+0x5e>
 8004588:	4b8c      	ldr	r3, [pc, #560]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004594:	d10b      	bne.n	80045ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004596:	4b89      	ldr	r3, [pc, #548]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d06c      	beq.n	800467c <HAL_RCC_OscConfig+0x12c>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d168      	bne.n	800467c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e24c      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b6:	d106      	bne.n	80045c6 <HAL_RCC_OscConfig+0x76>
 80045b8:	4b80      	ldr	r3, [pc, #512]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a7f      	ldr	r2, [pc, #508]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045c2:	6013      	str	r3, [r2, #0]
 80045c4:	e02e      	b.n	8004624 <HAL_RCC_OscConfig+0xd4>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x98>
 80045ce:	4b7b      	ldr	r3, [pc, #492]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a7a      	ldr	r2, [pc, #488]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4b78      	ldr	r3, [pc, #480]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a77      	ldr	r2, [pc, #476]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e01d      	b.n	8004624 <HAL_RCC_OscConfig+0xd4>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045f0:	d10c      	bne.n	800460c <HAL_RCC_OscConfig+0xbc>
 80045f2:	4b72      	ldr	r3, [pc, #456]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a71      	ldr	r2, [pc, #452]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80045f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045fc:	6013      	str	r3, [r2, #0]
 80045fe:	4b6f      	ldr	r3, [pc, #444]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	4a6e      	ldr	r2, [pc, #440]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004608:	6013      	str	r3, [r2, #0]
 800460a:	e00b      	b.n	8004624 <HAL_RCC_OscConfig+0xd4>
 800460c:	4b6b      	ldr	r3, [pc, #428]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a6a      	ldr	r2, [pc, #424]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004612:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004616:	6013      	str	r3, [r2, #0]
 8004618:	4b68      	ldr	r3, [pc, #416]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	4a67      	ldr	r2, [pc, #412]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800461e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004622:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	685b      	ldr	r3, [r3, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d013      	beq.n	8004654 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fc fcb4 	bl	8000f98 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004634:	f7fc fcb0 	bl	8000f98 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	; 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e200      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004646:	4b5d      	ldr	r3, [pc, #372]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d0f0      	beq.n	8004634 <HAL_RCC_OscConfig+0xe4>
 8004652:	e014      	b.n	800467e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004654:	f7fc fca0 	bl	8000f98 <HAL_GetTick>
 8004658:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800465a:	e008      	b.n	800466e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800465c:	f7fc fc9c 	bl	8000f98 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	2b64      	cmp	r3, #100	; 0x64
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e1ec      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800466e:	4b53      	ldr	r3, [pc, #332]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004676:	2b00      	cmp	r3, #0
 8004678:	d1f0      	bne.n	800465c <HAL_RCC_OscConfig+0x10c>
 800467a:	e000      	b.n	800467e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800467c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	2b00      	cmp	r3, #0
 8004688:	d063      	beq.n	8004752 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800468a:	4b4c      	ldr	r3, [pc, #304]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	f003 030c 	and.w	r3, r3, #12
 8004692:	2b00      	cmp	r3, #0
 8004694:	d00b      	beq.n	80046ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004696:	4b49      	ldr	r3, [pc, #292]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f003 030c 	and.w	r3, r3, #12
 800469e:	2b08      	cmp	r3, #8
 80046a0:	d11c      	bne.n	80046dc <HAL_RCC_OscConfig+0x18c>
 80046a2:	4b46      	ldr	r3, [pc, #280]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d116      	bne.n	80046dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046ae:	4b43      	ldr	r3, [pc, #268]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0302 	and.w	r3, r3, #2
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d005      	beq.n	80046c6 <HAL_RCC_OscConfig+0x176>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d001      	beq.n	80046c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e1c0      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c6:	4b3d      	ldr	r3, [pc, #244]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	00db      	lsls	r3, r3, #3
 80046d4:	4939      	ldr	r1, [pc, #228]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046da:	e03a      	b.n	8004752 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d020      	beq.n	8004726 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046e4:	4b36      	ldr	r3, [pc, #216]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 80046e6:	2201      	movs	r2, #1
 80046e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046ea:	f7fc fc55 	bl	8000f98 <HAL_GetTick>
 80046ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046f0:	e008      	b.n	8004704 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046f2:	f7fc fc51 	bl	8000f98 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	d901      	bls.n	8004704 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004700:	2303      	movs	r3, #3
 8004702:	e1a1      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004704:	4b2d      	ldr	r3, [pc, #180]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0302 	and.w	r3, r3, #2
 800470c:	2b00      	cmp	r3, #0
 800470e:	d0f0      	beq.n	80046f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004710:	4b2a      	ldr	r3, [pc, #168]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4927      	ldr	r1, [pc, #156]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004720:	4313      	orrs	r3, r2
 8004722:	600b      	str	r3, [r1, #0]
 8004724:	e015      	b.n	8004752 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004726:	4b26      	ldr	r3, [pc, #152]	; (80047c0 <HAL_RCC_OscConfig+0x270>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800472c:	f7fc fc34 	bl	8000f98 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004732:	e008      	b.n	8004746 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004734:	f7fc fc30 	bl	8000f98 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d901      	bls.n	8004746 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e180      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004746:	4b1d      	ldr	r3, [pc, #116]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0302 	and.w	r3, r3, #2
 800474e:	2b00      	cmp	r3, #0
 8004750:	d1f0      	bne.n	8004734 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f003 0308 	and.w	r3, r3, #8
 800475a:	2b00      	cmp	r3, #0
 800475c:	d03a      	beq.n	80047d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d019      	beq.n	800479a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004766:	4b17      	ldr	r3, [pc, #92]	; (80047c4 <HAL_RCC_OscConfig+0x274>)
 8004768:	2201      	movs	r2, #1
 800476a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800476c:	f7fc fc14 	bl	8000f98 <HAL_GetTick>
 8004770:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004772:	e008      	b.n	8004786 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004774:	f7fc fc10 	bl	8000f98 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b02      	cmp	r3, #2
 8004780:	d901      	bls.n	8004786 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004782:	2303      	movs	r3, #3
 8004784:	e160      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004786:	4b0d      	ldr	r3, [pc, #52]	; (80047bc <HAL_RCC_OscConfig+0x26c>)
 8004788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800478a:	f003 0302 	and.w	r3, r3, #2
 800478e:	2b00      	cmp	r3, #0
 8004790:	d0f0      	beq.n	8004774 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004792:	2001      	movs	r0, #1
 8004794:	f000 face 	bl	8004d34 <RCC_Delay>
 8004798:	e01c      	b.n	80047d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800479a:	4b0a      	ldr	r3, [pc, #40]	; (80047c4 <HAL_RCC_OscConfig+0x274>)
 800479c:	2200      	movs	r2, #0
 800479e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a0:	f7fc fbfa 	bl	8000f98 <HAL_GetTick>
 80047a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047a6:	e00f      	b.n	80047c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80047a8:	f7fc fbf6 	bl	8000f98 <HAL_GetTick>
 80047ac:	4602      	mov	r2, r0
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	1ad3      	subs	r3, r2, r3
 80047b2:	2b02      	cmp	r3, #2
 80047b4:	d908      	bls.n	80047c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80047b6:	2303      	movs	r3, #3
 80047b8:	e146      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000
 80047c0:	42420000 	.word	0x42420000
 80047c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80047c8:	4b92      	ldr	r3, [pc, #584]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f003 0302 	and.w	r3, r3, #2
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d1e9      	bne.n	80047a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f003 0304 	and.w	r3, r3, #4
 80047dc:	2b00      	cmp	r3, #0
 80047de:	f000 80a6 	beq.w	800492e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047e2:	2300      	movs	r3, #0
 80047e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047e6:	4b8b      	ldr	r3, [pc, #556]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047e8:	69db      	ldr	r3, [r3, #28]
 80047ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10d      	bne.n	800480e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047f2:	4b88      	ldr	r3, [pc, #544]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	4a87      	ldr	r2, [pc, #540]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fc:	61d3      	str	r3, [r2, #28]
 80047fe:	4b85      	ldr	r3, [pc, #532]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004806:	60bb      	str	r3, [r7, #8]
 8004808:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800480a:	2301      	movs	r3, #1
 800480c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800480e:	4b82      	ldr	r3, [pc, #520]	; (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004816:	2b00      	cmp	r3, #0
 8004818:	d118      	bne.n	800484c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800481a:	4b7f      	ldr	r3, [pc, #508]	; (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a7e      	ldr	r2, [pc, #504]	; (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 8004820:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004824:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004826:	f7fc fbb7 	bl	8000f98 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800482e:	f7fc fbb3 	bl	8000f98 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b64      	cmp	r3, #100	; 0x64
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e103      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004840:	4b75      	ldr	r3, [pc, #468]	; (8004a18 <HAL_RCC_OscConfig+0x4c8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d106      	bne.n	8004862 <HAL_RCC_OscConfig+0x312>
 8004854:	4b6f      	ldr	r3, [pc, #444]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004856:	6a1b      	ldr	r3, [r3, #32]
 8004858:	4a6e      	ldr	r2, [pc, #440]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800485a:	f043 0301 	orr.w	r3, r3, #1
 800485e:	6213      	str	r3, [r2, #32]
 8004860:	e02d      	b.n	80048be <HAL_RCC_OscConfig+0x36e>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d10c      	bne.n	8004884 <HAL_RCC_OscConfig+0x334>
 800486a:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800486c:	6a1b      	ldr	r3, [r3, #32]
 800486e:	4a69      	ldr	r2, [pc, #420]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004870:	f023 0301 	bic.w	r3, r3, #1
 8004874:	6213      	str	r3, [r2, #32]
 8004876:	4b67      	ldr	r3, [pc, #412]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	4a66      	ldr	r2, [pc, #408]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800487c:	f023 0304 	bic.w	r3, r3, #4
 8004880:	6213      	str	r3, [r2, #32]
 8004882:	e01c      	b.n	80048be <HAL_RCC_OscConfig+0x36e>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	2b05      	cmp	r3, #5
 800488a:	d10c      	bne.n	80048a6 <HAL_RCC_OscConfig+0x356>
 800488c:	4b61      	ldr	r3, [pc, #388]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800488e:	6a1b      	ldr	r3, [r3, #32]
 8004890:	4a60      	ldr	r2, [pc, #384]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004892:	f043 0304 	orr.w	r3, r3, #4
 8004896:	6213      	str	r3, [r2, #32]
 8004898:	4b5e      	ldr	r3, [pc, #376]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800489a:	6a1b      	ldr	r3, [r3, #32]
 800489c:	4a5d      	ldr	r2, [pc, #372]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800489e:	f043 0301 	orr.w	r3, r3, #1
 80048a2:	6213      	str	r3, [r2, #32]
 80048a4:	e00b      	b.n	80048be <HAL_RCC_OscConfig+0x36e>
 80048a6:	4b5b      	ldr	r3, [pc, #364]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048a8:	6a1b      	ldr	r3, [r3, #32]
 80048aa:	4a5a      	ldr	r2, [pc, #360]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	6213      	str	r3, [r2, #32]
 80048b2:	4b58      	ldr	r3, [pc, #352]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	6a1b      	ldr	r3, [r3, #32]
 80048b6:	4a57      	ldr	r2, [pc, #348]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048b8:	f023 0304 	bic.w	r3, r3, #4
 80048bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d015      	beq.n	80048f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048c6:	f7fc fb67 	bl	8000f98 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048cc:	e00a      	b.n	80048e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ce:	f7fc fb63 	bl	8000f98 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80048dc:	4293      	cmp	r3, r2
 80048de:	d901      	bls.n	80048e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e0b1      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048e4:	4b4b      	ldr	r3, [pc, #300]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	f003 0302 	and.w	r3, r3, #2
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d0ee      	beq.n	80048ce <HAL_RCC_OscConfig+0x37e>
 80048f0:	e014      	b.n	800491c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048f2:	f7fc fb51 	bl	8000f98 <HAL_GetTick>
 80048f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048f8:	e00a      	b.n	8004910 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048fa:	f7fc fb4d 	bl	8000f98 <HAL_GetTick>
 80048fe:	4602      	mov	r2, r0
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	f241 3288 	movw	r2, #5000	; 0x1388
 8004908:	4293      	cmp	r3, r2
 800490a:	d901      	bls.n	8004910 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800490c:	2303      	movs	r3, #3
 800490e:	e09b      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004910:	4b40      	ldr	r3, [pc, #256]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004912:	6a1b      	ldr	r3, [r3, #32]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d1ee      	bne.n	80048fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800491c:	7dfb      	ldrb	r3, [r7, #23]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d105      	bne.n	800492e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004922:	4b3c      	ldr	r3, [pc, #240]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004924:	69db      	ldr	r3, [r3, #28]
 8004926:	4a3b      	ldr	r2, [pc, #236]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004928:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800492c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69db      	ldr	r3, [r3, #28]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 8087 	beq.w	8004a46 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004938:	4b36      	ldr	r3, [pc, #216]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f003 030c 	and.w	r3, r3, #12
 8004940:	2b08      	cmp	r3, #8
 8004942:	d061      	beq.n	8004a08 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
 8004948:	2b02      	cmp	r3, #2
 800494a:	d146      	bne.n	80049da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800494c:	4b33      	ldr	r3, [pc, #204]	; (8004a1c <HAL_RCC_OscConfig+0x4cc>)
 800494e:	2200      	movs	r2, #0
 8004950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004952:	f7fc fb21 	bl	8000f98 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800495a:	f7fc fb1d 	bl	8000f98 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e06d      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800496c:	4b29      	ldr	r3, [pc, #164]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1f0      	bne.n	800495a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a1b      	ldr	r3, [r3, #32]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004980:	d108      	bne.n	8004994 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004984:	685b      	ldr	r3, [r3, #4]
 8004986:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	4921      	ldr	r1, [pc, #132]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004990:	4313      	orrs	r3, r2
 8004992:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004994:	4b1f      	ldr	r3, [pc, #124]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a19      	ldr	r1, [r3, #32]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a4:	430b      	orrs	r3, r1
 80049a6:	491b      	ldr	r1, [pc, #108]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80049ac:	4b1b      	ldr	r3, [pc, #108]	; (8004a1c <HAL_RCC_OscConfig+0x4cc>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b2:	f7fc faf1 	bl	8000f98 <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ba:	f7fc faed 	bl	8000f98 <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e03d      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80049cc:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0f0      	beq.n	80049ba <HAL_RCC_OscConfig+0x46a>
 80049d8:	e035      	b.n	8004a46 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <HAL_RCC_OscConfig+0x4cc>)
 80049dc:	2200      	movs	r2, #0
 80049de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049e0:	f7fc fada 	bl	8000f98 <HAL_GetTick>
 80049e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049e6:	e008      	b.n	80049fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e8:	f7fc fad6 	bl	8000f98 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	693b      	ldr	r3, [r7, #16]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	2b02      	cmp	r3, #2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e026      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049fa:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <HAL_RCC_OscConfig+0x4c4>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f0      	bne.n	80049e8 <HAL_RCC_OscConfig+0x498>
 8004a06:	e01e      	b.n	8004a46 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	69db      	ldr	r3, [r3, #28]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d107      	bne.n	8004a20 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e019      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
 8004a14:	40021000 	.word	0x40021000
 8004a18:	40007000 	.word	0x40007000
 8004a1c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004a20:	4b0b      	ldr	r3, [pc, #44]	; (8004a50 <HAL_RCC_OscConfig+0x500>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d106      	bne.n	8004a42 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d001      	beq.n	8004a46 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3718      	adds	r7, #24
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}
 8004a50:	40021000 	.word	0x40021000

08004a54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e0d0      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a68:	4b6a      	ldr	r3, [pc, #424]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	683a      	ldr	r2, [r7, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d910      	bls.n	8004a98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a76:	4b67      	ldr	r3, [pc, #412]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f023 0207 	bic.w	r2, r3, #7
 8004a7e:	4965      	ldr	r1, [pc, #404]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a86:	4b63      	ldr	r3, [pc, #396]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	683a      	ldr	r2, [r7, #0]
 8004a90:	429a      	cmp	r2, r3
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0b8      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f003 0302 	and.w	r3, r3, #2
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d020      	beq.n	8004ae6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f003 0304 	and.w	r3, r3, #4
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d005      	beq.n	8004abc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ab0:	4b59      	ldr	r3, [pc, #356]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a58      	ldr	r2, [pc, #352]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004aba:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f003 0308 	and.w	r3, r3, #8
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d005      	beq.n	8004ad4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ac8:	4b53      	ldr	r3, [pc, #332]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	4a52      	ldr	r2, [pc, #328]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ace:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004ad2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ad4:	4b50      	ldr	r3, [pc, #320]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	494d      	ldr	r1, [pc, #308]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0301 	and.w	r3, r3, #1
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d040      	beq.n	8004b74 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d107      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004afa:	4b47      	ldr	r3, [pc, #284]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d115      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e07f      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d107      	bne.n	8004b22 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b12:	4b41      	ldr	r3, [pc, #260]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e073      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b22:	4b3d      	ldr	r3, [pc, #244]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 0302 	and.w	r3, r3, #2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d101      	bne.n	8004b32 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	e06b      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b32:	4b39      	ldr	r3, [pc, #228]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f023 0203 	bic.w	r2, r3, #3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	685b      	ldr	r3, [r3, #4]
 8004b3e:	4936      	ldr	r1, [pc, #216]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b44:	f7fc fa28 	bl	8000f98 <HAL_GetTick>
 8004b48:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	e00a      	b.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b4c:	f7fc fa24 	bl	8000f98 <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e053      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b62:	4b2d      	ldr	r3, [pc, #180]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	f003 020c 	and.w	r2, r3, #12
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	685b      	ldr	r3, [r3, #4]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d1eb      	bne.n	8004b4c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b74:	4b27      	ldr	r3, [pc, #156]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	683a      	ldr	r2, [r7, #0]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d210      	bcs.n	8004ba4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b82:	4b24      	ldr	r3, [pc, #144]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f023 0207 	bic.w	r2, r3, #7
 8004b8a:	4922      	ldr	r1, [pc, #136]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b92:	4b20      	ldr	r3, [pc, #128]	; (8004c14 <HAL_RCC_ClockConfig+0x1c0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	683a      	ldr	r2, [r7, #0]
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d001      	beq.n	8004ba4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e032      	b.n	8004c0a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0304 	and.w	r3, r3, #4
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d008      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	4916      	ldr	r1, [pc, #88]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f003 0308 	and.w	r3, r3, #8
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d009      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004bce:	4b12      	ldr	r3, [pc, #72]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	490e      	ldr	r1, [pc, #56]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004be2:	f000 f821 	bl	8004c28 <HAL_RCC_GetSysClockFreq>
 8004be6:	4602      	mov	r2, r0
 8004be8:	4b0b      	ldr	r3, [pc, #44]	; (8004c18 <HAL_RCC_ClockConfig+0x1c4>)
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	091b      	lsrs	r3, r3, #4
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	490a      	ldr	r1, [pc, #40]	; (8004c1c <HAL_RCC_ClockConfig+0x1c8>)
 8004bf4:	5ccb      	ldrb	r3, [r1, r3]
 8004bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfa:	4a09      	ldr	r2, [pc, #36]	; (8004c20 <HAL_RCC_ClockConfig+0x1cc>)
 8004bfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004bfe:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <HAL_RCC_ClockConfig+0x1d0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f7fc f986 	bl	8000f14 <HAL_InitTick>

  return HAL_OK;
 8004c08:	2300      	movs	r3, #0
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	40022000 	.word	0x40022000
 8004c18:	40021000 	.word	0x40021000
 8004c1c:	08007998 	.word	0x08007998
 8004c20:	200003e8 	.word	0x200003e8
 8004c24:	200003ec 	.word	0x200003ec

08004c28 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b087      	sub	sp, #28
 8004c2c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	60fb      	str	r3, [r7, #12]
 8004c32:	2300      	movs	r3, #0
 8004c34:	60bb      	str	r3, [r7, #8]
 8004c36:	2300      	movs	r3, #0
 8004c38:	617b      	str	r3, [r7, #20]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x94>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
 8004c4e:	2b04      	cmp	r3, #4
 8004c50:	d002      	beq.n	8004c58 <HAL_RCC_GetSysClockFreq+0x30>
 8004c52:	2b08      	cmp	r3, #8
 8004c54:	d003      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0x36>
 8004c56:	e027      	b.n	8004ca8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004c58:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c5a:	613b      	str	r3, [r7, #16]
      break;
 8004c5c:	e027      	b.n	8004cae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	0c9b      	lsrs	r3, r3, #18
 8004c62:	f003 030f 	and.w	r3, r3, #15
 8004c66:	4a17      	ldr	r2, [pc, #92]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004c68:	5cd3      	ldrb	r3, [r2, r3]
 8004c6a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d010      	beq.n	8004c98 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c76:	4b11      	ldr	r3, [pc, #68]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x94>)
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	0c5b      	lsrs	r3, r3, #17
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	4a11      	ldr	r2, [pc, #68]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c82:	5cd3      	ldrb	r3, [r2, r3]
 8004c84:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a0d      	ldr	r2, [pc, #52]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004c8a:	fb03 f202 	mul.w	r2, r3, r2
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c94:	617b      	str	r3, [r7, #20]
 8004c96:	e004      	b.n	8004ca2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a0c      	ldr	r2, [pc, #48]	; (8004ccc <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c9c:	fb02 f303 	mul.w	r3, r2, r3
 8004ca0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	613b      	str	r3, [r7, #16]
      break;
 8004ca6:	e002      	b.n	8004cae <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004ca8:	4b05      	ldr	r3, [pc, #20]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x98>)
 8004caa:	613b      	str	r3, [r7, #16]
      break;
 8004cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004cae:	693b      	ldr	r3, [r7, #16]
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bc80      	pop	{r7}
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	007a1200 	.word	0x007a1200
 8004cc4:	080079b0 	.word	0x080079b0
 8004cc8:	080079c0 	.word	0x080079c0
 8004ccc:	003d0900 	.word	0x003d0900

08004cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd4:	4b02      	ldr	r3, [pc, #8]	; (8004ce0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bc80      	pop	{r7}
 8004cde:	4770      	bx	lr
 8004ce0:	200003e8 	.word	0x200003e8

08004ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004ce8:	f7ff fff2 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004cec:	4602      	mov	r2, r0
 8004cee:	4b05      	ldr	r3, [pc, #20]	; (8004d04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	0a1b      	lsrs	r3, r3, #8
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	4903      	ldr	r1, [pc, #12]	; (8004d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cfa:	5ccb      	ldrb	r3, [r1, r3]
 8004cfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	40021000 	.word	0x40021000
 8004d08:	080079a8 	.word	0x080079a8

08004d0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d10:	f7ff ffde 	bl	8004cd0 <HAL_RCC_GetHCLKFreq>
 8004d14:	4602      	mov	r2, r0
 8004d16:	4b05      	ldr	r3, [pc, #20]	; (8004d2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	0adb      	lsrs	r3, r3, #11
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	4903      	ldr	r1, [pc, #12]	; (8004d30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d22:	5ccb      	ldrb	r3, [r1, r3]
 8004d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	40021000 	.word	0x40021000
 8004d30:	080079a8 	.word	0x080079a8

08004d34 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004d3c:	4b0a      	ldr	r3, [pc, #40]	; (8004d68 <RCC_Delay+0x34>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a0a      	ldr	r2, [pc, #40]	; (8004d6c <RCC_Delay+0x38>)
 8004d42:	fba2 2303 	umull	r2, r3, r2, r3
 8004d46:	0a5b      	lsrs	r3, r3, #9
 8004d48:	687a      	ldr	r2, [r7, #4]
 8004d4a:	fb02 f303 	mul.w	r3, r2, r3
 8004d4e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004d50:	bf00      	nop
  }
  while (Delay --);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	1e5a      	subs	r2, r3, #1
 8004d56:	60fa      	str	r2, [r7, #12]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d1f9      	bne.n	8004d50 <RCC_Delay+0x1c>
}
 8004d5c:	bf00      	nop
 8004d5e:	bf00      	nop
 8004d60:	3714      	adds	r7, #20
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bc80      	pop	{r7}
 8004d66:	4770      	bx	lr
 8004d68:	200003e8 	.word	0x200003e8
 8004d6c:	10624dd3 	.word	0x10624dd3

08004d70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e041      	b.n	8004e06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f7fb ff64 	bl	8000c64 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f000 fdc2 	bl	8005938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e0e:	b580      	push	{r7, lr}
 8004e10:	b082      	sub	sp, #8
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e041      	b.n	8004ea4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d106      	bne.n	8004e3a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f839 	bl	8004eac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2202      	movs	r2, #2
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	4619      	mov	r1, r3
 8004e4c:	4610      	mov	r0, r2
 8004e4e:	f000 fd73 	bl	8005938 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2201      	movs	r2, #1
 8004e56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2201      	movs	r2, #1
 8004e5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2201      	movs	r2, #1
 8004e66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3708      	adds	r7, #8
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b083      	sub	sp, #12
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bc80      	pop	{r7}
 8004ebc:	4770      	bx	lr
	...

08004ec0 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d109      	bne.n	8004eec <HAL_TIM_PWM_Start_DMA+0x2c>
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ede:	b2db      	uxtb	r3, r3
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	bf0c      	ite	eq
 8004ee4:	2301      	moveq	r3, #1
 8004ee6:	2300      	movne	r3, #0
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	e022      	b.n	8004f32 <HAL_TIM_PWM_Start_DMA+0x72>
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d109      	bne.n	8004f06 <HAL_TIM_PWM_Start_DMA+0x46>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ef8:	b2db      	uxtb	r3, r3
 8004efa:	2b02      	cmp	r3, #2
 8004efc:	bf0c      	ite	eq
 8004efe:	2301      	moveq	r3, #1
 8004f00:	2300      	movne	r3, #0
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	e015      	b.n	8004f32 <HAL_TIM_PWM_Start_DMA+0x72>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2b08      	cmp	r3, #8
 8004f0a:	d109      	bne.n	8004f20 <HAL_TIM_PWM_Start_DMA+0x60>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b02      	cmp	r3, #2
 8004f16:	bf0c      	ite	eq
 8004f18:	2301      	moveq	r3, #1
 8004f1a:	2300      	movne	r3, #0
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	e008      	b.n	8004f32 <HAL_TIM_PWM_Start_DMA+0x72>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	bf0c      	ite	eq
 8004f2c:	2301      	moveq	r3, #1
 8004f2e:	2300      	movne	r3, #0
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8004f36:	2302      	movs	r3, #2
 8004f38:	e14e      	b.n	80051d8 <HAL_TIM_PWM_Start_DMA+0x318>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d109      	bne.n	8004f54 <HAL_TIM_PWM_Start_DMA+0x94>
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b01      	cmp	r3, #1
 8004f4a:	bf0c      	ite	eq
 8004f4c:	2301      	moveq	r3, #1
 8004f4e:	2300      	movne	r3, #0
 8004f50:	b2db      	uxtb	r3, r3
 8004f52:	e022      	b.n	8004f9a <HAL_TIM_PWM_Start_DMA+0xda>
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	2b04      	cmp	r3, #4
 8004f58:	d109      	bne.n	8004f6e <HAL_TIM_PWM_Start_DMA+0xae>
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b01      	cmp	r3, #1
 8004f64:	bf0c      	ite	eq
 8004f66:	2301      	moveq	r3, #1
 8004f68:	2300      	movne	r3, #0
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	e015      	b.n	8004f9a <HAL_TIM_PWM_Start_DMA+0xda>
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	2b08      	cmp	r3, #8
 8004f72:	d109      	bne.n	8004f88 <HAL_TIM_PWM_Start_DMA+0xc8>
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	bf0c      	ite	eq
 8004f80:	2301      	moveq	r3, #1
 8004f82:	2300      	movne	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	e008      	b.n	8004f9a <HAL_TIM_PWM_Start_DMA+0xda>
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	bf0c      	ite	eq
 8004f94:	2301      	moveq	r3, #1
 8004f96:	2300      	movne	r3, #0
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d024      	beq.n	8004fe8 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d002      	beq.n	8004faa <HAL_TIM_PWM_Start_DMA+0xea>
 8004fa4:	887b      	ldrh	r3, [r7, #2]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	e114      	b.n	80051d8 <HAL_TIM_PWM_Start_DMA+0x318>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d104      	bne.n	8004fbe <HAL_TIM_PWM_Start_DMA+0xfe>
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fbc:	e016      	b.n	8004fec <HAL_TIM_PWM_Start_DMA+0x12c>
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	2b04      	cmp	r3, #4
 8004fc2:	d104      	bne.n	8004fce <HAL_TIM_PWM_Start_DMA+0x10e>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fcc:	e00e      	b.n	8004fec <HAL_TIM_PWM_Start_DMA+0x12c>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	2b08      	cmp	r3, #8
 8004fd2:	d104      	bne.n	8004fde <HAL_TIM_PWM_Start_DMA+0x11e>
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fdc:	e006      	b.n	8004fec <HAL_TIM_PWM_Start_DMA+0x12c>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fe6:	e001      	b.n	8004fec <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e0f5      	b.n	80051d8 <HAL_TIM_PWM_Start_DMA+0x318>
  }

  switch (Channel)
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	2b0c      	cmp	r3, #12
 8004ff0:	f200 80ae 	bhi.w	8005150 <HAL_TIM_PWM_Start_DMA+0x290>
 8004ff4:	a201      	add	r2, pc, #4	; (adr r2, 8004ffc <HAL_TIM_PWM_Start_DMA+0x13c>)
 8004ff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffa:	bf00      	nop
 8004ffc:	08005031 	.word	0x08005031
 8005000:	08005151 	.word	0x08005151
 8005004:	08005151 	.word	0x08005151
 8005008:	08005151 	.word	0x08005151
 800500c:	08005079 	.word	0x08005079
 8005010:	08005151 	.word	0x08005151
 8005014:	08005151 	.word	0x08005151
 8005018:	08005151 	.word	0x08005151
 800501c:	080050c1 	.word	0x080050c1
 8005020:	08005151 	.word	0x08005151
 8005024:	08005151 	.word	0x08005151
 8005028:	08005151 	.word	0x08005151
 800502c:	08005109 	.word	0x08005109
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	4a6a      	ldr	r2, [pc, #424]	; (80051e0 <HAL_TIM_PWM_Start_DMA+0x320>)
 8005036:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800503c:	4a69      	ldr	r2, [pc, #420]	; (80051e4 <HAL_TIM_PWM_Start_DMA+0x324>)
 800503e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005044:	4a68      	ldr	r2, [pc, #416]	; (80051e8 <HAL_TIM_PWM_Start_DMA+0x328>)
 8005046:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800504c:	6879      	ldr	r1, [r7, #4]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	3334      	adds	r3, #52	; 0x34
 8005054:	461a      	mov	r2, r3
 8005056:	887b      	ldrh	r3, [r7, #2]
 8005058:	f7fc f934 	bl	80012c4 <HAL_DMA_Start_IT>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	d001      	beq.n	8005066 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8005062:	2301      	movs	r3, #1
 8005064:	e0b8      	b.n	80051d8 <HAL_TIM_PWM_Start_DMA+0x318>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68da      	ldr	r2, [r3, #12]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005074:	60da      	str	r2, [r3, #12]
      break;
 8005076:	e06e      	b.n	8005156 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507c:	4a58      	ldr	r2, [pc, #352]	; (80051e0 <HAL_TIM_PWM_Start_DMA+0x320>)
 800507e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005084:	4a57      	ldr	r2, [pc, #348]	; (80051e4 <HAL_TIM_PWM_Start_DMA+0x324>)
 8005086:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800508c:	4a56      	ldr	r2, [pc, #344]	; (80051e8 <HAL_TIM_PWM_Start_DMA+0x328>)
 800508e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8005094:	6879      	ldr	r1, [r7, #4]
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	3338      	adds	r3, #56	; 0x38
 800509c:	461a      	mov	r2, r3
 800509e:	887b      	ldrh	r3, [r7, #2]
 80050a0:	f7fc f910 	bl	80012c4 <HAL_DMA_Start_IT>
 80050a4:	4603      	mov	r3, r0
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d001      	beq.n	80050ae <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e094      	b.n	80051d8 <HAL_TIM_PWM_Start_DMA+0x318>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68da      	ldr	r2, [r3, #12]
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050bc:	60da      	str	r2, [r3, #12]
      break;
 80050be:	e04a      	b.n	8005156 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a46      	ldr	r2, [pc, #280]	; (80051e0 <HAL_TIM_PWM_Start_DMA+0x320>)
 80050c6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050cc:	4a45      	ldr	r2, [pc, #276]	; (80051e4 <HAL_TIM_PWM_Start_DMA+0x324>)
 80050ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050d4:	4a44      	ldr	r2, [pc, #272]	; (80051e8 <HAL_TIM_PWM_Start_DMA+0x328>)
 80050d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	333c      	adds	r3, #60	; 0x3c
 80050e4:	461a      	mov	r2, r3
 80050e6:	887b      	ldrh	r3, [r7, #2]
 80050e8:	f7fc f8ec 	bl	80012c4 <HAL_DMA_Start_IT>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	e070      	b.n	80051d8 <HAL_TIM_PWM_Start_DMA+0x318>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005104:	60da      	str	r2, [r3, #12]
      break;
 8005106:	e026      	b.n	8005156 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	4a34      	ldr	r2, [pc, #208]	; (80051e0 <HAL_TIM_PWM_Start_DMA+0x320>)
 800510e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005114:	4a33      	ldr	r2, [pc, #204]	; (80051e4 <HAL_TIM_PWM_Start_DMA+0x324>)
 8005116:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511c:	4a32      	ldr	r2, [pc, #200]	; (80051e8 <HAL_TIM_PWM_Start_DMA+0x328>)
 800511e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005124:	6879      	ldr	r1, [r7, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	3340      	adds	r3, #64	; 0x40
 800512c:	461a      	mov	r2, r3
 800512e:	887b      	ldrh	r3, [r7, #2]
 8005130:	f7fc f8c8 	bl	80012c4 <HAL_DMA_Start_IT>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d001      	beq.n	800513e <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e04c      	b.n	80051d8 <HAL_TIM_PWM_Start_DMA+0x318>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68da      	ldr	r2, [r3, #12]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800514c:	60da      	str	r2, [r3, #12]
      break;
 800514e:	e002      	b.n	8005156 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8005150:	2301      	movs	r3, #1
 8005152:	75fb      	strb	r3, [r7, #23]
      break;
 8005154:	bf00      	nop
  }

  if (status == HAL_OK)
 8005156:	7dfb      	ldrb	r3, [r7, #23]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d13c      	bne.n	80051d6 <HAL_TIM_PWM_Start_DMA+0x316>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2201      	movs	r2, #1
 8005162:	68b9      	ldr	r1, [r7, #8]
 8005164:	4618      	mov	r0, r3
 8005166:	f000 fe5d 	bl	8005e24 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1f      	ldr	r2, [pc, #124]	; (80051ec <HAL_TIM_PWM_Start_DMA+0x32c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d107      	bne.n	8005184 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005182:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a18      	ldr	r2, [pc, #96]	; (80051ec <HAL_TIM_PWM_Start_DMA+0x32c>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d009      	beq.n	80051a2 <HAL_TIM_PWM_Start_DMA+0x2e2>
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005196:	d004      	beq.n	80051a2 <HAL_TIM_PWM_Start_DMA+0x2e2>
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a14      	ldr	r2, [pc, #80]	; (80051f0 <HAL_TIM_PWM_Start_DMA+0x330>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d111      	bne.n	80051c6 <HAL_TIM_PWM_Start_DMA+0x306>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f003 0307 	and.w	r3, r3, #7
 80051ac:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b06      	cmp	r3, #6
 80051b2:	d010      	beq.n	80051d6 <HAL_TIM_PWM_Start_DMA+0x316>
      {
        __HAL_TIM_ENABLE(htim);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0201 	orr.w	r2, r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80051c4:	e007      	b.n	80051d6 <HAL_TIM_PWM_Start_DMA+0x316>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	681a      	ldr	r2, [r3, #0]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f042 0201 	orr.w	r2, r2, #1
 80051d4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80051d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3718      	adds	r7, #24
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	08005827 	.word	0x08005827
 80051e4:	080058cf 	.word	0x080058cf
 80051e8:	08005795 	.word	0x08005795
 80051ec:	40012c00 	.word	0x40012c00
 80051f0:	40000400 	.word	0x40000400

080051f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	f003 0302 	and.w	r3, r3, #2
 8005206:	2b02      	cmp	r3, #2
 8005208:	d122      	bne.n	8005250 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	68db      	ldr	r3, [r3, #12]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b02      	cmp	r3, #2
 8005216:	d11b      	bne.n	8005250 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f06f 0202 	mvn.w	r2, #2
 8005220:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	f003 0303 	and.w	r3, r3, #3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fa7f 	bl	800573a <HAL_TIM_IC_CaptureCallback>
 800523c:	e005      	b.n	800524a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 fa72 	bl	8005728 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fa81 	bl	800574c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	691b      	ldr	r3, [r3, #16]
 8005256:	f003 0304 	and.w	r3, r3, #4
 800525a:	2b04      	cmp	r3, #4
 800525c:	d122      	bne.n	80052a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	f003 0304 	and.w	r3, r3, #4
 8005268:	2b04      	cmp	r3, #4
 800526a:	d11b      	bne.n	80052a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f06f 0204 	mvn.w	r2, #4
 8005274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005286:	2b00      	cmp	r3, #0
 8005288:	d003      	beq.n	8005292 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 fa55 	bl	800573a <HAL_TIM_IC_CaptureCallback>
 8005290:	e005      	b.n	800529e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 fa48 	bl	8005728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 fa57 	bl	800574c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	f003 0308 	and.w	r3, r3, #8
 80052ae:	2b08      	cmp	r3, #8
 80052b0:	d122      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	f003 0308 	and.w	r3, r3, #8
 80052bc:	2b08      	cmp	r3, #8
 80052be:	d11b      	bne.n	80052f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f06f 0208 	mvn.w	r2, #8
 80052c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	2204      	movs	r2, #4
 80052ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	f003 0303 	and.w	r3, r3, #3
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d003      	beq.n	80052e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fa2b 	bl	800573a <HAL_TIM_IC_CaptureCallback>
 80052e4:	e005      	b.n	80052f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fa1e 	bl	8005728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fa2d 	bl	800574c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	f003 0310 	and.w	r3, r3, #16
 8005302:	2b10      	cmp	r3, #16
 8005304:	d122      	bne.n	800534c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f003 0310 	and.w	r3, r3, #16
 8005310:	2b10      	cmp	r3, #16
 8005312:	d11b      	bne.n	800534c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f06f 0210 	mvn.w	r2, #16
 800531c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2208      	movs	r2, #8
 8005322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 fa01 	bl	800573a <HAL_TIM_IC_CaptureCallback>
 8005338:	e005      	b.n	8005346 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f9f4 	bl	8005728 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005340:	6878      	ldr	r0, [r7, #4]
 8005342:	f000 fa03 	bl	800574c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2200      	movs	r2, #0
 800534a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b01      	cmp	r3, #1
 8005358:	d10e      	bne.n	8005378 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	f003 0301 	and.w	r3, r3, #1
 8005364:	2b01      	cmp	r3, #1
 8005366:	d107      	bne.n	8005378 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f06f 0201 	mvn.w	r2, #1
 8005370:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f9cf 	bl	8005716 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005382:	2b80      	cmp	r3, #128	; 0x80
 8005384:	d10e      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	68db      	ldr	r3, [r3, #12]
 800538c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005390:	2b80      	cmp	r3, #128	; 0x80
 8005392:	d107      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800539c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fe16 	bl	8005fd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ae:	2b40      	cmp	r3, #64	; 0x40
 80053b0:	d10e      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053bc:	2b40      	cmp	r3, #64	; 0x40
 80053be:	d107      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f9d0 	bl	8005770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0320 	and.w	r3, r3, #32
 80053da:	2b20      	cmp	r3, #32
 80053dc:	d10e      	bne.n	80053fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f003 0320 	and.w	r3, r3, #32
 80053e8:	2b20      	cmp	r3, #32
 80053ea:	d107      	bne.n	80053fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0220 	mvn.w	r2, #32
 80053f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fde1 	bl	8005fbe <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053fc:	bf00      	nop
 80053fe:	3708      	adds	r7, #8
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}

08005404 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005404:	b580      	push	{r7, lr}
 8005406:	b086      	sub	sp, #24
 8005408:	af00      	add	r7, sp, #0
 800540a:	60f8      	str	r0, [r7, #12]
 800540c:	60b9      	str	r1, [r7, #8]
 800540e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005410:	2300      	movs	r3, #0
 8005412:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800541e:	2302      	movs	r3, #2
 8005420:	e0ae      	b.n	8005580 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	2201      	movs	r2, #1
 8005426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2b0c      	cmp	r3, #12
 800542e:	f200 809f 	bhi.w	8005570 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005432:	a201      	add	r2, pc, #4	; (adr r2, 8005438 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005438:	0800546d 	.word	0x0800546d
 800543c:	08005571 	.word	0x08005571
 8005440:	08005571 	.word	0x08005571
 8005444:	08005571 	.word	0x08005571
 8005448:	080054ad 	.word	0x080054ad
 800544c:	08005571 	.word	0x08005571
 8005450:	08005571 	.word	0x08005571
 8005454:	08005571 	.word	0x08005571
 8005458:	080054ef 	.word	0x080054ef
 800545c:	08005571 	.word	0x08005571
 8005460:	08005571 	.word	0x08005571
 8005464:	08005571 	.word	0x08005571
 8005468:	0800552f 	.word	0x0800552f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	68b9      	ldr	r1, [r7, #8]
 8005472:	4618      	mov	r0, r3
 8005474:	f000 fab8 	bl	80059e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	699a      	ldr	r2, [r3, #24]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f042 0208 	orr.w	r2, r2, #8
 8005486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	699a      	ldr	r2, [r3, #24]
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f022 0204 	bic.w	r2, r2, #4
 8005496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	6999      	ldr	r1, [r3, #24]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	691a      	ldr	r2, [r3, #16]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	430a      	orrs	r2, r1
 80054a8:	619a      	str	r2, [r3, #24]
      break;
 80054aa:	e064      	b.n	8005576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fafe 	bl	8005ab4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6999      	ldr	r1, [r3, #24]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	021a      	lsls	r2, r3, #8
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	430a      	orrs	r2, r1
 80054ea:	619a      	str	r2, [r3, #24]
      break;
 80054ec:	e043      	b.n	8005576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	68b9      	ldr	r1, [r7, #8]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 fb47 	bl	8005b88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	69da      	ldr	r2, [r3, #28]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f042 0208 	orr.w	r2, r2, #8
 8005508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	69da      	ldr	r2, [r3, #28]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0204 	bic.w	r2, r2, #4
 8005518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	69d9      	ldr	r1, [r3, #28]
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	691a      	ldr	r2, [r3, #16]
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	430a      	orrs	r2, r1
 800552a:	61da      	str	r2, [r3, #28]
      break;
 800552c:	e023      	b.n	8005576 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68b9      	ldr	r1, [r7, #8]
 8005534:	4618      	mov	r0, r3
 8005536:	f000 fb91 	bl	8005c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	69da      	ldr	r2, [r3, #28]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	69da      	ldr	r2, [r3, #28]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69d9      	ldr	r1, [r3, #28]
 8005560:	68bb      	ldr	r3, [r7, #8]
 8005562:	691b      	ldr	r3, [r3, #16]
 8005564:	021a      	lsls	r2, r3, #8
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	430a      	orrs	r2, r1
 800556c:	61da      	str	r2, [r3, #28]
      break;
 800556e:	e002      	b.n	8005576 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	75fb      	strb	r3, [r7, #23]
      break;
 8005574:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800557e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005580:	4618      	mov	r0, r3
 8005582:	3718      	adds	r7, #24
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_TIM_ConfigClockSource+0x1c>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e0b4      	b.n	800570e <HAL_TIM_ConfigClockSource+0x186>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2202      	movs	r2, #2
 80055b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	689b      	ldr	r3, [r3, #8]
 80055ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80055c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	68ba      	ldr	r2, [r7, #8]
 80055d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055dc:	d03e      	beq.n	800565c <HAL_TIM_ConfigClockSource+0xd4>
 80055de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055e2:	f200 8087 	bhi.w	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ea:	f000 8086 	beq.w	80056fa <HAL_TIM_ConfigClockSource+0x172>
 80055ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055f2:	d87f      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 80055f4:	2b70      	cmp	r3, #112	; 0x70
 80055f6:	d01a      	beq.n	800562e <HAL_TIM_ConfigClockSource+0xa6>
 80055f8:	2b70      	cmp	r3, #112	; 0x70
 80055fa:	d87b      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 80055fc:	2b60      	cmp	r3, #96	; 0x60
 80055fe:	d050      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x11a>
 8005600:	2b60      	cmp	r3, #96	; 0x60
 8005602:	d877      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005604:	2b50      	cmp	r3, #80	; 0x50
 8005606:	d03c      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0xfa>
 8005608:	2b50      	cmp	r3, #80	; 0x50
 800560a:	d873      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 800560c:	2b40      	cmp	r3, #64	; 0x40
 800560e:	d058      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0x13a>
 8005610:	2b40      	cmp	r3, #64	; 0x40
 8005612:	d86f      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005614:	2b30      	cmp	r3, #48	; 0x30
 8005616:	d064      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005618:	2b30      	cmp	r3, #48	; 0x30
 800561a:	d86b      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 800561c:	2b20      	cmp	r3, #32
 800561e:	d060      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005620:	2b20      	cmp	r3, #32
 8005622:	d867      	bhi.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
 8005624:	2b00      	cmp	r3, #0
 8005626:	d05c      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x15a>
 8005628:	2b10      	cmp	r3, #16
 800562a:	d05a      	beq.n	80056e2 <HAL_TIM_ConfigClockSource+0x15a>
 800562c:	e062      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6899      	ldr	r1, [r3, #8]
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	685a      	ldr	r2, [r3, #4]
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68db      	ldr	r3, [r3, #12]
 800563e:	f000 fbd2 	bl	8005de6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005650:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	609a      	str	r2, [r3, #8]
      break;
 800565a:	e04f      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6818      	ldr	r0, [r3, #0]
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	6899      	ldr	r1, [r3, #8]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685a      	ldr	r2, [r3, #4]
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	68db      	ldr	r3, [r3, #12]
 800566c:	f000 fbbb 	bl	8005de6 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689a      	ldr	r2, [r3, #8]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800567e:	609a      	str	r2, [r3, #8]
      break;
 8005680:	e03c      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6818      	ldr	r0, [r3, #0]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6859      	ldr	r1, [r3, #4]
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
 800568e:	461a      	mov	r2, r3
 8005690:	f000 fb32 	bl	8005cf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2150      	movs	r1, #80	; 0x50
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fb89 	bl	8005db2 <TIM_ITRx_SetConfig>
      break;
 80056a0:	e02c      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6818      	ldr	r0, [r3, #0]
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6859      	ldr	r1, [r3, #4]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
 80056ae:	461a      	mov	r2, r3
 80056b0:	f000 fb50 	bl	8005d54 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2160      	movs	r1, #96	; 0x60
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fb79 	bl	8005db2 <TIM_ITRx_SetConfig>
      break;
 80056c0:	e01c      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6818      	ldr	r0, [r3, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	6859      	ldr	r1, [r3, #4]
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	68db      	ldr	r3, [r3, #12]
 80056ce:	461a      	mov	r2, r3
 80056d0:	f000 fb12 	bl	8005cf8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	2140      	movs	r1, #64	; 0x40
 80056da:	4618      	mov	r0, r3
 80056dc:	f000 fb69 	bl	8005db2 <TIM_ITRx_SetConfig>
      break;
 80056e0:	e00c      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f000 fb60 	bl	8005db2 <TIM_ITRx_SetConfig>
      break;
 80056f2:	e003      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056f4:	2301      	movs	r3, #1
 80056f6:	73fb      	strb	r3, [r7, #15]
      break;
 80056f8:	e000      	b.n	80056fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800570c:	7bfb      	ldrb	r3, [r7, #15]
}
 800570e:	4618      	mov	r0, r3
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr

08005728 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	bc80      	pop	{r7}
 8005738:	4770      	bx	lr

0800573a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800573a:	b480      	push	{r7}
 800573c:	b083      	sub	sp, #12
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005742:	bf00      	nop
 8005744:	370c      	adds	r7, #12
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr

0800574c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	bc80      	pop	{r7}
 800575c:	4770      	bx	lr

0800575e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800575e:	b480      	push	{r7}
 8005760:	b083      	sub	sp, #12
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8005766:	bf00      	nop
 8005768:	370c      	adds	r7, #12
 800576a:	46bd      	mov	sp, r7
 800576c:	bc80      	pop	{r7}
 800576e:	4770      	bx	lr

08005770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	bc80      	pop	{r7}
 8005780:	4770      	bx	lr

08005782 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005782:	b480      	push	{r7}
 8005784:	b083      	sub	sp, #12
 8005786:	af00      	add	r7, sp, #0
 8005788:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800578a:	bf00      	nop
 800578c:	370c      	adds	r7, #12
 800578e:	46bd      	mov	sp, r7
 8005790:	bc80      	pop	{r7}
 8005792:	4770      	bx	lr

08005794 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d107      	bne.n	80057bc <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ba:	e02a      	b.n	8005812 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d107      	bne.n	80057d6 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2202      	movs	r2, #2
 80057ca:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057d4:	e01d      	b.n	8005812 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d107      	bne.n	80057f0 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2204      	movs	r2, #4
 80057e4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057ee:	e010      	b.n	8005812 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d107      	bne.n	800580a <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2208      	movs	r2, #8
 80057fe:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	2201      	movs	r2, #1
 8005804:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005808:	e003      	b.n	8005812 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8005812:	68f8      	ldr	r0, [r7, #12]
 8005814:	f7ff ffb5 	bl	8005782 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2200      	movs	r2, #0
 800581c:	771a      	strb	r2, [r3, #28]
}
 800581e:	bf00      	nop
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b084      	sub	sp, #16
 800582a:	af00      	add	r7, sp, #0
 800582c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	429a      	cmp	r2, r3
 800583c:	d10b      	bne.n	8005856 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2201      	movs	r2, #1
 8005842:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d136      	bne.n	80058ba <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2201      	movs	r2, #1
 8005850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005854:	e031      	b.n	80058ba <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d10b      	bne.n	8005878 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	2202      	movs	r2, #2
 8005864:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d125      	bne.n	80058ba <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005876:	e020      	b.n	80058ba <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	429a      	cmp	r2, r3
 8005880:	d10b      	bne.n	800589a <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2204      	movs	r2, #4
 8005886:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	699b      	ldr	r3, [r3, #24]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d114      	bne.n	80058ba <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2201      	movs	r2, #1
 8005894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005898:	e00f      	b.n	80058ba <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d10a      	bne.n	80058ba <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2208      	movs	r2, #8
 80058a8:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d103      	bne.n	80058ba <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058ba:	68f8      	ldr	r0, [r7, #12]
 80058bc:	f7ff ff46 	bl	800574c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2200      	movs	r2, #0
 80058c4:	771a      	strb	r2, [r3, #28]
}
 80058c6:	bf00      	nop
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b084      	sub	sp, #16
 80058d2:	af00      	add	r7, sp, #0
 80058d4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	687a      	ldr	r2, [r7, #4]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	d103      	bne.n	80058ee <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	771a      	strb	r2, [r3, #28]
 80058ec:	e019      	b.n	8005922 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d103      	bne.n	8005900 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2202      	movs	r2, #2
 80058fc:	771a      	strb	r2, [r3, #28]
 80058fe:	e010      	b.n	8005922 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005904:	687a      	ldr	r2, [r7, #4]
 8005906:	429a      	cmp	r2, r3
 8005908:	d103      	bne.n	8005912 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2204      	movs	r2, #4
 800590e:	771a      	strb	r2, [r3, #28]
 8005910:	e007      	b.n	8005922 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	429a      	cmp	r2, r3
 800591a:	d102      	bne.n	8005922 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	2208      	movs	r2, #8
 8005920:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f7ff ff1b 	bl	800575e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	771a      	strb	r2, [r3, #28]
}
 800592e:	bf00      	nop
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
	...

08005938 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005938:	b480      	push	{r7}
 800593a:	b085      	sub	sp, #20
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	4a25      	ldr	r2, [pc, #148]	; (80059e0 <TIM_Base_SetConfig+0xa8>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d007      	beq.n	8005960 <TIM_Base_SetConfig+0x28>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005956:	d003      	beq.n	8005960 <TIM_Base_SetConfig+0x28>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a22      	ldr	r2, [pc, #136]	; (80059e4 <TIM_Base_SetConfig+0xac>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d108      	bne.n	8005972 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005966:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a1a      	ldr	r2, [pc, #104]	; (80059e0 <TIM_Base_SetConfig+0xa8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d007      	beq.n	800598a <TIM_Base_SetConfig+0x52>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005980:	d003      	beq.n	800598a <TIM_Base_SetConfig+0x52>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a17      	ldr	r2, [pc, #92]	; (80059e4 <TIM_Base_SetConfig+0xac>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d108      	bne.n	800599c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005990:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	68db      	ldr	r3, [r3, #12]
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	68fa      	ldr	r2, [r7, #12]
 80059ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	689a      	ldr	r2, [r3, #8]
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a07      	ldr	r2, [pc, #28]	; (80059e0 <TIM_Base_SetConfig+0xa8>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d103      	bne.n	80059d0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	691a      	ldr	r2, [r3, #16]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2201      	movs	r2, #1
 80059d4:	615a      	str	r2, [r3, #20]
}
 80059d6:	bf00      	nop
 80059d8:	3714      	adds	r7, #20
 80059da:	46bd      	mov	sp, r7
 80059dc:	bc80      	pop	{r7}
 80059de:	4770      	bx	lr
 80059e0:	40012c00 	.word	0x40012c00
 80059e4:	40000400 	.word	0x40000400

080059e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b087      	sub	sp, #28
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
 80059f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6a1b      	ldr	r3, [r3, #32]
 80059f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	6a1b      	ldr	r3, [r3, #32]
 80059fc:	f023 0201 	bic.w	r2, r3, #1
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	699b      	ldr	r3, [r3, #24]
 8005a0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	f023 0303 	bic.w	r3, r3, #3
 8005a1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a2a:	697b      	ldr	r3, [r7, #20]
 8005a2c:	f023 0302 	bic.w	r3, r3, #2
 8005a30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	697a      	ldr	r2, [r7, #20]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	4a1c      	ldr	r2, [pc, #112]	; (8005ab0 <TIM_OC1_SetConfig+0xc8>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d10c      	bne.n	8005a5e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f023 0308 	bic.w	r3, r3, #8
 8005a4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	697a      	ldr	r2, [r7, #20]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	f023 0304 	bic.w	r3, r3, #4
 8005a5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a13      	ldr	r2, [pc, #76]	; (8005ab0 <TIM_OC1_SetConfig+0xc8>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d111      	bne.n	8005a8a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	695b      	ldr	r3, [r3, #20]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	693a      	ldr	r2, [r7, #16]
 8005a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68fa      	ldr	r2, [r7, #12]
 8005a94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	685a      	ldr	r2, [r3, #4]
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	621a      	str	r2, [r3, #32]
}
 8005aa4:	bf00      	nop
 8005aa6:	371c      	adds	r7, #28
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	bc80      	pop	{r7}
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40012c00 	.word	0x40012c00

08005ab4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6a1b      	ldr	r3, [r3, #32]
 8005ac8:	f023 0210 	bic.w	r2, r3, #16
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	699b      	ldr	r3, [r3, #24]
 8005ada:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ae2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	021b      	lsls	r3, r3, #8
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f023 0320 	bic.w	r3, r3, #32
 8005afe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	689b      	ldr	r3, [r3, #8]
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	4a1d      	ldr	r2, [pc, #116]	; (8005b84 <TIM_OC2_SetConfig+0xd0>)
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d10d      	bne.n	8005b30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	697a      	ldr	r2, [r7, #20]
 8005b24:	4313      	orrs	r3, r2
 8005b26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a14      	ldr	r2, [pc, #80]	; (8005b84 <TIM_OC2_SetConfig+0xd0>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d113      	bne.n	8005b60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b48:	683b      	ldr	r3, [r7, #0]
 8005b4a:	695b      	ldr	r3, [r3, #20]
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	4313      	orrs	r3, r2
 8005b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	693a      	ldr	r2, [r7, #16]
 8005b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	621a      	str	r2, [r3, #32]
}
 8005b7a:	bf00      	nop
 8005b7c:	371c      	adds	r7, #28
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bc80      	pop	{r7}
 8005b82:	4770      	bx	lr
 8005b84:	40012c00 	.word	0x40012c00

08005b88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b087      	sub	sp, #28
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6a1b      	ldr	r3, [r3, #32]
 8005b9c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	685b      	ldr	r3, [r3, #4]
 8005ba8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69db      	ldr	r3, [r3, #28]
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f023 0303 	bic.w	r3, r3, #3
 8005bbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68fa      	ldr	r2, [r7, #12]
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bd2:	683b      	ldr	r3, [r7, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	021b      	lsls	r3, r3, #8
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1d      	ldr	r2, [pc, #116]	; (8005c58 <TIM_OC3_SetConfig+0xd0>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d10d      	bne.n	8005c02 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bee:	683b      	ldr	r3, [r7, #0]
 8005bf0:	68db      	ldr	r3, [r3, #12]
 8005bf2:	021b      	lsls	r3, r3, #8
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	4a14      	ldr	r2, [pc, #80]	; (8005c58 <TIM_OC3_SetConfig+0xd0>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d113      	bne.n	8005c32 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c1a:	683b      	ldr	r3, [r7, #0]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	699b      	ldr	r3, [r3, #24]
 8005c2a:	011b      	lsls	r3, r3, #4
 8005c2c:	693a      	ldr	r2, [r7, #16]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	697a      	ldr	r2, [r7, #20]
 8005c4a:	621a      	str	r2, [r3, #32]
}
 8005c4c:	bf00      	nop
 8005c4e:	371c      	adds	r7, #28
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bc80      	pop	{r7}
 8005c54:	4770      	bx	lr
 8005c56:	bf00      	nop
 8005c58:	40012c00 	.word	0x40012c00

08005c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c94:	683b      	ldr	r3, [r7, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	021b      	lsls	r3, r3, #8
 8005c9a:	68fa      	ldr	r2, [r7, #12]
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	689b      	ldr	r3, [r3, #8]
 8005cac:	031b      	lsls	r3, r3, #12
 8005cae:	693a      	ldr	r2, [r7, #16]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	4a0f      	ldr	r2, [pc, #60]	; (8005cf4 <TIM_OC4_SetConfig+0x98>)
 8005cb8:	4293      	cmp	r3, r2
 8005cba:	d109      	bne.n	8005cd0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	695b      	ldr	r3, [r3, #20]
 8005cc8:	019b      	lsls	r3, r3, #6
 8005cca:	697a      	ldr	r2, [r7, #20]
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	68fa      	ldr	r2, [r7, #12]
 8005cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	685a      	ldr	r2, [r3, #4]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	621a      	str	r2, [r3, #32]
}
 8005cea:	bf00      	nop
 8005cec:	371c      	adds	r7, #28
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bc80      	pop	{r7}
 8005cf2:	4770      	bx	lr
 8005cf4:	40012c00 	.word	0x40012c00

08005cf8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cf8:	b480      	push	{r7}
 8005cfa:	b087      	sub	sp, #28
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	60b9      	str	r1, [r7, #8]
 8005d02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6a1b      	ldr	r3, [r3, #32]
 8005d08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f023 0201 	bic.w	r2, r3, #1
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	699b      	ldr	r3, [r3, #24]
 8005d1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	011b      	lsls	r3, r3, #4
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f023 030a 	bic.w	r3, r3, #10
 8005d34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	621a      	str	r2, [r3, #32]
}
 8005d4a:	bf00      	nop
 8005d4c:	371c      	adds	r7, #28
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bc80      	pop	{r7}
 8005d52:	4770      	bx	lr

08005d54 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d54:	b480      	push	{r7}
 8005d56:	b087      	sub	sp, #28
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6a1b      	ldr	r3, [r3, #32]
 8005d64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	f023 0210 	bic.w	r2, r3, #16
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	031b      	lsls	r3, r3, #12
 8005d84:	693a      	ldr	r2, [r7, #16]
 8005d86:	4313      	orrs	r3, r2
 8005d88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d8a:	697b      	ldr	r3, [r7, #20]
 8005d8c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d90:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	011b      	lsls	r3, r3, #4
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	693a      	ldr	r2, [r7, #16]
 8005da0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	621a      	str	r2, [r3, #32]
}
 8005da8:	bf00      	nop
 8005daa:	371c      	adds	r7, #28
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bc80      	pop	{r7}
 8005db0:	4770      	bx	lr

08005db2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005db2:	b480      	push	{r7}
 8005db4:	b085      	sub	sp, #20
 8005db6:	af00      	add	r7, sp, #0
 8005db8:	6078      	str	r0, [r7, #4]
 8005dba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dc8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005dca:	683a      	ldr	r2, [r7, #0]
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f043 0307 	orr.w	r3, r3, #7
 8005dd4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	68fa      	ldr	r2, [r7, #12]
 8005dda:	609a      	str	r2, [r3, #8]
}
 8005ddc:	bf00      	nop
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bc80      	pop	{r7}
 8005de4:	4770      	bx	lr

08005de6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b087      	sub	sp, #28
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	60f8      	str	r0, [r7, #12]
 8005dee:	60b9      	str	r1, [r7, #8]
 8005df0:	607a      	str	r2, [r7, #4]
 8005df2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e00:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e02:	683b      	ldr	r3, [r7, #0]
 8005e04:	021a      	lsls	r2, r3, #8
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	697a      	ldr	r2, [r7, #20]
 8005e10:	4313      	orrs	r3, r2
 8005e12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	697a      	ldr	r2, [r7, #20]
 8005e18:	609a      	str	r2, [r3, #8]
}
 8005e1a:	bf00      	nop
 8005e1c:	371c      	adds	r7, #28
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bc80      	pop	{r7}
 8005e22:	4770      	bx	lr

08005e24 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b087      	sub	sp, #28
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	f003 031f 	and.w	r3, r3, #31
 8005e36:	2201      	movs	r2, #1
 8005e38:	fa02 f303 	lsl.w	r3, r2, r3
 8005e3c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	6a1a      	ldr	r2, [r3, #32]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	43db      	mvns	r3, r3
 8005e46:	401a      	ands	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	6879      	ldr	r1, [r7, #4]
 8005e58:	fa01 f303 	lsl.w	r3, r1, r3
 8005e5c:	431a      	orrs	r2, r3
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	621a      	str	r2, [r3, #32]
}
 8005e62:	bf00      	nop
 8005e64:	371c      	adds	r7, #28
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bc80      	pop	{r7}
 8005e6a:	4770      	bx	lr

08005e6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b085      	sub	sp, #20
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d101      	bne.n	8005e84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e80:	2302      	movs	r3, #2
 8005e82:	e041      	b.n	8005f08 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2201      	movs	r2, #1
 8005e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2202      	movs	r2, #2
 8005e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eaa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005eac:	683b      	ldr	r3, [r7, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	4313      	orrs	r3, r2
 8005eb4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	68fa      	ldr	r2, [r7, #12]
 8005ebc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a14      	ldr	r2, [pc, #80]	; (8005f14 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d009      	beq.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ed0:	d004      	beq.n	8005edc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a10      	ldr	r2, [pc, #64]	; (8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d10c      	bne.n	8005ef6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ee2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68ba      	ldr	r2, [r7, #8]
 8005ef4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3714      	adds	r7, #20
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bc80      	pop	{r7}
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	40012c00 	.word	0x40012c00
 8005f18:	40000400 	.word	0x40000400

08005f1c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e03d      	b.n	8005fb4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	4313      	orrs	r3, r2
 8005f68:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	4313      	orrs	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	4313      	orrs	r3, r2
 8005f92:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	69db      	ldr	r3, [r3, #28]
 8005f9e:	4313      	orrs	r3, r2
 8005fa0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68fa      	ldr	r2, [r7, #12]
 8005fa8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2200      	movs	r2, #0
 8005fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3714      	adds	r7, #20
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bc80      	pop	{r7}
 8005fbc:	4770      	bx	lr

08005fbe <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	b083      	sub	sp, #12
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	bc80      	pop	{r7}
 8005fce:	4770      	bx	lr

08005fd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005fd8:	bf00      	nop
 8005fda:	370c      	adds	r7, #12
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bc80      	pop	{r7}
 8005fe0:	4770      	bx	lr

08005fe2 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b082      	sub	sp, #8
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d101      	bne.n	8005ff4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	e042      	b.n	800607a <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ffa:	b2db      	uxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d106      	bne.n	800600e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2200      	movs	r2, #0
 8006004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f7fa fef3 	bl	8000df4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2224      	movs	r2, #36	; 0x24
 8006012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006024:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006026:	6878      	ldr	r0, [r7, #4]
 8006028:	f000 ff4c 	bl	8006ec4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	691a      	ldr	r2, [r3, #16]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800603a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	695a      	ldr	r2, [r3, #20]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800604a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68da      	ldr	r2, [r3, #12]
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800605a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	2220      	movs	r2, #32
 8006066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2220      	movs	r2, #32
 800606e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3708      	adds	r7, #8
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}

08006082 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006082:	b580      	push	{r7, lr}
 8006084:	b08a      	sub	sp, #40	; 0x28
 8006086:	af02      	add	r7, sp, #8
 8006088:	60f8      	str	r0, [r7, #12]
 800608a:	60b9      	str	r1, [r7, #8]
 800608c:	603b      	str	r3, [r7, #0]
 800608e:	4613      	mov	r3, r2
 8006090:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800609c:	b2db      	uxtb	r3, r3
 800609e:	2b20      	cmp	r3, #32
 80060a0:	d16d      	bne.n	800617e <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d002      	beq.n	80060ae <HAL_UART_Transmit+0x2c>
 80060a8:	88fb      	ldrh	r3, [r7, #6]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d101      	bne.n	80060b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e066      	b.n	8006180 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2200      	movs	r2, #0
 80060b6:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2221      	movs	r2, #33	; 0x21
 80060bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060c0:	f7fa ff6a 	bl	8000f98 <HAL_GetTick>
 80060c4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	88fa      	ldrh	r2, [r7, #6]
 80060ca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	88fa      	ldrh	r2, [r7, #6]
 80060d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	689b      	ldr	r3, [r3, #8]
 80060d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060da:	d108      	bne.n	80060ee <HAL_UART_Transmit+0x6c>
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	691b      	ldr	r3, [r3, #16]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d104      	bne.n	80060ee <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80060e4:	2300      	movs	r3, #0
 80060e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060e8:	68bb      	ldr	r3, [r7, #8]
 80060ea:	61bb      	str	r3, [r7, #24]
 80060ec:	e003      	b.n	80060f6 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060f2:	2300      	movs	r3, #0
 80060f4:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80060f6:	e02a      	b.n	800614e <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	9300      	str	r3, [sp, #0]
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2200      	movs	r2, #0
 8006100:	2180      	movs	r1, #128	; 0x80
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 fc3b 	bl	800697e <UART_WaitOnFlagUntilTimeout>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e036      	b.n	8006180 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d10b      	bne.n	8006130 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006118:	69bb      	ldr	r3, [r7, #24]
 800611a:	881b      	ldrh	r3, [r3, #0]
 800611c:	461a      	mov	r2, r3
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006126:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	3302      	adds	r3, #2
 800612c:	61bb      	str	r3, [r7, #24]
 800612e:	e007      	b.n	8006140 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006130:	69fb      	ldr	r3, [r7, #28]
 8006132:	781a      	ldrb	r2, [r3, #0]
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	3301      	adds	r3, #1
 800613e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006144:	b29b      	uxth	r3, r3
 8006146:	3b01      	subs	r3, #1
 8006148:	b29a      	uxth	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006152:	b29b      	uxth	r3, r3
 8006154:	2b00      	cmp	r3, #0
 8006156:	d1cf      	bne.n	80060f8 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	9300      	str	r3, [sp, #0]
 800615c:	697b      	ldr	r3, [r7, #20]
 800615e:	2200      	movs	r2, #0
 8006160:	2140      	movs	r1, #64	; 0x40
 8006162:	68f8      	ldr	r0, [r7, #12]
 8006164:	f000 fc0b 	bl	800697e <UART_WaitOnFlagUntilTimeout>
 8006168:	4603      	mov	r3, r0
 800616a:	2b00      	cmp	r3, #0
 800616c:	d001      	beq.n	8006172 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e006      	b.n	8006180 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2220      	movs	r2, #32
 8006176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800617a:	2300      	movs	r3, #0
 800617c:	e000      	b.n	8006180 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800617e:	2302      	movs	r3, #2
  }
}
 8006180:	4618      	mov	r0, r3
 8006182:	3720      	adds	r7, #32
 8006184:	46bd      	mov	sp, r7
 8006186:	bd80      	pop	{r7, pc}

08006188 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	4613      	mov	r3, r2
 8006194:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800619c:	b2db      	uxtb	r3, r3
 800619e:	2b20      	cmp	r3, #32
 80061a0:	d112      	bne.n	80061c8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <HAL_UART_Receive_IT+0x26>
 80061a8:	88fb      	ldrh	r3, [r7, #6]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	e00b      	b.n	80061ca <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80061b8:	88fb      	ldrh	r3, [r7, #6]
 80061ba:	461a      	mov	r2, r3
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	68f8      	ldr	r0, [r7, #12]
 80061c0:	f000 fc4b 	bl	8006a5a <UART_Start_Receive_IT>
 80061c4:	4603      	mov	r3, r0
 80061c6:	e000      	b.n	80061ca <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80061c8:	2302      	movs	r3, #2
  }
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3710      	adds	r7, #16
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b0a2      	sub	sp, #136	; 0x88
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
  uint32_t AbortCplt = 0x01U;
 80061dc:	2301      	movs	r3, #1
 80061de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable TXEIE, TCIE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	330c      	adds	r3, #12
 80061e8:	663b      	str	r3, [r7, #96]	; 0x60
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061ec:	e853 3f00 	ldrex	r3, [r3]
 80061f0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80061f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80061f4:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 80061f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	330c      	adds	r3, #12
 8006202:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006206:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006208:	66bb      	str	r3, [r7, #104]	; 0x68
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800620a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800620c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800620e:	e841 2300 	strex	r3, r2, [r1]
 8006212:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006214:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1e3      	bne.n	80061e2 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	3314      	adds	r3, #20
 8006220:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006224:	e853 3f00 	ldrex	r3, [r3]
 8006228:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800622a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800622c:	f023 0301 	bic.w	r3, r3, #1
 8006230:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	3314      	adds	r3, #20
 8006238:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800623a:	65ba      	str	r2, [r7, #88]	; 0x58
 800623c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006240:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006242:	e841 2300 	strex	r3, r2, [r1]
 8006246:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006248:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800624a:	2b00      	cmp	r3, #0
 800624c:	d1e5      	bne.n	800621a <HAL_UART_Abort_IT+0x46>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006252:	2b01      	cmp	r3, #1
 8006254:	d119      	bne.n	800628a <HAL_UART_Abort_IT+0xb6>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	330c      	adds	r3, #12
 800625c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800625e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006260:	e853 3f00 	ldrex	r3, [r3]
 8006264:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006268:	f023 0310 	bic.w	r3, r3, #16
 800626c:	67bb      	str	r3, [r7, #120]	; 0x78
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	330c      	adds	r3, #12
 8006274:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006276:	647a      	str	r2, [r7, #68]	; 0x44
 8006278:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800627a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800627c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800627e:	e841 2300 	strex	r3, r2, [r1]
 8006282:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1e5      	bne.n	8006256 <HAL_UART_Abort_IT+0x82>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00f      	beq.n	80062b2 <HAL_UART_Abort_IT+0xde>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	695b      	ldr	r3, [r3, #20]
 8006298:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629c:	2b00      	cmp	r3, #0
 800629e:	d004      	beq.n	80062aa <HAL_UART_Abort_IT+0xd6>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062a4:	4a53      	ldr	r2, [pc, #332]	; (80063f4 <HAL_UART_Abort_IT+0x220>)
 80062a6:	635a      	str	r2, [r3, #52]	; 0x34
 80062a8:	e003      	b.n	80062b2 <HAL_UART_Abort_IT+0xde>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ae:	2200      	movs	r2, #0
 80062b0:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00f      	beq.n	80062da <HAL_UART_Abort_IT+0x106>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	695b      	ldr	r3, [r3, #20]
 80062c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d004      	beq.n	80062d2 <HAL_UART_Abort_IT+0xfe>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062cc:	4a4a      	ldr	r2, [pc, #296]	; (80063f8 <HAL_UART_Abort_IT+0x224>)
 80062ce:	635a      	str	r2, [r3, #52]	; 0x34
 80062d0:	e003      	b.n	80062da <HAL_UART_Abort_IT+0x106>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062d6:	2200      	movs	r2, #0
 80062d8:	635a      	str	r2, [r3, #52]	; 0x34
    }
  }

  /* Disable the UART DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	695b      	ldr	r3, [r3, #20]
 80062e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d02d      	beq.n	8006344 <HAL_UART_Abort_IT+0x170>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	3314      	adds	r3, #20
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f2:	e853 3f00 	ldrex	r3, [r3]
 80062f6:	623b      	str	r3, [r7, #32]
   return(result);
 80062f8:	6a3b      	ldr	r3, [r7, #32]
 80062fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062fe:	677b      	str	r3, [r7, #116]	; 0x74
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3314      	adds	r3, #20
 8006306:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006308:	633a      	str	r2, [r7, #48]	; 0x30
 800630a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800630e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006310:	e841 2300 	strex	r3, r2, [r1]
 8006314:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1e5      	bne.n	80062e8 <HAL_UART_Abort_IT+0x114>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00f      	beq.n	8006344 <HAL_UART_Abort_IT+0x170>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	4618      	mov	r0, r3
 800632a:	f7fb f867 	bl	80013fc <HAL_DMA_Abort_IT>
 800632e:	4603      	mov	r3, r0
 8006330:	2b00      	cmp	r3, #0
 8006332:	d004      	beq.n	800633e <HAL_UART_Abort_IT+0x16a>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006338:	2200      	movs	r2, #0
 800633a:	635a      	str	r2, [r3, #52]	; 0x34
 800633c:	e002      	b.n	8006344 <HAL_UART_Abort_IT+0x170>
      }
      else
      {
        AbortCplt = 0x00U;
 800633e:	2300      	movs	r3, #0
 8006340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	695b      	ldr	r3, [r3, #20]
 800634a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800634e:	2b00      	cmp	r3, #0
 8006350:	d030      	beq.n	80063b4 <HAL_UART_Abort_IT+0x1e0>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3314      	adds	r3, #20
 8006358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	e853 3f00 	ldrex	r3, [r3]
 8006360:	60fb      	str	r3, [r7, #12]
   return(result);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006368:	673b      	str	r3, [r7, #112]	; 0x70
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3314      	adds	r3, #20
 8006370:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006372:	61fa      	str	r2, [r7, #28]
 8006374:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006376:	69b9      	ldr	r1, [r7, #24]
 8006378:	69fa      	ldr	r2, [r7, #28]
 800637a:	e841 2300 	strex	r3, r2, [r1]
 800637e:	617b      	str	r3, [r7, #20]
   return(result);
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d1e5      	bne.n	8006352 <HAL_UART_Abort_IT+0x17e>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800638a:	2b00      	cmp	r3, #0
 800638c:	d012      	beq.n	80063b4 <HAL_UART_Abort_IT+0x1e0>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006392:	4618      	mov	r0, r3
 8006394:	f7fb f832 	bl	80013fc <HAL_DMA_Abort_IT>
 8006398:	4603      	mov	r3, r0
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <HAL_UART_Abort_IT+0x1da>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063a2:	2200      	movs	r2, #0
 80063a4:	635a      	str	r2, [r3, #52]	; 0x34
        AbortCplt = 0x01U;
 80063a6:	2301      	movs	r3, #1
 80063a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80063ac:	e002      	b.n	80063b4 <HAL_UART_Abort_IT+0x1e0>
      }
      else
      {
        AbortCplt = 0x00U;
 80063ae:	2300      	movs	r3, #0
 80063b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (AbortCplt == 0x01U)
 80063b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	d116      	bne.n	80063ea <HAL_UART_Abort_IT+0x216>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0x00U;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2200      	movs	r2, #0
 80063c0:	84da      	strh	r2, [r3, #38]	; 0x26
    huart->RxXferCount = 0x00U;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2200      	movs	r2, #0
 80063c6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Reset ErrorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2200      	movs	r2, #0
 80063cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    huart->RxState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2200      	movs	r2, #0
 80063e2:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 80063e4:	6878      	ldr	r0, [r7, #4]
 80063e6:	f000 fab6 	bl	8006956 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80063ea:	2300      	movs	r3, #0
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3788      	adds	r7, #136	; 0x88
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	08006bb9 	.word	0x08006bb9
 80063f8:	08006c19 	.word	0x08006c19

080063fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b0ba      	sub	sp, #232	; 0xe8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006422:	2300      	movs	r3, #0
 8006424:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006428:	2300      	movs	r3, #0
 800642a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800642e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006432:	f003 030f 	and.w	r3, r3, #15
 8006436:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800643a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10f      	bne.n	8006462 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006446:	f003 0320 	and.w	r3, r3, #32
 800644a:	2b00      	cmp	r3, #0
 800644c:	d009      	beq.n	8006462 <HAL_UART_IRQHandler+0x66>
 800644e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006452:	f003 0320 	and.w	r3, r3, #32
 8006456:	2b00      	cmp	r3, #0
 8006458:	d003      	beq.n	8006462 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fc73 	bl	8006d46 <UART_Receive_IT>
      return;
 8006460:	e25b      	b.n	800691a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006462:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006466:	2b00      	cmp	r3, #0
 8006468:	f000 80de 	beq.w	8006628 <HAL_UART_IRQHandler+0x22c>
 800646c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d106      	bne.n	8006486 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006478:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800647c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006480:	2b00      	cmp	r3, #0
 8006482:	f000 80d1 	beq.w	8006628 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800648a:	f003 0301 	and.w	r3, r3, #1
 800648e:	2b00      	cmp	r3, #0
 8006490:	d00b      	beq.n	80064aa <HAL_UART_IRQHandler+0xae>
 8006492:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800649a:	2b00      	cmp	r3, #0
 800649c:	d005      	beq.n	80064aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a2:	f043 0201 	orr.w	r2, r3, #1
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064ae:	f003 0304 	and.w	r3, r3, #4
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d00b      	beq.n	80064ce <HAL_UART_IRQHandler+0xd2>
 80064b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d005      	beq.n	80064ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c6:	f043 0202 	orr.w	r2, r3, #2
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80064ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064d2:	f003 0302 	and.w	r3, r3, #2
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00b      	beq.n	80064f2 <HAL_UART_IRQHandler+0xf6>
 80064da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064de:	f003 0301 	and.w	r3, r3, #1
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d005      	beq.n	80064f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064ea:	f043 0204 	orr.w	r2, r3, #4
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064f6:	f003 0308 	and.w	r3, r3, #8
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d011      	beq.n	8006522 <HAL_UART_IRQHandler+0x126>
 80064fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006502:	f003 0320 	and.w	r3, r3, #32
 8006506:	2b00      	cmp	r3, #0
 8006508:	d105      	bne.n	8006516 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800650a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800650e:	f003 0301 	and.w	r3, r3, #1
 8006512:	2b00      	cmp	r3, #0
 8006514:	d005      	beq.n	8006522 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800651a:	f043 0208 	orr.w	r2, r3, #8
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006526:	2b00      	cmp	r3, #0
 8006528:	f000 81f2 	beq.w	8006910 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800652c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006530:	f003 0320 	and.w	r3, r3, #32
 8006534:	2b00      	cmp	r3, #0
 8006536:	d008      	beq.n	800654a <HAL_UART_IRQHandler+0x14e>
 8006538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800653c:	f003 0320 	and.w	r3, r3, #32
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006544:	6878      	ldr	r0, [r7, #4]
 8006546:	f000 fbfe 	bl	8006d46 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	695b      	ldr	r3, [r3, #20]
 8006550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006554:	2b00      	cmp	r3, #0
 8006556:	bf14      	ite	ne
 8006558:	2301      	movne	r3, #1
 800655a:	2300      	moveq	r3, #0
 800655c:	b2db      	uxtb	r3, r3
 800655e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006566:	f003 0308 	and.w	r3, r3, #8
 800656a:	2b00      	cmp	r3, #0
 800656c:	d103      	bne.n	8006576 <HAL_UART_IRQHandler+0x17a>
 800656e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006572:	2b00      	cmp	r3, #0
 8006574:	d04f      	beq.n	8006616 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 faa8 	bl	8006acc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	695b      	ldr	r3, [r3, #20]
 8006582:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006586:	2b00      	cmp	r3, #0
 8006588:	d041      	beq.n	800660e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3314      	adds	r3, #20
 8006590:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006594:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80065a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80065a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	3314      	adds	r3, #20
 80065b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80065b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80065ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80065c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80065c6:	e841 2300 	strex	r3, r2, [r1]
 80065ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80065ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d1d9      	bne.n	800658a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d013      	beq.n	8006606 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e2:	4a7e      	ldr	r2, [pc, #504]	; (80067dc <HAL_UART_IRQHandler+0x3e0>)
 80065e4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fa ff06 	bl	80013fc <HAL_DMA_Abort_IT>
 80065f0:	4603      	mov	r3, r0
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d016      	beq.n	8006624 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006600:	4610      	mov	r0, r2
 8006602:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006604:	e00e      	b.n	8006624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 f99c 	bl	8006944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800660c:	e00a      	b.n	8006624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800660e:	6878      	ldr	r0, [r7, #4]
 8006610:	f000 f998 	bl	8006944 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006614:	e006      	b.n	8006624 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f000 f994 	bl	8006944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8006622:	e175      	b.n	8006910 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006624:	bf00      	nop
    return;
 8006626:	e173      	b.n	8006910 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662c:	2b01      	cmp	r3, #1
 800662e:	f040 814f 	bne.w	80068d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006632:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006636:	f003 0310 	and.w	r3, r3, #16
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 8148 	beq.w	80068d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 8141 	beq.w	80068d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800664e:	2300      	movs	r3, #0
 8006650:	60bb      	str	r3, [r7, #8]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60bb      	str	r3, [r7, #8]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	60bb      	str	r3, [r7, #8]
 8006662:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 80b6 	beq.w	80067e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006680:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8145 	beq.w	8006914 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800668e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006692:	429a      	cmp	r2, r3
 8006694:	f080 813e 	bcs.w	8006914 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800669e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	2b20      	cmp	r3, #32
 80066a8:	f000 8088 	beq.w	80067bc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	330c      	adds	r3, #12
 80066b2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80066c2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80066c6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	330c      	adds	r3, #12
 80066d4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80066d8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066e4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066e8:	e841 2300 	strex	r3, r2, [r1]
 80066ec:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066f0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d1d9      	bne.n	80066ac <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	3314      	adds	r3, #20
 80066fe:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006700:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006702:	e853 3f00 	ldrex	r3, [r3]
 8006706:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800670a:	f023 0301 	bic.w	r3, r3, #1
 800670e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	3314      	adds	r3, #20
 8006718:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800671c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006720:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006722:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006724:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006728:	e841 2300 	strex	r3, r2, [r1]
 800672c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800672e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e1      	bne.n	80066f8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3314      	adds	r3, #20
 800673a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800673e:	e853 3f00 	ldrex	r3, [r3]
 8006742:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006744:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006746:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800674a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3314      	adds	r3, #20
 8006754:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006758:	66fa      	str	r2, [r7, #108]	; 0x6c
 800675a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800675e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006760:	e841 2300 	strex	r3, r2, [r1]
 8006764:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006766:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006768:	2b00      	cmp	r3, #0
 800676a:	d1e3      	bne.n	8006734 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2220      	movs	r2, #32
 8006770:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	330c      	adds	r3, #12
 8006780:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006784:	e853 3f00 	ldrex	r3, [r3]
 8006788:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800678a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800678c:	f023 0310 	bic.w	r3, r3, #16
 8006790:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	330c      	adds	r3, #12
 800679a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800679e:	65ba      	str	r2, [r7, #88]	; 0x58
 80067a0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80067a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80067a6:	e841 2300 	strex	r3, r2, [r1]
 80067aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80067ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d1e3      	bne.n	800677a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	4618      	mov	r0, r3
 80067b8:	f7fa fde4 	bl	8001384 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2202      	movs	r2, #2
 80067c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067ca:	b29b      	uxth	r3, r3
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	4619      	mov	r1, r3
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f8c8 	bl	8006968 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067d8:	e09c      	b.n	8006914 <HAL_UART_IRQHandler+0x518>
 80067da:	bf00      	nop
 80067dc:	08006b91 	.word	0x08006b91
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067e8:	b29b      	uxth	r3, r3
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	f000 808e 	beq.w	8006918 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80067fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006800:	2b00      	cmp	r3, #0
 8006802:	f000 8089 	beq.w	8006918 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	330c      	adds	r3, #12
 800680c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006818:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800681c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	330c      	adds	r3, #12
 8006826:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800682a:	647a      	str	r2, [r7, #68]	; 0x44
 800682c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006830:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e3      	bne.n	8006806 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	3314      	adds	r3, #20
 8006844:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	623b      	str	r3, [r7, #32]
   return(result);
 800684e:	6a3b      	ldr	r3, [r7, #32]
 8006850:	f023 0301 	bic.w	r3, r3, #1
 8006854:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	3314      	adds	r3, #20
 800685e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006862:	633a      	str	r2, [r7, #48]	; 0x30
 8006864:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e3      	bne.n	800683e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	330c      	adds	r3, #12
 800688a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	e853 3f00 	ldrex	r3, [r3]
 8006892:	60fb      	str	r3, [r7, #12]
   return(result);
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	f023 0310 	bic.w	r3, r3, #16
 800689a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	330c      	adds	r3, #12
 80068a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80068a8:	61fa      	str	r2, [r7, #28]
 80068aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	69b9      	ldr	r1, [r7, #24]
 80068ae:	69fa      	ldr	r2, [r7, #28]
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	617b      	str	r3, [r7, #20]
   return(result);
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e3      	bne.n	8006884 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2202      	movs	r2, #2
 80068c0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80068c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f000 f84d 	bl	8006968 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80068ce:	e023      	b.n	8006918 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80068d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d009      	beq.n	80068f0 <HAL_UART_IRQHandler+0x4f4>
 80068dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 f9c5 	bl	8006c78 <UART_Transmit_IT>
    return;
 80068ee:	e014      	b.n	800691a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00e      	beq.n	800691a <HAL_UART_IRQHandler+0x51e>
 80068fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006904:	2b00      	cmp	r3, #0
 8006906:	d008      	beq.n	800691a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006908:	6878      	ldr	r0, [r7, #4]
 800690a:	f000 fa04 	bl	8006d16 <UART_EndTransmit_IT>
    return;
 800690e:	e004      	b.n	800691a <HAL_UART_IRQHandler+0x51e>
    return;
 8006910:	bf00      	nop
 8006912:	e002      	b.n	800691a <HAL_UART_IRQHandler+0x51e>
      return;
 8006914:	bf00      	nop
 8006916:	e000      	b.n	800691a <HAL_UART_IRQHandler+0x51e>
      return;
 8006918:	bf00      	nop
  }
}
 800691a:	37e8      	adds	r7, #232	; 0xe8
 800691c:	46bd      	mov	sp, r7
 800691e:	bd80      	pop	{r7, pc}

08006920 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006928:	bf00      	nop
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800693a:	bf00      	nop
 800693c:	370c      	adds	r7, #12
 800693e:	46bd      	mov	sp, r7
 8006940:	bc80      	pop	{r7}
 8006942:	4770      	bx	lr

08006944 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006944:	b480      	push	{r7}
 8006946:	b083      	sub	sp, #12
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	bc80      	pop	{r7}
 8006954:	4770      	bx	lr

08006956 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8006956:	b480      	push	{r7}
 8006958:	b083      	sub	sp, #12
 800695a:	af00      	add	r7, sp, #0
 800695c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800695e:	bf00      	nop
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	bc80      	pop	{r7}
 8006966:	4770      	bx	lr

08006968 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006968:	b480      	push	{r7}
 800696a:	b083      	sub	sp, #12
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	460b      	mov	r3, r1
 8006972:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006974:	bf00      	nop
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	bc80      	pop	{r7}
 800697c:	4770      	bx	lr

0800697e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b090      	sub	sp, #64	; 0x40
 8006982:	af00      	add	r7, sp, #0
 8006984:	60f8      	str	r0, [r7, #12]
 8006986:	60b9      	str	r1, [r7, #8]
 8006988:	603b      	str	r3, [r7, #0]
 800698a:	4613      	mov	r3, r2
 800698c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800698e:	e050      	b.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006996:	d04c      	beq.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006998:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800699a:	2b00      	cmp	r3, #0
 800699c:	d007      	beq.n	80069ae <UART_WaitOnFlagUntilTimeout+0x30>
 800699e:	f7fa fafb 	bl	8000f98 <HAL_GetTick>
 80069a2:	4602      	mov	r2, r0
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	1ad3      	subs	r3, r2, r3
 80069a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069aa:	429a      	cmp	r2, r3
 80069ac:	d241      	bcs.n	8006a32 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	330c      	adds	r3, #12
 80069b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069b8:	e853 3f00 	ldrex	r3, [r3]
 80069bc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80069c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	330c      	adds	r3, #12
 80069cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80069ce:	637a      	str	r2, [r7, #52]	; 0x34
 80069d0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80069d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80069d6:	e841 2300 	strex	r3, r2, [r1]
 80069da:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80069dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d1e5      	bne.n	80069ae <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	3314      	adds	r3, #20
 80069e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	613b      	str	r3, [r7, #16]
   return(result);
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f023 0301 	bic.w	r3, r3, #1
 80069f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	3314      	adds	r3, #20
 8006a00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a02:	623a      	str	r2, [r7, #32]
 8006a04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a06:	69f9      	ldr	r1, [r7, #28]
 8006a08:	6a3a      	ldr	r2, [r7, #32]
 8006a0a:	e841 2300 	strex	r3, r2, [r1]
 8006a0e:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1e5      	bne.n	80069e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8006a2e:	2303      	movs	r3, #3
 8006a30:	e00f      	b.n	8006a52 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	681a      	ldr	r2, [r3, #0]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	4013      	ands	r3, r2
 8006a3c:	68ba      	ldr	r2, [r7, #8]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	bf0c      	ite	eq
 8006a42:	2301      	moveq	r3, #1
 8006a44:	2300      	movne	r3, #0
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	461a      	mov	r2, r3
 8006a4a:	79fb      	ldrb	r3, [r7, #7]
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d09f      	beq.n	8006990 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3740      	adds	r7, #64	; 0x40
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}

08006a5a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a5a:	b480      	push	{r7}
 8006a5c:	b085      	sub	sp, #20
 8006a5e:	af00      	add	r7, sp, #0
 8006a60:	60f8      	str	r0, [r7, #12]
 8006a62:	60b9      	str	r1, [r7, #8]
 8006a64:	4613      	mov	r3, r2
 8006a66:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	88fa      	ldrh	r2, [r7, #6]
 8006a72:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	88fa      	ldrh	r2, [r7, #6]
 8006a78:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2222      	movs	r2, #34	; 0x22
 8006a84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d007      	beq.n	8006aa0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	68da      	ldr	r2, [r3, #12]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a9e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	695a      	ldr	r2, [r3, #20]
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f042 0201 	orr.w	r2, r2, #1
 8006aae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	68da      	ldr	r2, [r3, #12]
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f042 0220 	orr.w	r2, r2, #32
 8006abe:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3714      	adds	r7, #20
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bc80      	pop	{r7}
 8006aca:	4770      	bx	lr

08006acc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b095      	sub	sp, #84	; 0x54
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	330c      	adds	r3, #12
 8006ada:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ae6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006aea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	330c      	adds	r3, #12
 8006af2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006af4:	643a      	str	r2, [r7, #64]	; 0x40
 8006af6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006af8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006afa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006afc:	e841 2300 	strex	r3, r2, [r1]
 8006b00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006b02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d1e5      	bne.n	8006ad4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	3314      	adds	r3, #20
 8006b0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	6a3b      	ldr	r3, [r7, #32]
 8006b12:	e853 3f00 	ldrex	r3, [r3]
 8006b16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006b18:	69fb      	ldr	r3, [r7, #28]
 8006b1a:	f023 0301 	bic.w	r3, r3, #1
 8006b1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3314      	adds	r3, #20
 8006b26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006b2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006b2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006b30:	e841 2300 	strex	r3, r2, [r1]
 8006b34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1e5      	bne.n	8006b08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b40:	2b01      	cmp	r3, #1
 8006b42:	d119      	bne.n	8006b78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	330c      	adds	r3, #12
 8006b4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	e853 3f00 	ldrex	r3, [r3]
 8006b52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f023 0310 	bic.w	r3, r3, #16
 8006b5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	330c      	adds	r3, #12
 8006b62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b64:	61ba      	str	r2, [r7, #24]
 8006b66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b68:	6979      	ldr	r1, [r7, #20]
 8006b6a:	69ba      	ldr	r2, [r7, #24]
 8006b6c:	e841 2300 	strex	r3, r2, [r1]
 8006b70:	613b      	str	r3, [r7, #16]
   return(result);
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1e5      	bne.n	8006b44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2220      	movs	r2, #32
 8006b7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b86:	bf00      	nop
 8006b88:	3754      	adds	r7, #84	; 0x54
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bc80      	pop	{r7}
 8006b8e:	4770      	bx	lr

08006b90 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f7ff feca 	bl	8006944 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006bb0:	bf00      	nop
 8006bb2:	3710      	adds	r7, #16
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	bd80      	pop	{r7, pc}

08006bb8 <UART_DMATxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b084      	sub	sp, #16
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	2200      	movs	r2, #0
 8006bcc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d004      	beq.n	8006be0 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d117      	bne.n	8006c10 <UART_DMATxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2220      	movs	r2, #32
 8006bfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	2200      	movs	r2, #0
 8006c06:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	f7ff fea4 	bl	8006956 <HAL_UART_AbortCpltCallback>
 8006c0e:	e000      	b.n	8006c12 <UART_DMATxAbortCallback+0x5a>
      return;
 8006c10:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c12:	3710      	adds	r7, #16
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}

08006c18 <UART_DMARxAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c24:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d004      	beq.n	8006c40 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d117      	bne.n	8006c70 <UART_DMARxAbortCallback+0x58>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0x00U;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	2200      	movs	r2, #0
 8006c44:	84da      	strh	r2, [r3, #38]	; 0x26
  huart->RxXferCount = 0x00U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Reset ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	2200      	movs	r2, #0
 8006c50:	645a      	str	r2, [r3, #68]	; 0x44

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2220      	movs	r2, #32
 8006c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 8006c68:	68f8      	ldr	r0, [r7, #12]
 8006c6a:	f7ff fe74 	bl	8006956 <HAL_UART_AbortCpltCallback>
 8006c6e:	e000      	b.n	8006c72 <UART_DMARxAbortCallback+0x5a>
      return;
 8006c70:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006c78:	b480      	push	{r7}
 8006c7a:	b085      	sub	sp, #20
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c86:	b2db      	uxtb	r3, r3
 8006c88:	2b21      	cmp	r3, #33	; 0x21
 8006c8a:	d13e      	bne.n	8006d0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	689b      	ldr	r3, [r3, #8]
 8006c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c94:	d114      	bne.n	8006cc0 <UART_Transmit_IT+0x48>
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d110      	bne.n	8006cc0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a1b      	ldr	r3, [r3, #32]
 8006ca2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	881b      	ldrh	r3, [r3, #0]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	1c9a      	adds	r2, r3, #2
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	621a      	str	r2, [r3, #32]
 8006cbe:	e008      	b.n	8006cd2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	1c59      	adds	r1, r3, #1
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	6211      	str	r1, [r2, #32]
 8006cca:	781a      	ldrb	r2, [r3, #0]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	3b01      	subs	r3, #1
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	687a      	ldr	r2, [r7, #4]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10f      	bne.n	8006d06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68da      	ldr	r2, [r3, #12]
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cf4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	68da      	ldr	r2, [r3, #12]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006d04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006d06:	2300      	movs	r3, #0
 8006d08:	e000      	b.n	8006d0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006d0a:	2302      	movs	r3, #2
  }
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3714      	adds	r7, #20
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr

08006d16 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b082      	sub	sp, #8
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68da      	ldr	r2, [r3, #12]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d2c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2220      	movs	r2, #32
 8006d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d36:	6878      	ldr	r0, [r7, #4]
 8006d38:	f7ff fdf2 	bl	8006920 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006d3c:	2300      	movs	r3, #0
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3708      	adds	r7, #8
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}

08006d46 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006d46:	b580      	push	{r7, lr}
 8006d48:	b08c      	sub	sp, #48	; 0x30
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006d54:	b2db      	uxtb	r3, r3
 8006d56:	2b22      	cmp	r3, #34	; 0x22
 8006d58:	f040 80ae 	bne.w	8006eb8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d64:	d117      	bne.n	8006d96 <UART_Receive_IT+0x50>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d113      	bne.n	8006d96 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d76:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685b      	ldr	r3, [r3, #4]
 8006d7e:	b29b      	uxth	r3, r3
 8006d80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d88:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d8e:	1c9a      	adds	r2, r3, #2
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	629a      	str	r2, [r3, #40]	; 0x28
 8006d94:	e026      	b.n	8006de4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006da8:	d007      	beq.n	8006dba <UART_Receive_IT+0x74>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	689b      	ldr	r3, [r3, #8]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d10a      	bne.n	8006dc8 <UART_Receive_IT+0x82>
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d106      	bne.n	8006dc8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	b2da      	uxtb	r2, r3
 8006dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dc4:	701a      	strb	r2, [r3, #0]
 8006dc6:	e008      	b.n	8006dda <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	b2db      	uxtb	r3, r3
 8006dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd4:	b2da      	uxtb	r2, r3
 8006dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dd8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006dde:	1c5a      	adds	r2, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006de8:	b29b      	uxth	r3, r3
 8006dea:	3b01      	subs	r3, #1
 8006dec:	b29b      	uxth	r3, r3
 8006dee:	687a      	ldr	r2, [r7, #4]
 8006df0:	4619      	mov	r1, r3
 8006df2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d15d      	bne.n	8006eb4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68da      	ldr	r2, [r3, #12]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0220 	bic.w	r2, r2, #32
 8006e06:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006e16:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695a      	ldr	r2, [r3, #20]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d135      	bne.n	8006eaa <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	2200      	movs	r2, #0
 8006e42:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	613b      	str	r3, [r7, #16]
   return(result);
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	f023 0310 	bic.w	r3, r3, #16
 8006e5a:	627b      	str	r3, [r7, #36]	; 0x24
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e64:	623a      	str	r2, [r7, #32]
 8006e66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	69f9      	ldr	r1, [r7, #28]
 8006e6a:	6a3a      	ldr	r2, [r7, #32]
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f003 0310 	and.w	r3, r3, #16
 8006e82:	2b10      	cmp	r3, #16
 8006e84:	d10a      	bne.n	8006e9c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	60fb      	str	r3, [r7, #12]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	60fb      	str	r3, [r7, #12]
 8006e9a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006ea0:	4619      	mov	r1, r3
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f7ff fd60 	bl	8006968 <HAL_UARTEx_RxEventCallback>
 8006ea8:	e002      	b.n	8006eb0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f7ff fd41 	bl	8006932 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006eb0:	2300      	movs	r3, #0
 8006eb2:	e002      	b.n	8006eba <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	e000      	b.n	8006eba <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006eb8:	2302      	movs	r3, #2
  }
}
 8006eba:	4618      	mov	r0, r3
 8006ebc:	3730      	adds	r7, #48	; 0x30
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	bd80      	pop	{r7, pc}
	...

08006ec4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b084      	sub	sp, #16
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	691b      	ldr	r3, [r3, #16]
 8006ed2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	68da      	ldr	r2, [r3, #12]
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	430a      	orrs	r2, r1
 8006ee0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689a      	ldr	r2, [r3, #8]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	691b      	ldr	r3, [r3, #16]
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	695b      	ldr	r3, [r3, #20]
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68db      	ldr	r3, [r3, #12]
 8006efa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8006efe:	f023 030c 	bic.w	r3, r3, #12
 8006f02:	687a      	ldr	r2, [r7, #4]
 8006f04:	6812      	ldr	r2, [r2, #0]
 8006f06:	68b9      	ldr	r1, [r7, #8]
 8006f08:	430b      	orrs	r3, r1
 8006f0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	695b      	ldr	r3, [r3, #20]
 8006f12:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	699a      	ldr	r2, [r3, #24]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	430a      	orrs	r2, r1
 8006f20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a2c      	ldr	r2, [pc, #176]	; (8006fd8 <UART_SetConfig+0x114>)
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d103      	bne.n	8006f34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006f2c:	f7fd feee 	bl	8004d0c <HAL_RCC_GetPCLK2Freq>
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	e002      	b.n	8006f3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006f34:	f7fd fed6 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8006f38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	009a      	lsls	r2, r3, #2
 8006f44:	441a      	add	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	685b      	ldr	r3, [r3, #4]
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f50:	4a22      	ldr	r2, [pc, #136]	; (8006fdc <UART_SetConfig+0x118>)
 8006f52:	fba2 2303 	umull	r2, r3, r2, r3
 8006f56:	095b      	lsrs	r3, r3, #5
 8006f58:	0119      	lsls	r1, r3, #4
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4613      	mov	r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	4413      	add	r3, r2
 8006f62:	009a      	lsls	r2, r3, #2
 8006f64:	441a      	add	r2, r3
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006f70:	4b1a      	ldr	r3, [pc, #104]	; (8006fdc <UART_SetConfig+0x118>)
 8006f72:	fba3 0302 	umull	r0, r3, r3, r2
 8006f76:	095b      	lsrs	r3, r3, #5
 8006f78:	2064      	movs	r0, #100	; 0x64
 8006f7a:	fb00 f303 	mul.w	r3, r0, r3
 8006f7e:	1ad3      	subs	r3, r2, r3
 8006f80:	011b      	lsls	r3, r3, #4
 8006f82:	3332      	adds	r3, #50	; 0x32
 8006f84:	4a15      	ldr	r2, [pc, #84]	; (8006fdc <UART_SetConfig+0x118>)
 8006f86:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8a:	095b      	lsrs	r3, r3, #5
 8006f8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f90:	4419      	add	r1, r3
 8006f92:	68fa      	ldr	r2, [r7, #12]
 8006f94:	4613      	mov	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	4413      	add	r3, r2
 8006f9a:	009a      	lsls	r2, r3, #2
 8006f9c:	441a      	add	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	685b      	ldr	r3, [r3, #4]
 8006fa2:	009b      	lsls	r3, r3, #2
 8006fa4:	fbb2 f2f3 	udiv	r2, r2, r3
 8006fa8:	4b0c      	ldr	r3, [pc, #48]	; (8006fdc <UART_SetConfig+0x118>)
 8006faa:	fba3 0302 	umull	r0, r3, r3, r2
 8006fae:	095b      	lsrs	r3, r3, #5
 8006fb0:	2064      	movs	r0, #100	; 0x64
 8006fb2:	fb00 f303 	mul.w	r3, r0, r3
 8006fb6:	1ad3      	subs	r3, r2, r3
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	3332      	adds	r3, #50	; 0x32
 8006fbc:	4a07      	ldr	r2, [pc, #28]	; (8006fdc <UART_SetConfig+0x118>)
 8006fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006fc2:	095b      	lsrs	r3, r3, #5
 8006fc4:	f003 020f 	and.w	r2, r3, #15
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	440a      	add	r2, r1
 8006fce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8006fd0:	bf00      	nop
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}
 8006fd8:	40013800 	.word	0x40013800
 8006fdc:	51eb851f 	.word	0x51eb851f

08006fe0 <__errno>:
 8006fe0:	4b01      	ldr	r3, [pc, #4]	; (8006fe8 <__errno+0x8>)
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	4770      	bx	lr
 8006fe6:	bf00      	nop
 8006fe8:	200003f4 	.word	0x200003f4

08006fec <__libc_init_array>:
 8006fec:	b570      	push	{r4, r5, r6, lr}
 8006fee:	2600      	movs	r6, #0
 8006ff0:	4d0c      	ldr	r5, [pc, #48]	; (8007024 <__libc_init_array+0x38>)
 8006ff2:	4c0d      	ldr	r4, [pc, #52]	; (8007028 <__libc_init_array+0x3c>)
 8006ff4:	1b64      	subs	r4, r4, r5
 8006ff6:	10a4      	asrs	r4, r4, #2
 8006ff8:	42a6      	cmp	r6, r4
 8006ffa:	d109      	bne.n	8007010 <__libc_init_array+0x24>
 8006ffc:	f000 fc9c 	bl	8007938 <_init>
 8007000:	2600      	movs	r6, #0
 8007002:	4d0a      	ldr	r5, [pc, #40]	; (800702c <__libc_init_array+0x40>)
 8007004:	4c0a      	ldr	r4, [pc, #40]	; (8007030 <__libc_init_array+0x44>)
 8007006:	1b64      	subs	r4, r4, r5
 8007008:	10a4      	asrs	r4, r4, #2
 800700a:	42a6      	cmp	r6, r4
 800700c:	d105      	bne.n	800701a <__libc_init_array+0x2e>
 800700e:	bd70      	pop	{r4, r5, r6, pc}
 8007010:	f855 3b04 	ldr.w	r3, [r5], #4
 8007014:	4798      	blx	r3
 8007016:	3601      	adds	r6, #1
 8007018:	e7ee      	b.n	8006ff8 <__libc_init_array+0xc>
 800701a:	f855 3b04 	ldr.w	r3, [r5], #4
 800701e:	4798      	blx	r3
 8007020:	3601      	adds	r6, #1
 8007022:	e7f2      	b.n	800700a <__libc_init_array+0x1e>
 8007024:	080079f8 	.word	0x080079f8
 8007028:	080079f8 	.word	0x080079f8
 800702c:	080079f8 	.word	0x080079f8
 8007030:	080079fc 	.word	0x080079fc

08007034 <memset>:
 8007034:	4603      	mov	r3, r0
 8007036:	4402      	add	r2, r0
 8007038:	4293      	cmp	r3, r2
 800703a:	d100      	bne.n	800703e <memset+0xa>
 800703c:	4770      	bx	lr
 800703e:	f803 1b01 	strb.w	r1, [r3], #1
 8007042:	e7f9      	b.n	8007038 <memset+0x4>

08007044 <siprintf>:
 8007044:	b40e      	push	{r1, r2, r3}
 8007046:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800704a:	b500      	push	{lr}
 800704c:	b09c      	sub	sp, #112	; 0x70
 800704e:	ab1d      	add	r3, sp, #116	; 0x74
 8007050:	9002      	str	r0, [sp, #8]
 8007052:	9006      	str	r0, [sp, #24]
 8007054:	9107      	str	r1, [sp, #28]
 8007056:	9104      	str	r1, [sp, #16]
 8007058:	4808      	ldr	r0, [pc, #32]	; (800707c <siprintf+0x38>)
 800705a:	4909      	ldr	r1, [pc, #36]	; (8007080 <siprintf+0x3c>)
 800705c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007060:	9105      	str	r1, [sp, #20]
 8007062:	6800      	ldr	r0, [r0, #0]
 8007064:	a902      	add	r1, sp, #8
 8007066:	9301      	str	r3, [sp, #4]
 8007068:	f000 f868 	bl	800713c <_svfiprintf_r>
 800706c:	2200      	movs	r2, #0
 800706e:	9b02      	ldr	r3, [sp, #8]
 8007070:	701a      	strb	r2, [r3, #0]
 8007072:	b01c      	add	sp, #112	; 0x70
 8007074:	f85d eb04 	ldr.w	lr, [sp], #4
 8007078:	b003      	add	sp, #12
 800707a:	4770      	bx	lr
 800707c:	200003f4 	.word	0x200003f4
 8007080:	ffff0208 	.word	0xffff0208

08007084 <__ssputs_r>:
 8007084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007088:	688e      	ldr	r6, [r1, #8]
 800708a:	4682      	mov	sl, r0
 800708c:	429e      	cmp	r6, r3
 800708e:	460c      	mov	r4, r1
 8007090:	4690      	mov	r8, r2
 8007092:	461f      	mov	r7, r3
 8007094:	d838      	bhi.n	8007108 <__ssputs_r+0x84>
 8007096:	898a      	ldrh	r2, [r1, #12]
 8007098:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800709c:	d032      	beq.n	8007104 <__ssputs_r+0x80>
 800709e:	6825      	ldr	r5, [r4, #0]
 80070a0:	6909      	ldr	r1, [r1, #16]
 80070a2:	3301      	adds	r3, #1
 80070a4:	eba5 0901 	sub.w	r9, r5, r1
 80070a8:	6965      	ldr	r5, [r4, #20]
 80070aa:	444b      	add	r3, r9
 80070ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80070b0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80070b4:	106d      	asrs	r5, r5, #1
 80070b6:	429d      	cmp	r5, r3
 80070b8:	bf38      	it	cc
 80070ba:	461d      	movcc	r5, r3
 80070bc:	0553      	lsls	r3, r2, #21
 80070be:	d531      	bpl.n	8007124 <__ssputs_r+0xa0>
 80070c0:	4629      	mov	r1, r5
 80070c2:	f000 fb6f 	bl	80077a4 <_malloc_r>
 80070c6:	4606      	mov	r6, r0
 80070c8:	b950      	cbnz	r0, 80070e0 <__ssputs_r+0x5c>
 80070ca:	230c      	movs	r3, #12
 80070cc:	f04f 30ff 	mov.w	r0, #4294967295
 80070d0:	f8ca 3000 	str.w	r3, [sl]
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070da:	81a3      	strh	r3, [r4, #12]
 80070dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070e0:	464a      	mov	r2, r9
 80070e2:	6921      	ldr	r1, [r4, #16]
 80070e4:	f000 face 	bl	8007684 <memcpy>
 80070e8:	89a3      	ldrh	r3, [r4, #12]
 80070ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80070ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070f2:	81a3      	strh	r3, [r4, #12]
 80070f4:	6126      	str	r6, [r4, #16]
 80070f6:	444e      	add	r6, r9
 80070f8:	6026      	str	r6, [r4, #0]
 80070fa:	463e      	mov	r6, r7
 80070fc:	6165      	str	r5, [r4, #20]
 80070fe:	eba5 0509 	sub.w	r5, r5, r9
 8007102:	60a5      	str	r5, [r4, #8]
 8007104:	42be      	cmp	r6, r7
 8007106:	d900      	bls.n	800710a <__ssputs_r+0x86>
 8007108:	463e      	mov	r6, r7
 800710a:	4632      	mov	r2, r6
 800710c:	4641      	mov	r1, r8
 800710e:	6820      	ldr	r0, [r4, #0]
 8007110:	f000 fac6 	bl	80076a0 <memmove>
 8007114:	68a3      	ldr	r3, [r4, #8]
 8007116:	2000      	movs	r0, #0
 8007118:	1b9b      	subs	r3, r3, r6
 800711a:	60a3      	str	r3, [r4, #8]
 800711c:	6823      	ldr	r3, [r4, #0]
 800711e:	4433      	add	r3, r6
 8007120:	6023      	str	r3, [r4, #0]
 8007122:	e7db      	b.n	80070dc <__ssputs_r+0x58>
 8007124:	462a      	mov	r2, r5
 8007126:	f000 fbb1 	bl	800788c <_realloc_r>
 800712a:	4606      	mov	r6, r0
 800712c:	2800      	cmp	r0, #0
 800712e:	d1e1      	bne.n	80070f4 <__ssputs_r+0x70>
 8007130:	4650      	mov	r0, sl
 8007132:	6921      	ldr	r1, [r4, #16]
 8007134:	f000 face 	bl	80076d4 <_free_r>
 8007138:	e7c7      	b.n	80070ca <__ssputs_r+0x46>
	...

0800713c <_svfiprintf_r>:
 800713c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007140:	4698      	mov	r8, r3
 8007142:	898b      	ldrh	r3, [r1, #12]
 8007144:	4607      	mov	r7, r0
 8007146:	061b      	lsls	r3, r3, #24
 8007148:	460d      	mov	r5, r1
 800714a:	4614      	mov	r4, r2
 800714c:	b09d      	sub	sp, #116	; 0x74
 800714e:	d50e      	bpl.n	800716e <_svfiprintf_r+0x32>
 8007150:	690b      	ldr	r3, [r1, #16]
 8007152:	b963      	cbnz	r3, 800716e <_svfiprintf_r+0x32>
 8007154:	2140      	movs	r1, #64	; 0x40
 8007156:	f000 fb25 	bl	80077a4 <_malloc_r>
 800715a:	6028      	str	r0, [r5, #0]
 800715c:	6128      	str	r0, [r5, #16]
 800715e:	b920      	cbnz	r0, 800716a <_svfiprintf_r+0x2e>
 8007160:	230c      	movs	r3, #12
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	f04f 30ff 	mov.w	r0, #4294967295
 8007168:	e0d1      	b.n	800730e <_svfiprintf_r+0x1d2>
 800716a:	2340      	movs	r3, #64	; 0x40
 800716c:	616b      	str	r3, [r5, #20]
 800716e:	2300      	movs	r3, #0
 8007170:	9309      	str	r3, [sp, #36]	; 0x24
 8007172:	2320      	movs	r3, #32
 8007174:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007178:	2330      	movs	r3, #48	; 0x30
 800717a:	f04f 0901 	mov.w	r9, #1
 800717e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007182:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007328 <_svfiprintf_r+0x1ec>
 8007186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800718a:	4623      	mov	r3, r4
 800718c:	469a      	mov	sl, r3
 800718e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007192:	b10a      	cbz	r2, 8007198 <_svfiprintf_r+0x5c>
 8007194:	2a25      	cmp	r2, #37	; 0x25
 8007196:	d1f9      	bne.n	800718c <_svfiprintf_r+0x50>
 8007198:	ebba 0b04 	subs.w	fp, sl, r4
 800719c:	d00b      	beq.n	80071b6 <_svfiprintf_r+0x7a>
 800719e:	465b      	mov	r3, fp
 80071a0:	4622      	mov	r2, r4
 80071a2:	4629      	mov	r1, r5
 80071a4:	4638      	mov	r0, r7
 80071a6:	f7ff ff6d 	bl	8007084 <__ssputs_r>
 80071aa:	3001      	adds	r0, #1
 80071ac:	f000 80aa 	beq.w	8007304 <_svfiprintf_r+0x1c8>
 80071b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80071b2:	445a      	add	r2, fp
 80071b4:	9209      	str	r2, [sp, #36]	; 0x24
 80071b6:	f89a 3000 	ldrb.w	r3, [sl]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	f000 80a2 	beq.w	8007304 <_svfiprintf_r+0x1c8>
 80071c0:	2300      	movs	r3, #0
 80071c2:	f04f 32ff 	mov.w	r2, #4294967295
 80071c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80071ca:	f10a 0a01 	add.w	sl, sl, #1
 80071ce:	9304      	str	r3, [sp, #16]
 80071d0:	9307      	str	r3, [sp, #28]
 80071d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80071d6:	931a      	str	r3, [sp, #104]	; 0x68
 80071d8:	4654      	mov	r4, sl
 80071da:	2205      	movs	r2, #5
 80071dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80071e0:	4851      	ldr	r0, [pc, #324]	; (8007328 <_svfiprintf_r+0x1ec>)
 80071e2:	f000 fa41 	bl	8007668 <memchr>
 80071e6:	9a04      	ldr	r2, [sp, #16]
 80071e8:	b9d8      	cbnz	r0, 8007222 <_svfiprintf_r+0xe6>
 80071ea:	06d0      	lsls	r0, r2, #27
 80071ec:	bf44      	itt	mi
 80071ee:	2320      	movmi	r3, #32
 80071f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071f4:	0711      	lsls	r1, r2, #28
 80071f6:	bf44      	itt	mi
 80071f8:	232b      	movmi	r3, #43	; 0x2b
 80071fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071fe:	f89a 3000 	ldrb.w	r3, [sl]
 8007202:	2b2a      	cmp	r3, #42	; 0x2a
 8007204:	d015      	beq.n	8007232 <_svfiprintf_r+0xf6>
 8007206:	4654      	mov	r4, sl
 8007208:	2000      	movs	r0, #0
 800720a:	f04f 0c0a 	mov.w	ip, #10
 800720e:	9a07      	ldr	r2, [sp, #28]
 8007210:	4621      	mov	r1, r4
 8007212:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007216:	3b30      	subs	r3, #48	; 0x30
 8007218:	2b09      	cmp	r3, #9
 800721a:	d94e      	bls.n	80072ba <_svfiprintf_r+0x17e>
 800721c:	b1b0      	cbz	r0, 800724c <_svfiprintf_r+0x110>
 800721e:	9207      	str	r2, [sp, #28]
 8007220:	e014      	b.n	800724c <_svfiprintf_r+0x110>
 8007222:	eba0 0308 	sub.w	r3, r0, r8
 8007226:	fa09 f303 	lsl.w	r3, r9, r3
 800722a:	4313      	orrs	r3, r2
 800722c:	46a2      	mov	sl, r4
 800722e:	9304      	str	r3, [sp, #16]
 8007230:	e7d2      	b.n	80071d8 <_svfiprintf_r+0x9c>
 8007232:	9b03      	ldr	r3, [sp, #12]
 8007234:	1d19      	adds	r1, r3, #4
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	9103      	str	r1, [sp, #12]
 800723a:	2b00      	cmp	r3, #0
 800723c:	bfbb      	ittet	lt
 800723e:	425b      	neglt	r3, r3
 8007240:	f042 0202 	orrlt.w	r2, r2, #2
 8007244:	9307      	strge	r3, [sp, #28]
 8007246:	9307      	strlt	r3, [sp, #28]
 8007248:	bfb8      	it	lt
 800724a:	9204      	strlt	r2, [sp, #16]
 800724c:	7823      	ldrb	r3, [r4, #0]
 800724e:	2b2e      	cmp	r3, #46	; 0x2e
 8007250:	d10c      	bne.n	800726c <_svfiprintf_r+0x130>
 8007252:	7863      	ldrb	r3, [r4, #1]
 8007254:	2b2a      	cmp	r3, #42	; 0x2a
 8007256:	d135      	bne.n	80072c4 <_svfiprintf_r+0x188>
 8007258:	9b03      	ldr	r3, [sp, #12]
 800725a:	3402      	adds	r4, #2
 800725c:	1d1a      	adds	r2, r3, #4
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	9203      	str	r2, [sp, #12]
 8007262:	2b00      	cmp	r3, #0
 8007264:	bfb8      	it	lt
 8007266:	f04f 33ff 	movlt.w	r3, #4294967295
 800726a:	9305      	str	r3, [sp, #20]
 800726c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800732c <_svfiprintf_r+0x1f0>
 8007270:	2203      	movs	r2, #3
 8007272:	4650      	mov	r0, sl
 8007274:	7821      	ldrb	r1, [r4, #0]
 8007276:	f000 f9f7 	bl	8007668 <memchr>
 800727a:	b140      	cbz	r0, 800728e <_svfiprintf_r+0x152>
 800727c:	2340      	movs	r3, #64	; 0x40
 800727e:	eba0 000a 	sub.w	r0, r0, sl
 8007282:	fa03 f000 	lsl.w	r0, r3, r0
 8007286:	9b04      	ldr	r3, [sp, #16]
 8007288:	3401      	adds	r4, #1
 800728a:	4303      	orrs	r3, r0
 800728c:	9304      	str	r3, [sp, #16]
 800728e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007292:	2206      	movs	r2, #6
 8007294:	4826      	ldr	r0, [pc, #152]	; (8007330 <_svfiprintf_r+0x1f4>)
 8007296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800729a:	f000 f9e5 	bl	8007668 <memchr>
 800729e:	2800      	cmp	r0, #0
 80072a0:	d038      	beq.n	8007314 <_svfiprintf_r+0x1d8>
 80072a2:	4b24      	ldr	r3, [pc, #144]	; (8007334 <_svfiprintf_r+0x1f8>)
 80072a4:	bb1b      	cbnz	r3, 80072ee <_svfiprintf_r+0x1b2>
 80072a6:	9b03      	ldr	r3, [sp, #12]
 80072a8:	3307      	adds	r3, #7
 80072aa:	f023 0307 	bic.w	r3, r3, #7
 80072ae:	3308      	adds	r3, #8
 80072b0:	9303      	str	r3, [sp, #12]
 80072b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072b4:	4433      	add	r3, r6
 80072b6:	9309      	str	r3, [sp, #36]	; 0x24
 80072b8:	e767      	b.n	800718a <_svfiprintf_r+0x4e>
 80072ba:	460c      	mov	r4, r1
 80072bc:	2001      	movs	r0, #1
 80072be:	fb0c 3202 	mla	r2, ip, r2, r3
 80072c2:	e7a5      	b.n	8007210 <_svfiprintf_r+0xd4>
 80072c4:	2300      	movs	r3, #0
 80072c6:	f04f 0c0a 	mov.w	ip, #10
 80072ca:	4619      	mov	r1, r3
 80072cc:	3401      	adds	r4, #1
 80072ce:	9305      	str	r3, [sp, #20]
 80072d0:	4620      	mov	r0, r4
 80072d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80072d6:	3a30      	subs	r2, #48	; 0x30
 80072d8:	2a09      	cmp	r2, #9
 80072da:	d903      	bls.n	80072e4 <_svfiprintf_r+0x1a8>
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d0c5      	beq.n	800726c <_svfiprintf_r+0x130>
 80072e0:	9105      	str	r1, [sp, #20]
 80072e2:	e7c3      	b.n	800726c <_svfiprintf_r+0x130>
 80072e4:	4604      	mov	r4, r0
 80072e6:	2301      	movs	r3, #1
 80072e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80072ec:	e7f0      	b.n	80072d0 <_svfiprintf_r+0x194>
 80072ee:	ab03      	add	r3, sp, #12
 80072f0:	9300      	str	r3, [sp, #0]
 80072f2:	462a      	mov	r2, r5
 80072f4:	4638      	mov	r0, r7
 80072f6:	4b10      	ldr	r3, [pc, #64]	; (8007338 <_svfiprintf_r+0x1fc>)
 80072f8:	a904      	add	r1, sp, #16
 80072fa:	f3af 8000 	nop.w
 80072fe:	1c42      	adds	r2, r0, #1
 8007300:	4606      	mov	r6, r0
 8007302:	d1d6      	bne.n	80072b2 <_svfiprintf_r+0x176>
 8007304:	89ab      	ldrh	r3, [r5, #12]
 8007306:	065b      	lsls	r3, r3, #25
 8007308:	f53f af2c 	bmi.w	8007164 <_svfiprintf_r+0x28>
 800730c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800730e:	b01d      	add	sp, #116	; 0x74
 8007310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007314:	ab03      	add	r3, sp, #12
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	462a      	mov	r2, r5
 800731a:	4638      	mov	r0, r7
 800731c:	4b06      	ldr	r3, [pc, #24]	; (8007338 <_svfiprintf_r+0x1fc>)
 800731e:	a904      	add	r1, sp, #16
 8007320:	f000 f87c 	bl	800741c <_printf_i>
 8007324:	e7eb      	b.n	80072fe <_svfiprintf_r+0x1c2>
 8007326:	bf00      	nop
 8007328:	080079c2 	.word	0x080079c2
 800732c:	080079c8 	.word	0x080079c8
 8007330:	080079cc 	.word	0x080079cc
 8007334:	00000000 	.word	0x00000000
 8007338:	08007085 	.word	0x08007085

0800733c <_printf_common>:
 800733c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007340:	4616      	mov	r6, r2
 8007342:	4699      	mov	r9, r3
 8007344:	688a      	ldr	r2, [r1, #8]
 8007346:	690b      	ldr	r3, [r1, #16]
 8007348:	4607      	mov	r7, r0
 800734a:	4293      	cmp	r3, r2
 800734c:	bfb8      	it	lt
 800734e:	4613      	movlt	r3, r2
 8007350:	6033      	str	r3, [r6, #0]
 8007352:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007356:	460c      	mov	r4, r1
 8007358:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800735c:	b10a      	cbz	r2, 8007362 <_printf_common+0x26>
 800735e:	3301      	adds	r3, #1
 8007360:	6033      	str	r3, [r6, #0]
 8007362:	6823      	ldr	r3, [r4, #0]
 8007364:	0699      	lsls	r1, r3, #26
 8007366:	bf42      	ittt	mi
 8007368:	6833      	ldrmi	r3, [r6, #0]
 800736a:	3302      	addmi	r3, #2
 800736c:	6033      	strmi	r3, [r6, #0]
 800736e:	6825      	ldr	r5, [r4, #0]
 8007370:	f015 0506 	ands.w	r5, r5, #6
 8007374:	d106      	bne.n	8007384 <_printf_common+0x48>
 8007376:	f104 0a19 	add.w	sl, r4, #25
 800737a:	68e3      	ldr	r3, [r4, #12]
 800737c:	6832      	ldr	r2, [r6, #0]
 800737e:	1a9b      	subs	r3, r3, r2
 8007380:	42ab      	cmp	r3, r5
 8007382:	dc28      	bgt.n	80073d6 <_printf_common+0x9a>
 8007384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007388:	1e13      	subs	r3, r2, #0
 800738a:	6822      	ldr	r2, [r4, #0]
 800738c:	bf18      	it	ne
 800738e:	2301      	movne	r3, #1
 8007390:	0692      	lsls	r2, r2, #26
 8007392:	d42d      	bmi.n	80073f0 <_printf_common+0xb4>
 8007394:	4649      	mov	r1, r9
 8007396:	4638      	mov	r0, r7
 8007398:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800739c:	47c0      	blx	r8
 800739e:	3001      	adds	r0, #1
 80073a0:	d020      	beq.n	80073e4 <_printf_common+0xa8>
 80073a2:	6823      	ldr	r3, [r4, #0]
 80073a4:	68e5      	ldr	r5, [r4, #12]
 80073a6:	f003 0306 	and.w	r3, r3, #6
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	bf18      	it	ne
 80073ae:	2500      	movne	r5, #0
 80073b0:	6832      	ldr	r2, [r6, #0]
 80073b2:	f04f 0600 	mov.w	r6, #0
 80073b6:	68a3      	ldr	r3, [r4, #8]
 80073b8:	bf08      	it	eq
 80073ba:	1aad      	subeq	r5, r5, r2
 80073bc:	6922      	ldr	r2, [r4, #16]
 80073be:	bf08      	it	eq
 80073c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073c4:	4293      	cmp	r3, r2
 80073c6:	bfc4      	itt	gt
 80073c8:	1a9b      	subgt	r3, r3, r2
 80073ca:	18ed      	addgt	r5, r5, r3
 80073cc:	341a      	adds	r4, #26
 80073ce:	42b5      	cmp	r5, r6
 80073d0:	d11a      	bne.n	8007408 <_printf_common+0xcc>
 80073d2:	2000      	movs	r0, #0
 80073d4:	e008      	b.n	80073e8 <_printf_common+0xac>
 80073d6:	2301      	movs	r3, #1
 80073d8:	4652      	mov	r2, sl
 80073da:	4649      	mov	r1, r9
 80073dc:	4638      	mov	r0, r7
 80073de:	47c0      	blx	r8
 80073e0:	3001      	adds	r0, #1
 80073e2:	d103      	bne.n	80073ec <_printf_common+0xb0>
 80073e4:	f04f 30ff 	mov.w	r0, #4294967295
 80073e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ec:	3501      	adds	r5, #1
 80073ee:	e7c4      	b.n	800737a <_printf_common+0x3e>
 80073f0:	2030      	movs	r0, #48	; 0x30
 80073f2:	18e1      	adds	r1, r4, r3
 80073f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073f8:	1c5a      	adds	r2, r3, #1
 80073fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073fe:	4422      	add	r2, r4
 8007400:	3302      	adds	r3, #2
 8007402:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007406:	e7c5      	b.n	8007394 <_printf_common+0x58>
 8007408:	2301      	movs	r3, #1
 800740a:	4622      	mov	r2, r4
 800740c:	4649      	mov	r1, r9
 800740e:	4638      	mov	r0, r7
 8007410:	47c0      	blx	r8
 8007412:	3001      	adds	r0, #1
 8007414:	d0e6      	beq.n	80073e4 <_printf_common+0xa8>
 8007416:	3601      	adds	r6, #1
 8007418:	e7d9      	b.n	80073ce <_printf_common+0x92>
	...

0800741c <_printf_i>:
 800741c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007420:	7e0f      	ldrb	r7, [r1, #24]
 8007422:	4691      	mov	r9, r2
 8007424:	2f78      	cmp	r7, #120	; 0x78
 8007426:	4680      	mov	r8, r0
 8007428:	460c      	mov	r4, r1
 800742a:	469a      	mov	sl, r3
 800742c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800742e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007432:	d807      	bhi.n	8007444 <_printf_i+0x28>
 8007434:	2f62      	cmp	r7, #98	; 0x62
 8007436:	d80a      	bhi.n	800744e <_printf_i+0x32>
 8007438:	2f00      	cmp	r7, #0
 800743a:	f000 80d9 	beq.w	80075f0 <_printf_i+0x1d4>
 800743e:	2f58      	cmp	r7, #88	; 0x58
 8007440:	f000 80a4 	beq.w	800758c <_printf_i+0x170>
 8007444:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007448:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800744c:	e03a      	b.n	80074c4 <_printf_i+0xa8>
 800744e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007452:	2b15      	cmp	r3, #21
 8007454:	d8f6      	bhi.n	8007444 <_printf_i+0x28>
 8007456:	a101      	add	r1, pc, #4	; (adr r1, 800745c <_printf_i+0x40>)
 8007458:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800745c:	080074b5 	.word	0x080074b5
 8007460:	080074c9 	.word	0x080074c9
 8007464:	08007445 	.word	0x08007445
 8007468:	08007445 	.word	0x08007445
 800746c:	08007445 	.word	0x08007445
 8007470:	08007445 	.word	0x08007445
 8007474:	080074c9 	.word	0x080074c9
 8007478:	08007445 	.word	0x08007445
 800747c:	08007445 	.word	0x08007445
 8007480:	08007445 	.word	0x08007445
 8007484:	08007445 	.word	0x08007445
 8007488:	080075d7 	.word	0x080075d7
 800748c:	080074f9 	.word	0x080074f9
 8007490:	080075b9 	.word	0x080075b9
 8007494:	08007445 	.word	0x08007445
 8007498:	08007445 	.word	0x08007445
 800749c:	080075f9 	.word	0x080075f9
 80074a0:	08007445 	.word	0x08007445
 80074a4:	080074f9 	.word	0x080074f9
 80074a8:	08007445 	.word	0x08007445
 80074ac:	08007445 	.word	0x08007445
 80074b0:	080075c1 	.word	0x080075c1
 80074b4:	682b      	ldr	r3, [r5, #0]
 80074b6:	1d1a      	adds	r2, r3, #4
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	602a      	str	r2, [r5, #0]
 80074bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074c4:	2301      	movs	r3, #1
 80074c6:	e0a4      	b.n	8007612 <_printf_i+0x1f6>
 80074c8:	6820      	ldr	r0, [r4, #0]
 80074ca:	6829      	ldr	r1, [r5, #0]
 80074cc:	0606      	lsls	r6, r0, #24
 80074ce:	f101 0304 	add.w	r3, r1, #4
 80074d2:	d50a      	bpl.n	80074ea <_printf_i+0xce>
 80074d4:	680e      	ldr	r6, [r1, #0]
 80074d6:	602b      	str	r3, [r5, #0]
 80074d8:	2e00      	cmp	r6, #0
 80074da:	da03      	bge.n	80074e4 <_printf_i+0xc8>
 80074dc:	232d      	movs	r3, #45	; 0x2d
 80074de:	4276      	negs	r6, r6
 80074e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074e4:	230a      	movs	r3, #10
 80074e6:	485e      	ldr	r0, [pc, #376]	; (8007660 <_printf_i+0x244>)
 80074e8:	e019      	b.n	800751e <_printf_i+0x102>
 80074ea:	680e      	ldr	r6, [r1, #0]
 80074ec:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074f0:	602b      	str	r3, [r5, #0]
 80074f2:	bf18      	it	ne
 80074f4:	b236      	sxthne	r6, r6
 80074f6:	e7ef      	b.n	80074d8 <_printf_i+0xbc>
 80074f8:	682b      	ldr	r3, [r5, #0]
 80074fa:	6820      	ldr	r0, [r4, #0]
 80074fc:	1d19      	adds	r1, r3, #4
 80074fe:	6029      	str	r1, [r5, #0]
 8007500:	0601      	lsls	r1, r0, #24
 8007502:	d501      	bpl.n	8007508 <_printf_i+0xec>
 8007504:	681e      	ldr	r6, [r3, #0]
 8007506:	e002      	b.n	800750e <_printf_i+0xf2>
 8007508:	0646      	lsls	r6, r0, #25
 800750a:	d5fb      	bpl.n	8007504 <_printf_i+0xe8>
 800750c:	881e      	ldrh	r6, [r3, #0]
 800750e:	2f6f      	cmp	r7, #111	; 0x6f
 8007510:	bf0c      	ite	eq
 8007512:	2308      	moveq	r3, #8
 8007514:	230a      	movne	r3, #10
 8007516:	4852      	ldr	r0, [pc, #328]	; (8007660 <_printf_i+0x244>)
 8007518:	2100      	movs	r1, #0
 800751a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800751e:	6865      	ldr	r5, [r4, #4]
 8007520:	2d00      	cmp	r5, #0
 8007522:	bfa8      	it	ge
 8007524:	6821      	ldrge	r1, [r4, #0]
 8007526:	60a5      	str	r5, [r4, #8]
 8007528:	bfa4      	itt	ge
 800752a:	f021 0104 	bicge.w	r1, r1, #4
 800752e:	6021      	strge	r1, [r4, #0]
 8007530:	b90e      	cbnz	r6, 8007536 <_printf_i+0x11a>
 8007532:	2d00      	cmp	r5, #0
 8007534:	d04d      	beq.n	80075d2 <_printf_i+0x1b6>
 8007536:	4615      	mov	r5, r2
 8007538:	fbb6 f1f3 	udiv	r1, r6, r3
 800753c:	fb03 6711 	mls	r7, r3, r1, r6
 8007540:	5dc7      	ldrb	r7, [r0, r7]
 8007542:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007546:	4637      	mov	r7, r6
 8007548:	42bb      	cmp	r3, r7
 800754a:	460e      	mov	r6, r1
 800754c:	d9f4      	bls.n	8007538 <_printf_i+0x11c>
 800754e:	2b08      	cmp	r3, #8
 8007550:	d10b      	bne.n	800756a <_printf_i+0x14e>
 8007552:	6823      	ldr	r3, [r4, #0]
 8007554:	07de      	lsls	r6, r3, #31
 8007556:	d508      	bpl.n	800756a <_printf_i+0x14e>
 8007558:	6923      	ldr	r3, [r4, #16]
 800755a:	6861      	ldr	r1, [r4, #4]
 800755c:	4299      	cmp	r1, r3
 800755e:	bfde      	ittt	le
 8007560:	2330      	movle	r3, #48	; 0x30
 8007562:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007566:	f105 35ff 	addle.w	r5, r5, #4294967295
 800756a:	1b52      	subs	r2, r2, r5
 800756c:	6122      	str	r2, [r4, #16]
 800756e:	464b      	mov	r3, r9
 8007570:	4621      	mov	r1, r4
 8007572:	4640      	mov	r0, r8
 8007574:	f8cd a000 	str.w	sl, [sp]
 8007578:	aa03      	add	r2, sp, #12
 800757a:	f7ff fedf 	bl	800733c <_printf_common>
 800757e:	3001      	adds	r0, #1
 8007580:	d14c      	bne.n	800761c <_printf_i+0x200>
 8007582:	f04f 30ff 	mov.w	r0, #4294967295
 8007586:	b004      	add	sp, #16
 8007588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800758c:	4834      	ldr	r0, [pc, #208]	; (8007660 <_printf_i+0x244>)
 800758e:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007592:	6829      	ldr	r1, [r5, #0]
 8007594:	6823      	ldr	r3, [r4, #0]
 8007596:	f851 6b04 	ldr.w	r6, [r1], #4
 800759a:	6029      	str	r1, [r5, #0]
 800759c:	061d      	lsls	r5, r3, #24
 800759e:	d514      	bpl.n	80075ca <_printf_i+0x1ae>
 80075a0:	07df      	lsls	r7, r3, #31
 80075a2:	bf44      	itt	mi
 80075a4:	f043 0320 	orrmi.w	r3, r3, #32
 80075a8:	6023      	strmi	r3, [r4, #0]
 80075aa:	b91e      	cbnz	r6, 80075b4 <_printf_i+0x198>
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	f023 0320 	bic.w	r3, r3, #32
 80075b2:	6023      	str	r3, [r4, #0]
 80075b4:	2310      	movs	r3, #16
 80075b6:	e7af      	b.n	8007518 <_printf_i+0xfc>
 80075b8:	6823      	ldr	r3, [r4, #0]
 80075ba:	f043 0320 	orr.w	r3, r3, #32
 80075be:	6023      	str	r3, [r4, #0]
 80075c0:	2378      	movs	r3, #120	; 0x78
 80075c2:	4828      	ldr	r0, [pc, #160]	; (8007664 <_printf_i+0x248>)
 80075c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80075c8:	e7e3      	b.n	8007592 <_printf_i+0x176>
 80075ca:	0659      	lsls	r1, r3, #25
 80075cc:	bf48      	it	mi
 80075ce:	b2b6      	uxthmi	r6, r6
 80075d0:	e7e6      	b.n	80075a0 <_printf_i+0x184>
 80075d2:	4615      	mov	r5, r2
 80075d4:	e7bb      	b.n	800754e <_printf_i+0x132>
 80075d6:	682b      	ldr	r3, [r5, #0]
 80075d8:	6826      	ldr	r6, [r4, #0]
 80075da:	1d18      	adds	r0, r3, #4
 80075dc:	6961      	ldr	r1, [r4, #20]
 80075de:	6028      	str	r0, [r5, #0]
 80075e0:	0635      	lsls	r5, r6, #24
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	d501      	bpl.n	80075ea <_printf_i+0x1ce>
 80075e6:	6019      	str	r1, [r3, #0]
 80075e8:	e002      	b.n	80075f0 <_printf_i+0x1d4>
 80075ea:	0670      	lsls	r0, r6, #25
 80075ec:	d5fb      	bpl.n	80075e6 <_printf_i+0x1ca>
 80075ee:	8019      	strh	r1, [r3, #0]
 80075f0:	2300      	movs	r3, #0
 80075f2:	4615      	mov	r5, r2
 80075f4:	6123      	str	r3, [r4, #16]
 80075f6:	e7ba      	b.n	800756e <_printf_i+0x152>
 80075f8:	682b      	ldr	r3, [r5, #0]
 80075fa:	2100      	movs	r1, #0
 80075fc:	1d1a      	adds	r2, r3, #4
 80075fe:	602a      	str	r2, [r5, #0]
 8007600:	681d      	ldr	r5, [r3, #0]
 8007602:	6862      	ldr	r2, [r4, #4]
 8007604:	4628      	mov	r0, r5
 8007606:	f000 f82f 	bl	8007668 <memchr>
 800760a:	b108      	cbz	r0, 8007610 <_printf_i+0x1f4>
 800760c:	1b40      	subs	r0, r0, r5
 800760e:	6060      	str	r0, [r4, #4]
 8007610:	6863      	ldr	r3, [r4, #4]
 8007612:	6123      	str	r3, [r4, #16]
 8007614:	2300      	movs	r3, #0
 8007616:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800761a:	e7a8      	b.n	800756e <_printf_i+0x152>
 800761c:	462a      	mov	r2, r5
 800761e:	4649      	mov	r1, r9
 8007620:	4640      	mov	r0, r8
 8007622:	6923      	ldr	r3, [r4, #16]
 8007624:	47d0      	blx	sl
 8007626:	3001      	adds	r0, #1
 8007628:	d0ab      	beq.n	8007582 <_printf_i+0x166>
 800762a:	6823      	ldr	r3, [r4, #0]
 800762c:	079b      	lsls	r3, r3, #30
 800762e:	d413      	bmi.n	8007658 <_printf_i+0x23c>
 8007630:	68e0      	ldr	r0, [r4, #12]
 8007632:	9b03      	ldr	r3, [sp, #12]
 8007634:	4298      	cmp	r0, r3
 8007636:	bfb8      	it	lt
 8007638:	4618      	movlt	r0, r3
 800763a:	e7a4      	b.n	8007586 <_printf_i+0x16a>
 800763c:	2301      	movs	r3, #1
 800763e:	4632      	mov	r2, r6
 8007640:	4649      	mov	r1, r9
 8007642:	4640      	mov	r0, r8
 8007644:	47d0      	blx	sl
 8007646:	3001      	adds	r0, #1
 8007648:	d09b      	beq.n	8007582 <_printf_i+0x166>
 800764a:	3501      	adds	r5, #1
 800764c:	68e3      	ldr	r3, [r4, #12]
 800764e:	9903      	ldr	r1, [sp, #12]
 8007650:	1a5b      	subs	r3, r3, r1
 8007652:	42ab      	cmp	r3, r5
 8007654:	dcf2      	bgt.n	800763c <_printf_i+0x220>
 8007656:	e7eb      	b.n	8007630 <_printf_i+0x214>
 8007658:	2500      	movs	r5, #0
 800765a:	f104 0619 	add.w	r6, r4, #25
 800765e:	e7f5      	b.n	800764c <_printf_i+0x230>
 8007660:	080079d3 	.word	0x080079d3
 8007664:	080079e4 	.word	0x080079e4

08007668 <memchr>:
 8007668:	4603      	mov	r3, r0
 800766a:	b510      	push	{r4, lr}
 800766c:	b2c9      	uxtb	r1, r1
 800766e:	4402      	add	r2, r0
 8007670:	4293      	cmp	r3, r2
 8007672:	4618      	mov	r0, r3
 8007674:	d101      	bne.n	800767a <memchr+0x12>
 8007676:	2000      	movs	r0, #0
 8007678:	e003      	b.n	8007682 <memchr+0x1a>
 800767a:	7804      	ldrb	r4, [r0, #0]
 800767c:	3301      	adds	r3, #1
 800767e:	428c      	cmp	r4, r1
 8007680:	d1f6      	bne.n	8007670 <memchr+0x8>
 8007682:	bd10      	pop	{r4, pc}

08007684 <memcpy>:
 8007684:	440a      	add	r2, r1
 8007686:	4291      	cmp	r1, r2
 8007688:	f100 33ff 	add.w	r3, r0, #4294967295
 800768c:	d100      	bne.n	8007690 <memcpy+0xc>
 800768e:	4770      	bx	lr
 8007690:	b510      	push	{r4, lr}
 8007692:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007696:	4291      	cmp	r1, r2
 8007698:	f803 4f01 	strb.w	r4, [r3, #1]!
 800769c:	d1f9      	bne.n	8007692 <memcpy+0xe>
 800769e:	bd10      	pop	{r4, pc}

080076a0 <memmove>:
 80076a0:	4288      	cmp	r0, r1
 80076a2:	b510      	push	{r4, lr}
 80076a4:	eb01 0402 	add.w	r4, r1, r2
 80076a8:	d902      	bls.n	80076b0 <memmove+0x10>
 80076aa:	4284      	cmp	r4, r0
 80076ac:	4623      	mov	r3, r4
 80076ae:	d807      	bhi.n	80076c0 <memmove+0x20>
 80076b0:	1e43      	subs	r3, r0, #1
 80076b2:	42a1      	cmp	r1, r4
 80076b4:	d008      	beq.n	80076c8 <memmove+0x28>
 80076b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80076ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80076be:	e7f8      	b.n	80076b2 <memmove+0x12>
 80076c0:	4601      	mov	r1, r0
 80076c2:	4402      	add	r2, r0
 80076c4:	428a      	cmp	r2, r1
 80076c6:	d100      	bne.n	80076ca <memmove+0x2a>
 80076c8:	bd10      	pop	{r4, pc}
 80076ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80076ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80076d2:	e7f7      	b.n	80076c4 <memmove+0x24>

080076d4 <_free_r>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	4605      	mov	r5, r0
 80076d8:	2900      	cmp	r1, #0
 80076da:	d040      	beq.n	800775e <_free_r+0x8a>
 80076dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076e0:	1f0c      	subs	r4, r1, #4
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	bfb8      	it	lt
 80076e6:	18e4      	addlt	r4, r4, r3
 80076e8:	f000 f910 	bl	800790c <__malloc_lock>
 80076ec:	4a1c      	ldr	r2, [pc, #112]	; (8007760 <_free_r+0x8c>)
 80076ee:	6813      	ldr	r3, [r2, #0]
 80076f0:	b933      	cbnz	r3, 8007700 <_free_r+0x2c>
 80076f2:	6063      	str	r3, [r4, #4]
 80076f4:	6014      	str	r4, [r2, #0]
 80076f6:	4628      	mov	r0, r5
 80076f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80076fc:	f000 b90c 	b.w	8007918 <__malloc_unlock>
 8007700:	42a3      	cmp	r3, r4
 8007702:	d908      	bls.n	8007716 <_free_r+0x42>
 8007704:	6820      	ldr	r0, [r4, #0]
 8007706:	1821      	adds	r1, r4, r0
 8007708:	428b      	cmp	r3, r1
 800770a:	bf01      	itttt	eq
 800770c:	6819      	ldreq	r1, [r3, #0]
 800770e:	685b      	ldreq	r3, [r3, #4]
 8007710:	1809      	addeq	r1, r1, r0
 8007712:	6021      	streq	r1, [r4, #0]
 8007714:	e7ed      	b.n	80076f2 <_free_r+0x1e>
 8007716:	461a      	mov	r2, r3
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	b10b      	cbz	r3, 8007720 <_free_r+0x4c>
 800771c:	42a3      	cmp	r3, r4
 800771e:	d9fa      	bls.n	8007716 <_free_r+0x42>
 8007720:	6811      	ldr	r1, [r2, #0]
 8007722:	1850      	adds	r0, r2, r1
 8007724:	42a0      	cmp	r0, r4
 8007726:	d10b      	bne.n	8007740 <_free_r+0x6c>
 8007728:	6820      	ldr	r0, [r4, #0]
 800772a:	4401      	add	r1, r0
 800772c:	1850      	adds	r0, r2, r1
 800772e:	4283      	cmp	r3, r0
 8007730:	6011      	str	r1, [r2, #0]
 8007732:	d1e0      	bne.n	80076f6 <_free_r+0x22>
 8007734:	6818      	ldr	r0, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	4401      	add	r1, r0
 800773a:	6011      	str	r1, [r2, #0]
 800773c:	6053      	str	r3, [r2, #4]
 800773e:	e7da      	b.n	80076f6 <_free_r+0x22>
 8007740:	d902      	bls.n	8007748 <_free_r+0x74>
 8007742:	230c      	movs	r3, #12
 8007744:	602b      	str	r3, [r5, #0]
 8007746:	e7d6      	b.n	80076f6 <_free_r+0x22>
 8007748:	6820      	ldr	r0, [r4, #0]
 800774a:	1821      	adds	r1, r4, r0
 800774c:	428b      	cmp	r3, r1
 800774e:	bf01      	itttt	eq
 8007750:	6819      	ldreq	r1, [r3, #0]
 8007752:	685b      	ldreq	r3, [r3, #4]
 8007754:	1809      	addeq	r1, r1, r0
 8007756:	6021      	streq	r1, [r4, #0]
 8007758:	6063      	str	r3, [r4, #4]
 800775a:	6054      	str	r4, [r2, #4]
 800775c:	e7cb      	b.n	80076f6 <_free_r+0x22>
 800775e:	bd38      	pop	{r3, r4, r5, pc}
 8007760:	200005c8 	.word	0x200005c8

08007764 <sbrk_aligned>:
 8007764:	b570      	push	{r4, r5, r6, lr}
 8007766:	4e0e      	ldr	r6, [pc, #56]	; (80077a0 <sbrk_aligned+0x3c>)
 8007768:	460c      	mov	r4, r1
 800776a:	6831      	ldr	r1, [r6, #0]
 800776c:	4605      	mov	r5, r0
 800776e:	b911      	cbnz	r1, 8007776 <sbrk_aligned+0x12>
 8007770:	f000 f8bc 	bl	80078ec <_sbrk_r>
 8007774:	6030      	str	r0, [r6, #0]
 8007776:	4621      	mov	r1, r4
 8007778:	4628      	mov	r0, r5
 800777a:	f000 f8b7 	bl	80078ec <_sbrk_r>
 800777e:	1c43      	adds	r3, r0, #1
 8007780:	d00a      	beq.n	8007798 <sbrk_aligned+0x34>
 8007782:	1cc4      	adds	r4, r0, #3
 8007784:	f024 0403 	bic.w	r4, r4, #3
 8007788:	42a0      	cmp	r0, r4
 800778a:	d007      	beq.n	800779c <sbrk_aligned+0x38>
 800778c:	1a21      	subs	r1, r4, r0
 800778e:	4628      	mov	r0, r5
 8007790:	f000 f8ac 	bl	80078ec <_sbrk_r>
 8007794:	3001      	adds	r0, #1
 8007796:	d101      	bne.n	800779c <sbrk_aligned+0x38>
 8007798:	f04f 34ff 	mov.w	r4, #4294967295
 800779c:	4620      	mov	r0, r4
 800779e:	bd70      	pop	{r4, r5, r6, pc}
 80077a0:	200005cc 	.word	0x200005cc

080077a4 <_malloc_r>:
 80077a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077a8:	1ccd      	adds	r5, r1, #3
 80077aa:	f025 0503 	bic.w	r5, r5, #3
 80077ae:	3508      	adds	r5, #8
 80077b0:	2d0c      	cmp	r5, #12
 80077b2:	bf38      	it	cc
 80077b4:	250c      	movcc	r5, #12
 80077b6:	2d00      	cmp	r5, #0
 80077b8:	4607      	mov	r7, r0
 80077ba:	db01      	blt.n	80077c0 <_malloc_r+0x1c>
 80077bc:	42a9      	cmp	r1, r5
 80077be:	d905      	bls.n	80077cc <_malloc_r+0x28>
 80077c0:	230c      	movs	r3, #12
 80077c2:	2600      	movs	r6, #0
 80077c4:	603b      	str	r3, [r7, #0]
 80077c6:	4630      	mov	r0, r6
 80077c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077cc:	4e2e      	ldr	r6, [pc, #184]	; (8007888 <_malloc_r+0xe4>)
 80077ce:	f000 f89d 	bl	800790c <__malloc_lock>
 80077d2:	6833      	ldr	r3, [r6, #0]
 80077d4:	461c      	mov	r4, r3
 80077d6:	bb34      	cbnz	r4, 8007826 <_malloc_r+0x82>
 80077d8:	4629      	mov	r1, r5
 80077da:	4638      	mov	r0, r7
 80077dc:	f7ff ffc2 	bl	8007764 <sbrk_aligned>
 80077e0:	1c43      	adds	r3, r0, #1
 80077e2:	4604      	mov	r4, r0
 80077e4:	d14d      	bne.n	8007882 <_malloc_r+0xde>
 80077e6:	6834      	ldr	r4, [r6, #0]
 80077e8:	4626      	mov	r6, r4
 80077ea:	2e00      	cmp	r6, #0
 80077ec:	d140      	bne.n	8007870 <_malloc_r+0xcc>
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	4631      	mov	r1, r6
 80077f2:	4638      	mov	r0, r7
 80077f4:	eb04 0803 	add.w	r8, r4, r3
 80077f8:	f000 f878 	bl	80078ec <_sbrk_r>
 80077fc:	4580      	cmp	r8, r0
 80077fe:	d13a      	bne.n	8007876 <_malloc_r+0xd2>
 8007800:	6821      	ldr	r1, [r4, #0]
 8007802:	3503      	adds	r5, #3
 8007804:	1a6d      	subs	r5, r5, r1
 8007806:	f025 0503 	bic.w	r5, r5, #3
 800780a:	3508      	adds	r5, #8
 800780c:	2d0c      	cmp	r5, #12
 800780e:	bf38      	it	cc
 8007810:	250c      	movcc	r5, #12
 8007812:	4638      	mov	r0, r7
 8007814:	4629      	mov	r1, r5
 8007816:	f7ff ffa5 	bl	8007764 <sbrk_aligned>
 800781a:	3001      	adds	r0, #1
 800781c:	d02b      	beq.n	8007876 <_malloc_r+0xd2>
 800781e:	6823      	ldr	r3, [r4, #0]
 8007820:	442b      	add	r3, r5
 8007822:	6023      	str	r3, [r4, #0]
 8007824:	e00e      	b.n	8007844 <_malloc_r+0xa0>
 8007826:	6822      	ldr	r2, [r4, #0]
 8007828:	1b52      	subs	r2, r2, r5
 800782a:	d41e      	bmi.n	800786a <_malloc_r+0xc6>
 800782c:	2a0b      	cmp	r2, #11
 800782e:	d916      	bls.n	800785e <_malloc_r+0xba>
 8007830:	1961      	adds	r1, r4, r5
 8007832:	42a3      	cmp	r3, r4
 8007834:	6025      	str	r5, [r4, #0]
 8007836:	bf18      	it	ne
 8007838:	6059      	strne	r1, [r3, #4]
 800783a:	6863      	ldr	r3, [r4, #4]
 800783c:	bf08      	it	eq
 800783e:	6031      	streq	r1, [r6, #0]
 8007840:	5162      	str	r2, [r4, r5]
 8007842:	604b      	str	r3, [r1, #4]
 8007844:	4638      	mov	r0, r7
 8007846:	f104 060b 	add.w	r6, r4, #11
 800784a:	f000 f865 	bl	8007918 <__malloc_unlock>
 800784e:	f026 0607 	bic.w	r6, r6, #7
 8007852:	1d23      	adds	r3, r4, #4
 8007854:	1af2      	subs	r2, r6, r3
 8007856:	d0b6      	beq.n	80077c6 <_malloc_r+0x22>
 8007858:	1b9b      	subs	r3, r3, r6
 800785a:	50a3      	str	r3, [r4, r2]
 800785c:	e7b3      	b.n	80077c6 <_malloc_r+0x22>
 800785e:	6862      	ldr	r2, [r4, #4]
 8007860:	42a3      	cmp	r3, r4
 8007862:	bf0c      	ite	eq
 8007864:	6032      	streq	r2, [r6, #0]
 8007866:	605a      	strne	r2, [r3, #4]
 8007868:	e7ec      	b.n	8007844 <_malloc_r+0xa0>
 800786a:	4623      	mov	r3, r4
 800786c:	6864      	ldr	r4, [r4, #4]
 800786e:	e7b2      	b.n	80077d6 <_malloc_r+0x32>
 8007870:	4634      	mov	r4, r6
 8007872:	6876      	ldr	r6, [r6, #4]
 8007874:	e7b9      	b.n	80077ea <_malloc_r+0x46>
 8007876:	230c      	movs	r3, #12
 8007878:	4638      	mov	r0, r7
 800787a:	603b      	str	r3, [r7, #0]
 800787c:	f000 f84c 	bl	8007918 <__malloc_unlock>
 8007880:	e7a1      	b.n	80077c6 <_malloc_r+0x22>
 8007882:	6025      	str	r5, [r4, #0]
 8007884:	e7de      	b.n	8007844 <_malloc_r+0xa0>
 8007886:	bf00      	nop
 8007888:	200005c8 	.word	0x200005c8

0800788c <_realloc_r>:
 800788c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007890:	4680      	mov	r8, r0
 8007892:	4614      	mov	r4, r2
 8007894:	460e      	mov	r6, r1
 8007896:	b921      	cbnz	r1, 80078a2 <_realloc_r+0x16>
 8007898:	4611      	mov	r1, r2
 800789a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800789e:	f7ff bf81 	b.w	80077a4 <_malloc_r>
 80078a2:	b92a      	cbnz	r2, 80078b0 <_realloc_r+0x24>
 80078a4:	f7ff ff16 	bl	80076d4 <_free_r>
 80078a8:	4625      	mov	r5, r4
 80078aa:	4628      	mov	r0, r5
 80078ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078b0:	f000 f838 	bl	8007924 <_malloc_usable_size_r>
 80078b4:	4284      	cmp	r4, r0
 80078b6:	4607      	mov	r7, r0
 80078b8:	d802      	bhi.n	80078c0 <_realloc_r+0x34>
 80078ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80078be:	d812      	bhi.n	80078e6 <_realloc_r+0x5a>
 80078c0:	4621      	mov	r1, r4
 80078c2:	4640      	mov	r0, r8
 80078c4:	f7ff ff6e 	bl	80077a4 <_malloc_r>
 80078c8:	4605      	mov	r5, r0
 80078ca:	2800      	cmp	r0, #0
 80078cc:	d0ed      	beq.n	80078aa <_realloc_r+0x1e>
 80078ce:	42bc      	cmp	r4, r7
 80078d0:	4622      	mov	r2, r4
 80078d2:	4631      	mov	r1, r6
 80078d4:	bf28      	it	cs
 80078d6:	463a      	movcs	r2, r7
 80078d8:	f7ff fed4 	bl	8007684 <memcpy>
 80078dc:	4631      	mov	r1, r6
 80078de:	4640      	mov	r0, r8
 80078e0:	f7ff fef8 	bl	80076d4 <_free_r>
 80078e4:	e7e1      	b.n	80078aa <_realloc_r+0x1e>
 80078e6:	4635      	mov	r5, r6
 80078e8:	e7df      	b.n	80078aa <_realloc_r+0x1e>
	...

080078ec <_sbrk_r>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	2300      	movs	r3, #0
 80078f0:	4d05      	ldr	r5, [pc, #20]	; (8007908 <_sbrk_r+0x1c>)
 80078f2:	4604      	mov	r4, r0
 80078f4:	4608      	mov	r0, r1
 80078f6:	602b      	str	r3, [r5, #0]
 80078f8:	f7f9 f8d8 	bl	8000aac <_sbrk>
 80078fc:	1c43      	adds	r3, r0, #1
 80078fe:	d102      	bne.n	8007906 <_sbrk_r+0x1a>
 8007900:	682b      	ldr	r3, [r5, #0]
 8007902:	b103      	cbz	r3, 8007906 <_sbrk_r+0x1a>
 8007904:	6023      	str	r3, [r4, #0]
 8007906:	bd38      	pop	{r3, r4, r5, pc}
 8007908:	200005d0 	.word	0x200005d0

0800790c <__malloc_lock>:
 800790c:	4801      	ldr	r0, [pc, #4]	; (8007914 <__malloc_lock+0x8>)
 800790e:	f000 b811 	b.w	8007934 <__retarget_lock_acquire_recursive>
 8007912:	bf00      	nop
 8007914:	200005d4 	.word	0x200005d4

08007918 <__malloc_unlock>:
 8007918:	4801      	ldr	r0, [pc, #4]	; (8007920 <__malloc_unlock+0x8>)
 800791a:	f000 b80c 	b.w	8007936 <__retarget_lock_release_recursive>
 800791e:	bf00      	nop
 8007920:	200005d4 	.word	0x200005d4

08007924 <_malloc_usable_size_r>:
 8007924:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007928:	1f18      	subs	r0, r3, #4
 800792a:	2b00      	cmp	r3, #0
 800792c:	bfbc      	itt	lt
 800792e:	580b      	ldrlt	r3, [r1, r0]
 8007930:	18c0      	addlt	r0, r0, r3
 8007932:	4770      	bx	lr

08007934 <__retarget_lock_acquire_recursive>:
 8007934:	4770      	bx	lr

08007936 <__retarget_lock_release_recursive>:
 8007936:	4770      	bx	lr

08007938 <_init>:
 8007938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800793a:	bf00      	nop
 800793c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800793e:	bc08      	pop	{r3}
 8007940:	469e      	mov	lr, r3
 8007942:	4770      	bx	lr

08007944 <_fini>:
 8007944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007946:	bf00      	nop
 8007948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800794a:	bc08      	pop	{r3}
 800794c:	469e      	mov	lr, r3
 800794e:	4770      	bx	lr
